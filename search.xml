<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nginx</title>
      <link href="/2021/10/20/nginx/"/>
      <url>/2021/10/20/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="强大的web服务器"><a href="#强大的web服务器" class="headerlink" title="强大的web服务器 "></a>强大的web服务器 <span id="more"></span></h2><h2 id="nginx作用"><a href="#nginx作用" class="headerlink" title="nginx作用"></a>nginx作用</h2><ul><li>web  server </li><li>反向代理</li><li>负载均衡</li></ul><p>优秀的web服务器软件</p><h2 id="b-s-c-s区别"><a href="#b-s-c-s区别" class="headerlink" title="b/s    c/s区别"></a>b/s    c/s区别</h2><h4 id="c-s-client-sever-客户端-服务端"><a href="#c-s-client-sever-客户端-服务端" class="headerlink" title="c/s  client/sever  客户端/服务端"></a><strong>c/s</strong>  client/sever  客户端/服务端</h4><p>QQ客户端/QQ服务器</p><p>微信客户端/微信服务器</p><h4 id="b-s-浏览器-网站"><a href="#b-s-浏览器-网站" class="headerlink" title="b/s     浏览器/网站"></a>b/s     浏览器/网站</h4><h2 id="nginx是什么"><a href="#nginx是什么" class="headerlink" title="nginx是什么"></a>nginx是什么</h2><p>nginx是一块优秀的高性能的web服务器，反向代理服务器，负载均衡服务器</p><h2 id="常见的web服务器"><a href="#常见的web服务器" class="headerlink" title="常见的web服务器"></a>常见的web服务器</h2><p>在linux和windows平台常见的web服务器有</p><ul><li>Apache，（国企性质，要求技术栈不需要那么先进，没有大量的流量，只需需要系统架构稳定即可）</li><li>nginx（主流的互联网公司都选择nginx，淘宝，京东，美团，斗鱼，网易）</li><li>Lighttpd  （性能非常接近nginx，一般都是老外使用）</li><li>Tmocat （应用服务武器，java做程序解析）</li><li>IBM （websphere）</li></ul><p>windows平台下的</p><ul><li>IIS </li></ul><h1 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apache是世界主流的web服务器，大部分网站都是apache搭建的，优势是开放源代码，开发维护的团队强大，apache支持跨平台应用（linux，unix，windows）</span><br><span class="line">但是，apache属于重量级的产品，功能都是以模块化定制，且它的工作模式，占用的内存资源过多，对系统消耗很大，性能也稍弱于nginx</span><br></pre></td></tr></table></figure><h2 id="lighttpd"><a href="#lighttpd" class="headerlink" title="lighttpd"></a>lighttpd</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是一款高性能，高安全性，快速，且配置灵活的web服务器产品，专门为高流量的网站设计，相比其他各款web服务器，内存占用量极小，能够提供有效的API，对CPU负载情况管理，支持后台请求转发，fastcgi,scgi，资源亚索，url重写，别名等等同能，他是nginx的重要对手</span><br></pre></td></tr></table></figure><h2 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tomcat汤姆猫是一个开源，运行基于Java的一个web应用服务器，主要根据serverlet惊醒执行，但是tomcat对于平台文件，静态文件，高并发处理还是较弱的，因此也是和nginx，apache结合使用。</span><br><span class="line">想要使用tomacat应用服务器，需要掌握基本的Java环境部署等</span><br></pre></td></tr></table></figure><h2 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">和nginx，apache，lighttpd有哪些如别呢？</span><br><span class="line"></span><br><span class="line">IIS支持图形化操作，毕竟是在windows平台，通过鼠标典籍就可以完成网站配置</span><br><span class="line">IIS是一整套web组件，包含了web服务器，FTP服务器，SMTP服务器等常用的网页浏览、文件传输、邮件新闻等功能。</span><br><span class="line">功能还是很强大，但是只能运行在windows平台</span><br></pre></td></tr></table></figure><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是俄罗斯人开发的一块高性能HTTP web服务器，支持反向代理，负载均衡，资源亚索，url重写，往回走那跳转等等功能nginx以高效的linux网络模型，epool，event，作为网络IO模型，kqueue，在高并发发网站情况下，nginx能够轻松支持5w+的并发流量，并且消耗的服务器内存，CPU等等资源，也是很低的，运行起来非常稳定。</span><br></pre></td></tr></table></figure><h2 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">收费技术栈：</span><br><span class="line">redhat + jqurey +js +svn +oracle +tomcat + java + apache</span><br><span class="line"></span><br><span class="line">省钱，走向开源技术栈：</span><br><span class="line">centos + jquery + js +git + mysql +Java + tomcat +python +perl +nginx</span><br></pre></td></tr></table></figure><h1 id="Nginx特点"><a href="#Nginx特点" class="headerlink" title="Nginx特点"></a>Nginx特点</h1><h2 id="成本低"><a href="#成本低" class="headerlink" title="成本低"></a>成本低</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx强大于其反向代理的功能，软件父亲在均衡，还存在硬件负载均衡（F5，netscaler），但是由于加个昂贵，小型公司不会使用，利用nginx搭建高可用性的负载均衡的站点。</span><br><span class="line">由于ngix支持bsd开源许可协议，bsd就是可以给用户更自由的使用权限，可以自由试用，修改源码，如果你修改后发布，还得遵循BSD协议。</span><br><span class="line">利用软件技术，可以实现硬件负载均衡一样的效果，经济实惠</span><br></pre></td></tr></table></figure><h2 id="几大优势"><a href="#几大优势" class="headerlink" title="几大优势"></a>几大优势</h2><ul><li>nginx配置文件更加<code>易懂</code></li><li>nginx支持网站url地址重写（网站需要域名更换），还能够根据url的特点，进行一个请求转发，判断（7层负载均衡，比如判断来自于移动端请求，发给移动端服务器，判断是来自于PC端流量，用户请求就发给运行着PC断代码的服务器）</li><li>nginx支持高可用性配置（房子单点故障，服务器崩溃），nginx非常稳定，宕机一场推出的几率很小</li><li>nginx能够节省网络带宽，支持静态文件压缩后传输，支持gzip压缩功能</li><li>nginx还支持<code>热部署</code>，可以在不停止nginx的情况下更新代码，并且支持7*24小时运转</li></ul><h1 id="nginx的网络模型"><a href="#nginx的网络模型" class="headerlink" title="nginx的网络模型"></a>nginx的网络模型</h1><h3 id="网络IO的模型概念"><a href="#网络IO的模型概念" class="headerlink" title="网络IO的模型概念"></a>网络IO的模型概念</h3><h4 id="内核空间，用户空间区别"><a href="#内核空间，用户空间区别" class="headerlink" title="内核空间，用户空间区别"></a><code>内核空间，用户空间</code>区别</h4><p><code>内核空间</code>：一个操作系统的核心组件，称之为内核，独立于普通的应用程序，可以直接操作底层硬件，处理系统受保护的区域。</p><p>操作系统为了保护系统的核心区域，也就是内核，使得用户无法直接修改系统底层，因此操作系统开辟了两块虚拟内存空间，</p><p>一个是<code>内核空间</code>，一个是<code>用户空间</code></p><h5 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h5><p>为了控制进程的执行，操作系统的内核需要有能力挂起CPU上运行的程序（暂停一个CPU正在处理的进程），还能恢复之前以及刮起的进程，这种行为称之为进程切换</p><h5 id="进程阻塞"><a href="#进程阻塞" class="headerlink" title="进程阻塞"></a>进程阻塞</h5><p>正在执行中的进程，由于某些时间的等待，比如资源加载中，资源加载失败，操作系统自动的就会阻塞该进程，调用内核的block语句，让该进程处于阻塞状态，因此阻塞的进程是一种主动的行为。</p><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><p>这是计算机科学里的一个术语，表示只想文件引用的一个抽象的概念，文件描述符是一个索引值，指向linux内核为每一个进程打开的文件坐记录的一个表。</p><p> 程序没打开一个文件，系统内核就像该进程发送一个文件描述符</p><h2 id="linux-IO模型"><a href="#linux-IO模型" class="headerlink" title="linux IO模型"></a>linux IO模型</h2><p>input  输入</p><p>output  输出</p><p>对于linux文件读写操作</p><p>数据的IO操作，比如文件的读取，数据有些会被拷贝到操作系统的内核缓冲区，然后在从缓冲区拷贝到应用程序的内存空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个读取操作，精力了两个阶段</span><br><span class="line">1.等该数据准备</span><br><span class="line">2.数据从内核空间拷贝到用户进程空间</span><br></pre></td></tr></table></figure><p>网络IO</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.等带网络上的数据分段到达，然后复制到内核的缓冲区</span><br><span class="line">2.数据从内核缓冲区拷贝到用户空间的应用程序</span><br><span class="line"></span><br><span class="line">网络IO主要面临两个问题，数据计算，网络IO延迟</span><br><span class="line">网络延迟，是造成性能低下的主要原因</span><br></pre></td></tr></table></figure><h2 id="为何选择Nginx"><a href="#为何选择Nginx" class="headerlink" title="为何选择Nginx"></a>为何选择Nginx</h2><p>nginx就是在于优秀的网络IO处理模型</p><p>常见的IO模型又</p><ul><li>阻塞模型</li><li>非阻塞模型</li><li>IO多路复用</li><li>异步IO</li></ul><p>网络IO值得就是在网络中进行数据的读，写操作，本质上就是一个socket套接字读取，socket套接字在linux系统中被抽象为流的概念，网络IO就是对数据流的处理。</p><h4 id="阻塞模型（同步阻塞IO-block-IO）"><a href="#阻塞模型（同步阻塞IO-block-IO）" class="headerlink" title="阻塞模型（同步阻塞IO block IO）"></a>阻塞模型（同步阻塞IO block IO）</h4><p>同步阻塞IO的特点就是，IO执行的两个阶段都是阻塞的</p><p>​    用户空间发起调用，内核准备谁是，阻塞</p><p>​    内核拷贝数据到用户空间，此时阻塞</p><p>知道族中内核返回结果，数据拷贝完毕，用户接触block阻塞状态，重新的运行</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200210180924183.png" alt="image-20200210180924183"></p><p>在linux默认的情况下，所有的socket套接字操作都是阻塞的，阻塞指的就是进程在等待中，CPU此时去做别的事情了。</p><p>同步阻塞模型，主要优缺点如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.阻塞IO能够及时返回数据，无延迟</span><br><span class="line">2.对于开发人员负担较低，开发负担较低</span><br><span class="line">3.但是对于用户是很不友好，性能较弱</span><br></pre></td></tr></table></figure><h2 id="同步非阻塞"><a href="#同步非阻塞" class="headerlink" title="同步非阻塞"></a>同步非阻塞</h2><p>同步非阻塞就是每隔一会儿<code>检索一次</code>，进行轮训调用的方式</p><p>在网络IO时候，非阻塞IO同样进行recvform系统调用，且检查数据是否准备好了，这里和阻塞IO不一样，非阻塞模式将<code>整个阻塞时间片</code>拆分成N小的阻塞，CPU仍有机会不断的操作该进程。</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200210205814736.png" alt="image-20200210205814736"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当用户进程发起read操作，内核若是没有数据，不会立即阻塞用户进程，而是立即返回了error报错</span><br><span class="line">对于用户进程而言，这就不再是等待了，而是立即有了一个结果，已知是error的时候，知道了数据还未准备好，于是再次发起系统调用。</span><br><span class="line">一旦内核准备好了数据，且在此收到用户的系统调用，内核立即将数据拷贝到用户内存，然后返回给用户进程。</span><br><span class="line"></span><br><span class="line">区别就在于发起recvfrom时候的阻塞拆分了，用户进程需要不断的主动询问内核数据是否准备好</span><br></pre></td></tr></table></figure><p>同步非阻塞的优缺点：</p><p>​    优点：在等待的时间内，可能继续处理其他的任务，当然也包括继续提交新的任务</p><p>​    缺点：任务完成的延迟比较大，因为需要多次的发起系统轮训调用操作，并且很有可能在任务轮训过程中，数据已经准备完毕了，造成延迟，对整体系统的吞吐性能有了降低。</p><h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p>计算机系统后台可能存在多个进程任务，如果能自动的循环的查询多个任务的进度，而不需要用户进程主动发起轮训调用，而是有人来帮忙盯着这些进度，那就方便了</p><p>因此linux系统下<code>select，poll，epol</code>l就是来帮你做盯着进程进度的一个软件，并且<code>epoll</code>效率是最高的，并且nginx就是使用epoll网络io模型</p><h4 id="select模型"><a href="#select模型" class="headerlink" title="select模型"></a>select模型</h4><p>select 就是做自动轮训的这件是，它和非阻塞轮训的区别在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select轮询可以同时监听多个socket，当一个socket的数据准备好了，即可进行IO操作，进程发起recvform系统调用，将数据由内核拷贝到用户进程，这个过程是阻塞的。</span><br><span class="line"></span><br><span class="line">但是这里的select或是poll阻塞进程，和同步IO的阻塞不一样，同步IO的阻塞是数据全部准备好，一次性处理，而select是有一部分数据就调用用户进程来处理。</span><br><span class="line"></span><br><span class="line">IO多路复用，就是轮询多个socket,好比餐厅的电子屏，监控着多个食品订单的完成情况</span><br></pre></td></tr></table></figure><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200210213338845.png" alt="image-20200210213338845"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IO多路复用指的就是linux下的select，poll，epoll，也被称作事件驱动IO</span><br><span class="line">它们的好处在于：单进程就可以同时处理多个socket连接。原理就是select，poll，epoll这个函数会不断的轮询负责的所有socket，当某个socket有数据到达了，就通知用户进程。</span><br><span class="line"></span><br><span class="line">当用户进程调用了select这个函数，整个进程就会被阻塞了，kernel内核会监视所有select负责的socket，有一个socket准备好了数据，select就返回给用户进程，用户进程发起系统调用，数据拷贝到用户进程。</span><br></pre></td></tr></table></figure><p>其实IO多路复用和阻塞IO并没有太大的区别，有可能还更差一点，因为还额外的调用了select，有了额外的消耗。好处就是select可以同时处理多个连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果连接数不是很多的情况下，用IO多路复用还不如使用（多线程+阻塞IO）的性能更好。</span><br><span class="line">IO多路复用优势在于同时处理更多的连接，而不是处理速度</span><br></pre></td></tr></table></figure><h2 id="异步非阻塞IO模型"><a href="#异步非阻塞IO模型" class="headerlink" title="异步非阻塞IO模型"></a>异步非阻塞IO模型</h2><p>用户进程发起aio_read系统调用，无论内核数据是否准备好，都会直接返回给用户进程，用户进程可以继续做其他事情。等待socket数据准备好了，内核直接复制给用户进程，接着向进程发出通知，整个过程都是非阻塞的。</p><p>相当于你把任务交个他，等他处理完毕之后会主动告诉你任务处理完成</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200210215153896.png" alt="image-20200210215153896"></p><h2 id="网络IO模型总结"><a href="#网络IO模型总结" class="headerlink" title="网络IO模型总结"></a>网络IO模型总结</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.阻塞和非阻塞的区别</span><br><span class="line">阻塞IO会一直阻塞对应的进程，直到数据操作完毕，</span><br><span class="line">非阻塞IO在内核准备数据阶段就立刻返回</span><br><span class="line"></span><br><span class="line">2.同步IO和异步IO的区别</span><br><span class="line">区别在于，同步IO在IO操作的时候会被进程阻塞，blocking io，non-blocking io，IO multiplexing都属于同步IO</span><br><span class="line">异步IO，在进程发起IO操作之后，内核就直接返回了，直到内核发送一个信号，告诉进程IO完成了，整个进程完全没有被阻塞。</span><br></pre></td></tr></table></figure><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200211092355819.png" alt="image-20200211092355819"></p><h2 id="Nginx架构组成"><a href="#Nginx架构组成" class="headerlink" title="Nginx架构组成"></a>Nginx架构组成</h2><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200210162748550.png" alt="image-20200210162748550"></p><h3 id="Nginx安装配置"><a href="#Nginx安装配置" class="headerlink" title="Nginx安装配置"></a>Nginx安装配置</h3><p>Nginx如今分为商业版，开源版，支持Linux与Windows平台下载使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx.com  商业版</span><br><span class="line">nginx.org  开源版</span><br><span class="line">https://tengine.taobao.org/</span><br></pre></td></tr></table></figure><p>1.nginx安装和配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rpm包安装</span><br><span class="line">yum工具自动化安装</span><br><span class="line">获取源代码，手动编译安装nginx（制定安装路径，额外的开启nginx第三方的功能）</span><br><span class="line"></span><br><span class="line">2.选择了nginx编译安装，那么就得解决好linux的编译开发环境，gcc，make编译工具</span><br><span class="line">使用yum工具之前，必须配置好yum源</span><br><span class="line"></span><br><span class="line">3.配置好yum源之后，安装以下编译工具</span><br><span class="line">yum install  -y   gcc  gcc-c++  autoconf  automake make</span><br><span class="line"></span><br><span class="line">4.安装时用nginx还得安装nginx所需的一些第三方系统库的支持，比如nginx的静态资源亚索功能所需的gzip lib库，nginx需要支持URL重写，所需的pcre库，perl开发的依赖库，以及nginx单间加密站点https，所需要的openssl依赖库</span><br><span class="line">yum install -y  zlib  zlib-devel openssl openssl-devel pcre  pcre-devel  wget httpd-tools  vim </span><br><span class="line"></span><br><span class="line">5.安装完毕nginx所需的基础依赖库，还得检查系统的防火墙是否关闭，selinux关闭，yum配置，网络情况等等</span><br><span class="line"> iptables -F  # 清楚防火墙规则</span><br><span class="line"> systemctl stop  firewalld  # 停止防火墙服务</span><br><span class="line"> getenforce   #查看selinux状态</span><br></pre></td></tr></table></figure><h3 id="编译安装nginx"><a href="#编译安装nginx" class="headerlink" title="编译安装nginx"></a>编译安装nginx</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">1.下载程序源代码，从nginx官网下载的代码是源nginx代码  nginx.org</span><br><span class="line">[root@tao_120 opt]# wget https://nginx.org/download/nginx-1.21.3.tar.gz</span><br><span class="line"></span><br><span class="line">#还可以获取淘宝nginx代码    http://tengine.taobao.org/download.html    tengine</span><br><span class="line">[root@tao_120 opt]# wget http://tengine.taobao.org/download/tengine-2.3.3.tar.gz</span><br><span class="line"></span><br><span class="line">2.解压下载好的nginx </span><br><span class="line">[root@tao_120 opt]# tar -zxf tengine-2.3.3.tar.gz </span><br><span class="line"></span><br><span class="line">3.解压缩nginx源代码后，进入源代码的目录，准备开始编译安装</span><br><span class="line">进入源代码目录后，查看目录下有哪些内容</span><br><span class="line">[root@tao_120 opt]# ll tengine-2.3.3</span><br><span class="line">总用量 388</span><br><span class="line">-rw-rw-r--  1 root root    931 3月  29 15:19 AUTHORS.te</span><br><span class="line">drwxrwxr-x  6 root root   4096 3月  29 15:19 auto#检测系统模块依赖信息</span><br><span class="line">-rw-rw-r--  1 root root 302927 3月  29 15:19 CHANGES#存放nginx的变化记录日志</span><br><span class="line">-rw-rw-r--  1 root root  27289 3月  29 15:19 CHANGES.cn</span><br><span class="line">-rw-rw-r--  1 root root  34831 3月  29 15:19 CHANGES.te</span><br><span class="line">drwxrwxr-x  2 root root    184 3月  29 15:19 conf#存放nginx主配置文件的目录</span><br><span class="line">-rwxrwxr-x  1 root root   2502 3月  29 15:19 configure#可执行的脚本，用于释放编译文件的定制脚本</span><br><span class="line">drwxrwxr-x  4 root root    109 3月  29 15:19 contrib#提供了vim插件，让配置文件颜色区分，更友好</span><br><span class="line">drwxrwxr-x  4 root root     67 3月  29 15:19 docs</span><br><span class="line">drwxrwxr-x  2 root root     40 3月  29 15:19 html#存放了标准的html页面文件</span><br><span class="line">-rw-rw-r--  1 root root   1715 3月  29 15:19 LICENSE</span><br><span class="line">drwxrwxr-x  2 root root     21 3月  29 15:19 man</span><br><span class="line">drwxrwxr-x 26 root root   4096 3月  29 15:19 modules</span><br><span class="line">drwxrwxr-x  3 root root     20 3月  29 15:19 packages</span><br><span class="line">-rw-rw-r--  1 root root   3450 3月  29 15:19 README.markdown</span><br><span class="line">drwxrwxr-x 10 root root    103 3月  29 15:19 src#存放量nginx源代码目录</span><br><span class="line">drwxrwxr-x  4 root root     43 3月  29 15:19 tests</span><br><span class="line">-rw-rw-r--  1 root root     43 3月  29 15:19 THANKS.te</span><br><span class="line"></span><br><span class="line">3.1拷贝nginx的配置文件语法高亮，发给vim的插件目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.开始准备编译三部曲</span><br><span class="line">第一曲：进入软件源代码目录，执行编译脚本文件，如指定安装路径，以及开启额外功能等</span><br><span class="line">首先，查看编译脚本的信息</span><br><span class="line">[root@tao_120 tengine-2.3.3]# ./configure  --help#查看编译帮助信息</span><br><span class="line">  --help                             print this message</span><br><span class="line">  --prefix=PATH                      set installation prefix     #设置安装前缀（指定安装路径）</span><br><span class="line">  --sbin-path=PATH                   set nginx binary pathname#设置nginx二进制路径名</span><br><span class="line">  --modules-path=PATH                set modules path#设置模块路径</span><br><span class="line">  --conf-path=PATH                   set nginx.conf pathname#设置nginx.conf路径名</span><br><span class="line">  --error-log-path=PATH              set error log pathname#设置错误日志路径名</span><br><span class="line">  --pid-path=PATH                    set nginx.pid pathname#nginx.pid路径名</span><br><span class="line">  --lock-path=PATH                   set nginx.lock pathname      #nginx.lock 路径名</span><br><span class="line">#开始执行编译文件，释放makefile等信息</span><br><span class="line">./configure --prefix=/home/Learn_Nginx/nginx/ --with-http_ssl_module  --with-http_flv_module --with-http_gzip_static_module --with-http_stub_status_module  --with-threads  --with-file-aio</span><br><span class="line"></span><br><span class="line">第二曲：（直接开始下一步安装）输入make指令    #首次编译安装，生成Nginx的可执行命令   make install</span><br><span class="line">第三曲：（如同点击开始安装）</span><br><span class="line"></span><br><span class="line">5.查看安装后的nginx目录</span><br><span class="line">[root@tao_120 opt]# ll nginx/</span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x 2 root root 333 9月  13 10:43 conf#存放nginx的配置文件，如nginx.conf</span><br><span class="line">drwxr-xr-x 2 root root  40 9月  13 10:43 html#存放nginx的网页根目录，存放站点的静态文件数据</span><br><span class="line">drwxr-xr-x 2 root root   6 9月  13 10:43 logs#存放nginx的目录日志</span><br><span class="line">drwxr-xr-x 2 root root  19 9月  13 10:43 sbin#存放该软件的可执行命令</span><br><span class="line"></span><br><span class="line">6.若是直接执行nginx命令，莫热死你hi代表启动nginx进程</span><br><span class="line">[root@tao_120 ~]# nginx</span><br><span class="line">-bash: nginx: 未找到命令</span><br><span class="line"></span><br><span class="line">#出现以上问题，因为没有配置PATH变量</span><br><span class="line">配置PATH变量，把nginx的sbin目录加入到PATH当中</span><br><span class="line">编写一个nginx的专属环境变量，创建一个脚本文件</span><br><span class="line">[root@tao_120 ~]# cat /etc/profile.d/nginx.sh </span><br><span class="line">export PATH=&quot;$PATH:/opt/nginx/sbin/&quot;</span><br><span class="line"></span><br><span class="line">7.退出当前会话，重新登陆，系统默认加载/etc/profile.d下的所有环境变量文件</span><br><span class="line">exit</span><br><span class="line">#退出会话后重新登陆，查看nginx的环境变量是否添加进去了</span><br><span class="line">[root@tao_120 ~]# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/nginx/sbin/:/root/bin</span><br><span class="line"></span><br><span class="line">8.此时可以快捷使用nginx的各种指令了   -s参数，指的是给nginx进程发送某种信号</span><br><span class="line">nginx #首次直接输入nginx，表示启动该进程，如果你再次启动则报错，因为80端口已经被nginx所占用了</span><br><span class="line">nginx -s  stop  #表示停止该进程    </span><br><span class="line">nginx -s reload  #表示重新加载配置文件，过程中nginx不会停止服务</span><br></pre></td></tr></table></figure><h2 id="nginx配置文件语法"><a href="#nginx配置文件语法" class="headerlink" title="nginx配置文件语法"></a>nginx配置文件语法</h2><ul><li>nginx.conf由指令与指令块构成</li><li>每行语句由分号结束，指令和参数之间由空格分隔</li><li>指令块可以大括号{}组织多条指令块</li><li>配置文件中#号添加注释信息</li><li>支持<code>$变量</code>使用变量</li><li>支持include语句，组合多个配置文件</li><li>部分指令支持正则表达式，如rewir</li></ul><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200211094210904.png" alt="image-20200211094210904"></p><h3 id="nginx-conf指令注释"><a href="#nginx-conf指令注释" class="headerlink" title="nginx.conf指令注释"></a>nginx.conf指令注释</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line">######Nginx配置文件nginx.conf中文详解#####</span><br><span class="line"></span><br><span class="line">#定义Nginx运行的用户和用户组</span><br><span class="line">user www www;</span><br><span class="line"></span><br><span class="line">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class="line">worker_processes 8;</span><br><span class="line"></span><br><span class="line">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class="line">error_log /usr/local/nginx/logs/error.log info;</span><br><span class="line"></span><br><span class="line">#进程pid文件</span><br><span class="line">pid /usr/local/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#指定进程可以打开的最大描述符：数目</span><br><span class="line">#工作模式与连接数上限</span><br><span class="line">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class="line">#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span><br><span class="line">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span><br><span class="line">    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">    #补充说明：</span><br><span class="line">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><br><span class="line">    #A）标准事件模型</span><br><span class="line">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class="line">    #B）高效事件模型</span><br><span class="line">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class="line">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class="line">    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class="line">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br><span class="line">    use epoll;</span><br><span class="line"></span><br><span class="line">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class="line">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span><br><span class="line">    worker_connections 65535;</span><br><span class="line"></span><br><span class="line">    #keepalive超时时间。</span><br><span class="line">    keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><br><span class="line">    #分页大小可以用命令getconf PAGESIZE 取得。</span><br><span class="line">    #[root@web001 ~]# getconf PAGESIZE</span><br><span class="line">    #4096</span><br><span class="line">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><br><span class="line">    client_header_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class="line">    open_file_cache max=65535 inactive=60s;</span><br><span class="line"></span><br><span class="line">    #这个是指多长时间检查一次缓存的有效信息。</span><br><span class="line">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><br><span class="line">    open_file_cache_valid 80s;</span><br><span class="line"></span><br><span class="line">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class="line">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><br><span class="line">    open_file_cache_min_uses 1;</span><br><span class="line"></span><br><span class="line">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span><br><span class="line">    open_file_cache_errors on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    #文件扩展名与文件类型映射表</span><br><span class="line">    include mime.types;</span><br><span class="line"></span><br><span class="line">    #默认文件类型</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #默认编码</span><br><span class="line">    #charset utf-8;</span><br><span class="line"></span><br><span class="line">    #服务器名字的hash表大小</span><br><span class="line">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br><span class="line">    server_names_hash_bucket_size 128;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class="line">    client_header_buffer_size 32k;</span><br><span class="line"></span><br><span class="line">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br><span class="line">    large_client_header_buffers 4 64k;</span><br><span class="line"></span><br><span class="line">    #设定通过nginx上传文件的大小</span><br><span class="line">    client_max_body_size 8m;</span><br><span class="line"></span><br><span class="line">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="line">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br><span class="line">    sendfile on;</span><br><span class="line"></span><br><span class="line">    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line">    autoindex on;</span><br><span class="line"></span><br><span class="line">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class="line">    tcp_nopush on;</span><br><span class="line"></span><br><span class="line">    tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">    #长连接超时时间，单位是秒</span><br><span class="line">    keepalive_timeout 120;</span><br><span class="line"></span><br><span class="line">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class="line">    fastcgi_connect_timeout 300;</span><br><span class="line">    fastcgi_send_timeout 300;</span><br><span class="line">    fastcgi_read_timeout 300;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">    #gzip模块设置</span><br><span class="line">    gzip on; #开启gzip压缩输出</span><br><span class="line">    gzip_min_length 1k;    #最小压缩文件大小</span><br><span class="line">    gzip_buffers 4 16k;    #压缩缓冲区</span><br><span class="line">    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    gzip_comp_level 2;    #压缩等级</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    #开启限制IP连接数的时候需要使用</span><br><span class="line">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #负载均衡配置</span><br><span class="line">    upstream pythonav.cn &#123;</span><br><span class="line"></span><br><span class="line">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class="line">        server 192.168.80.121:80 weight=3;</span><br><span class="line">        server 192.168.80.122:80 weight=2;</span><br><span class="line">        server 192.168.80.123:80 weight=3;</span><br><span class="line"></span><br><span class="line">        #nginx的upstream目前支持4种方式的分配</span><br><span class="line">        #1、轮询（默认）</span><br><span class="line">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line">        #2、weight</span><br><span class="line">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class="line">        #例如：</span><br><span class="line">        #upstream bakend &#123;</span><br><span class="line">        #    server 192.168.0.14 weight=10;</span><br><span class="line">        #    server 192.168.0.15 weight=10;</span><br><span class="line">        #&#125;</span><br><span class="line">        #2、ip_hash</span><br><span class="line">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="line">        #例如：</span><br><span class="line">        #upstream bakend &#123;</span><br><span class="line">        #    ip_hash;</span><br><span class="line">        #    server 192.168.0.14:88;</span><br><span class="line">        #    server 192.168.0.15:80;</span><br><span class="line">        #&#125;</span><br><span class="line">        #3、fair（第三方）</span><br><span class="line">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class="line">        #upstream backend &#123;</span><br><span class="line">        #    server server1;</span><br><span class="line">        #    server server2;</span><br><span class="line">        #    fair;</span><br><span class="line">        #&#125;</span><br><span class="line">        #4、url_hash（第三方）</span><br><span class="line">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class="line">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class="line">        #upstream backend &#123;</span><br><span class="line">        #    server squid1:3128;</span><br><span class="line">        #    server squid2:3128;</span><br><span class="line">        #    hash $request_uri;</span><br><span class="line">        #    hash_method crc32;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        #tips:</span><br><span class="line">        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span><br><span class="line">        #    ip_hash;</span><br><span class="line">        #    server 127.0.0.1:9090 down;</span><br><span class="line">        #    server 127.0.0.1:8080 weight=2;</span><br><span class="line">        #    server 127.0.0.1:6060;</span><br><span class="line">        #    server 127.0.0.1:7070 backup;</span><br><span class="line">        #&#125;</span><br><span class="line">        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><br><span class="line"></span><br><span class="line">        #每个设备的状态设置为:</span><br><span class="line">        #1.down表示单前的server暂时不参与负载</span><br><span class="line">        #2.weight为weight越大，负载的权重就越大。</span><br><span class="line">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class="line">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class="line">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class="line"></span><br><span class="line">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class="line">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class="line">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class="line">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #虚拟主机的配置</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        #监听端口</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        #域名可以有多个，用空格隔开</span><br><span class="line">        server_name www.w3cschool.cn w3cschool.cn;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root /data/www/w3cschool;</span><br><span class="line"></span><br><span class="line">        #对******进行负载均衡</span><br><span class="line">        location ~ .*.(php|php5)?$</span><br><span class="line">        &#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #图片缓存时间设置</span><br><span class="line">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 10d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #JS和CSS缓存时间设置</span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 1h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #日志格式设定</span><br><span class="line">        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class="line">        #$remote_user：用来记录客户端用户名称；</span><br><span class="line">        #$time_local： 用来记录访问时间与时区；</span><br><span class="line">        #$request： 用来记录请求的url与http协议；</span><br><span class="line">        #$status： 用来记录请求状态；成功是200，</span><br><span class="line">        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class="line">        #$http_referer：用来记录从那个页面链接访问过来的；</span><br><span class="line">        #$http_user_agent：记录客户浏览器的相关信息；</span><br><span class="line">        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br><span class="line">        log_format access &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">        &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">        &#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;;</span><br><span class="line"></span><br><span class="line">        #定义本虚拟主机的访问日志</span><br><span class="line">        access_log  /usr/local/nginx/logs/host.access.log  main;</span><br><span class="line">        access_log  /usr/local/nginx/logs/host.access.404.log  log404;</span><br><span class="line"></span><br><span class="line">        #对 &quot;/&quot; 启用反向代理</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:88;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">            #以下是一些反向代理的配置，可选。</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line"></span><br><span class="line">            #允许客户端请求的最大单文件字节数</span><br><span class="line">            client_max_body_size 10m;</span><br><span class="line"></span><br><span class="line">            #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><br><span class="line">            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><br><span class="line">            client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">            #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><br><span class="line">            proxy_intercept_errors on;</span><br><span class="line"></span><br><span class="line">            #后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="line">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">            proxy_connect_timeout 90;</span><br><span class="line"></span><br><span class="line">            #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class="line">            proxy_send_timeout 90;</span><br><span class="line"></span><br><span class="line">            #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br><span class="line">            proxy_read_timeout 90;</span><br><span class="line"></span><br><span class="line">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><br><span class="line">            proxy_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">            #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="line">            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br><span class="line">            proxy_buffers 4 32k;</span><br><span class="line"></span><br><span class="line">            #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">            proxy_busy_buffers_size 64k;</span><br><span class="line"></span><br><span class="line">            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class="line">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">            proxy_temp_file_write_size 64k;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #设定查看Nginx状态的地址</span><br><span class="line">        location /NginxStatus &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log on;</span><br><span class="line">            auth_basic &quot;NginxStatus&quot;;</span><br><span class="line">            auth_basic_user_file confpasswd;</span><br><span class="line">            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #本地动静分离反向代理配置</span><br><span class="line">        #所有jsp的页面均交由tomcat或resin处理</span><br><span class="line">        location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class="line">        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class="line">        pdf|xls|mp3|wma)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 15d; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 1h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">######Nginx配置文件nginx.conf中文详解#####</span><br><span class="line"></span><br><span class="line">nginx.conf详解</span><br></pre></td></tr></table></figure><h3 id="Nginx命令行"><a href="#Nginx命令行" class="headerlink" title="Nginx命令行"></a>Nginx命令行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.此时可以快捷使用nginx的各种指令了   -s参数，指的是给nginx进程发送某种信号</span><br><span class="line">nginx #首次直接输入nginx，表示启动该进程，如果你再次启动则报错，因为80端口已经被nginx所占用了</span><br><span class="line">nginx -s  stop  #表示停止该进程    </span><br><span class="line">nginx -s reload  #表示重新加载配置文件，过程中nginx不会停止服务</span><br><span class="line"></span><br><span class="line">2.查看nginx命令的帮助信息</span><br><span class="line">[root@tao_120 ~]# nginx -?</span><br><span class="line">Tengine version: Tengine/2.3.3</span><br><span class="line">nginx version: nginx/1.18.0</span><br><span class="line">Usage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]</span><br><span class="line">参数 </span><br><span class="line">Options:</span><br><span class="line">  -?,-h         : this help#输出nginx的帮助信息</span><br><span class="line">  -v            : show version and exit#列出nginx的版本号</span><br><span class="line">  -V            : show version and configure options then exit#列出nginx的版本和编译参数信息</span><br><span class="line">  -t            : test configuration and exit#检查一下nginx配置文件语法是否正确</span><br><span class="line">  -T            : test configuration, dump it and exit#同上，是检查配置，并且输出配置信息</span><br><span class="line">  -q         : suppress non-error messages during configuration testing#在检测配置文件期间屏蔽非常错误信息</span><br><span class="line"> # -s 给nginx住进程发送一个信号，分别有，stop停止运行，  quit，优雅的停止， reload重读配置文件，reopen 重新记录nginx日志 </span><br><span class="line">  -s signal     : send signal to a master process: stop, quit, reopen, reload</span><br><span class="line">  -p prefix     : set prefix path (default: /opt/nginx/)#指定nginx目录前缀</span><br><span class="line">  -c filename   : set configuration file (default: conf/nginx.conf) #指定默认配置文件</span><br><span class="line">  -g directives : set global directives out of configuration file   #覆盖设置的一些默认参数</span><br><span class="line"></span><br><span class="line">  -m            : show all modules and exit#列出nginx所有支持的模块</span><br><span class="line">  -l            : show all directives and exit#列出nginx目录的相关信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="nginx命令行案例"><a href="#nginx命令行案例" class="headerlink" title="nginx命令行案例"></a>nginx命令行案例</h2><p>在nginx正在运行时，如实修改了nginx.conf或是新增了一些功能配置，让其生效，可能需要重启整个nginx进程、</p><p>但是你不能保证某个时间段没有用户在访问nginx，重启会断开用户的连接，造成莫名的故障</p><p>因此nginx提供了reload重载功能，不停止服务，更新配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.检查当前的nginx进程</span><br><span class="line">ps -ef | grep nginx</span><br><span class="line"></span><br><span class="line">2.修改nginx.conf配置参数</span><br><span class="line"></span><br><span class="line">3.重新加载nginx配置</span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Nginx-master信号传递"><a href="#Nginx-master信号传递" class="headerlink" title="Nginx-master信号传递"></a>Nginx-master信号传递</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.master不处理请求，而是分配worker进程，负责重启，热部署，重载等功能。</span><br><span class="line">2.master根据worker_processes 定义开始的workers数量</span><br><span class="line">3.worker运行后，master处于挂起状态，等待信号</span><br><span class="line">4.可以发送kill，或者nginx -s 参数发出信号</span><br></pre></td></tr></table></figure><h4 id="信号集"><a href="#信号集" class="headerlink" title="信号集"></a>信号集</h4><table><thead><tr><th align="left">nginx -s 对应参数</th><th align="center">信号</th><th align="left">含义</th><th align="left">English</th></tr></thead><tbody><tr><td align="left">stop</td><td align="center">TERM</td><td align="left">强制关闭整个服务</td><td align="left">Shut down quickly.</td></tr><tr><td align="left">null</td><td align="center">INT</td><td align="left">强制关闭整个服务</td><td align="left">Shut down quickly.</td></tr><tr><td align="left">quit</td><td align="center">QUIT</td><td align="left">优雅地关闭整个服务</td><td align="left">Shut down gracefully.</td></tr><tr><td align="left">reopen</td><td align="center">USR1</td><td align="left">重新打开日志记录</td><td align="left">Reopen log files.</td></tr><tr><td align="left">reload</td><td align="center">HUP</td><td align="left">重新读取配置文件,并且优雅地退出老的worker</td><td align="left">Reload configuration, start the new worker process with a new configuration, and gracefully shut down old worker processes.</td></tr><tr><td align="left">null</td><td align="center">USR2</td><td align="left">平滑升级到新版本</td><td align="left">Upgrade the nginx executable on the fly.</td></tr><tr><td align="left">null</td><td align="center">WINCH</td><td align="left">优雅地关闭worker(在热更新的时候必用)</td><td align="left">Shut down worker processes gracefully.</td></tr></tbody></table><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>nginx作为一个优秀的反向代理服务器，同时具备高可用的特性，nginx也支持热部署。</p><p>热部署指的就是<code>在重启或关闭进程的情况下，新应用直接替换掉就得应用</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">热部署的大致流程</span><br><span class="line">1.备份就得二进制文件</span><br><span class="line">2.编译安装新的二进制文件，覆盖就得二进制文件</span><br><span class="line">3.发送USR2信号给旧的master进程</span><br><span class="line">4.发送WINCH信号给旧的master进程</span><br><span class="line">5.发送QUIT信号给旧master进程</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">环境准备：</span><br><span class="line">1.旧的nginx版本   nginx version: nginx/1.18.0</span><br><span class="line"></span><br><span class="line">2.新的nginx版本   </span><br></pre></td></tr></table></figure><p>【nginx热部署】</p><p>nginx工作模式是master-worker（包工头-工人）</p><p>刚才所说的nginx支持<code>reload重载</code>仅仅是nginx的master进程，检查配置文件语法是否正确，错则返回错误、正确也<code>不会改变</code>已经建立连接的worker，只得等待worker处理完毕请求之后，<code>杀死旧配置文件的worker，启动新配置文件的worker</code>。</p><p>但是Nginx这里提提供了热部署功能，就是在<code>不影响用户体验下，进行软件版本升级</code>，也就是不主动杀死worker，替换软件的二进制文件。</p><h3 id="热部署的坑"><a href="#热部署的坑" class="headerlink" title="热部署的坑"></a>热部署的坑</h3><p>​    如果出现发送 kill -USR2信号后，未出现新的master进程</p><p>​    是因为：</p><p>​    旧的nginx必须用绝对路径启动，然后再发送kill -USR2信号</p><p>​    具体解释看图</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20201003140035964.png" alt="image-20201003140035964"></p><h3 id="热部署的具体操作"><a href="#热部署的具体操作" class="headerlink" title="热部署的具体操作"></a>热部署的具体操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">1.备份旧版本的nginx二进制文件</span><br><span class="line">[root@tao_120 sbin]# mv nginx  nginx.230</span><br><span class="line">[root@tao_120 sbin]# ls</span><br><span class="line">nginx.230</span><br><span class="line">[root@tao_120 opt]# tar -zxf tengine-2.3.3.tar.gz </span><br><span class="line">[root@tao_120 opt]# ls</span><br><span class="line">nginx  tengine-2.3.0  tengine-2.3.0.tar.gz  tengine-2.3.3  tengine-2.3.3.tar.gz</span><br><span class="line"></span><br><span class="line">2.检查旧版本nginx编译参数</span><br><span class="line">[root@tao_120 sbin]# nginx -V</span><br><span class="line">Tengine version: Tengine/2.3.0 (nginx/1.15.9)</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/opt/nginx --with-http_ssl_module --with-http_flv_module --with-http_gzip_static_module --with-http_stub_status_module --with-threads --with-file-aio</span><br><span class="line"></span><br><span class="line">3.编译安装新的版本nginx</span><br><span class="line">#下载新nginx源码</span><br><span class="line">[root@chaogelinux opt]# wget http://nginx.org/download/nginx-1.17.8.tar.gz</span><br><span class="line"></span><br><span class="line">#编译安装新版本nginx</span><br><span class="line">[root@chaogelinux opt]# tar -zxf nginx-1.17.8.tar.gz</span><br><span class="line"></span><br><span class="line">#开始编译</span><br><span class="line">[root@tao_120 tengine-2.3.3]# ./configure --prefix=/opt/nginx --with-http_ssl_module --with-http_flv_module --with-http_gzip_static_module --with-http_stub_status_module --with-threads --with-file-aio</span><br><span class="line">#编译安装</span><br><span class="line">[root@tao_120 tengine-2.3.3]# make &amp;&amp; make install  </span><br><span class="line"></span><br><span class="line">4.此时发现已存在两个版本nginx程序</span><br><span class="line">[root@tao_120 logs]# ls ../sbin/</span><br><span class="line">nginx  nginx.230</span><br><span class="line"></span><br><span class="line">5.此时发送一个USR2信号给旧的master process，作用使得nginx旧的版本停止请求用户请求，并且切换为新的nginx版本</span><br><span class="line">#执行以下命令，给旧的nginx发送信号</span><br><span class="line">[root@tao_120 logs]# kill -USR2 `cat nginx.pid`</span><br><span class="line"></span><br><span class="line">当执行完上述的命令以后，nginx-master旧的，首先会重命名它的pid文件，然后添加上 .oldbin后缀，然后会在启动一个新的master主进程，以及worker，使用的是新版本的nginx二进制命令，此时新的nginx就能够自动的接受用户发来的请求，过度到新的nginx-worker工作进度上</span><br><span class="line">因此实现了一个平滑的过度。</span><br><span class="line"></span><br><span class="line">6.此时检查一下新的nginx进程状态</span><br><span class="line">[root@tao_120 logs]# ps -ef |grep nginx</span><br><span class="line">root      28416      1  0 20:46 ?        00:00:00 nginx: master process nginx</span><br><span class="line">nobody    28417  28416  0 20:46 ?        00:00:00 nginx: worker process</span><br><span class="line">root      31286  28416  0 20:51 ?        00:00:00 nginx: master process nginx</span><br><span class="line">nobody    31287  31286  0 20:51 ?        00:00:00 nginx: worker process</span><br><span class="line">root      31289  23106  0 20:51 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line"></span><br><span class="line">#检查一下新的pid文件信息</span><br><span class="line">[root@tao_120 logs]# ls</span><br><span class="line">access.log  error.log  nginx.pid  nginx.pid.oldbin</span><br><span class="line"></span><br><span class="line">7.此时发送WINCH信号，给旧的master进程，让旧的master进程优雅的退出</span><br><span class="line">[root@tao_120 logs]# kill -WINCH `cat nginx.pid.oldbin`</span><br><span class="line">[root@tao_120 logs]# ps -ef |grep nginx</span><br><span class="line">root      28416      1  0 20:46 ?        00:00:00 nginx: master process nginx</span><br><span class="line">root      31286  28416  0 20:51 ?        00:00:00 nginx: master process nginx</span><br><span class="line">nobody    31287  31286  0 20:51 ?        00:00:00 nginx: worker process</span><br><span class="line">root      31294  23106  0 20:58 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line"></span><br><span class="line">8.此时你可以杀掉残留的最后旧的master进程</span><br><span class="line">[root@tao_120 logs]# kill -9 28416</span><br><span class="line">[root@tao_120 logs]# ps -ef |grep nginx</span><br><span class="line">root      31286      1  0 20:51 ?        00:00:00 nginx: master process nginx</span><br><span class="line">nobody    31287  31286  0 20:51 ?        00:00:00 nginx: worker process</span><br><span class="line">root      31322  23106  0 21:07 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Nginx日志切割"><a href="#Nginx日志切割" class="headerlink" title="Nginx日志切割"></a>Nginx日志切割</h2><p>日志切割是现在很常见的操作，能够控制单个日志文件的大小，便于对日志进行管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1.针对nginx的游客日志进行切割</span><br><span class="line">[root@tao_120 logs]# ll -h</span><br><span class="line">总用量 16K</span><br><span class="line">-rw-r--r-- 1 root root 6.5K 9月  15 21:48 access.log</span><br><span class="line">-rw-r--r-- 1 root root  884 9月  15 21:41 error.log</span><br><span class="line">-rw-r--r-- 1 root root    5 9月  15 21:35 nginx.pid</span><br><span class="line"></span><br><span class="line">2.给当前日志文件重命名，注意使用mv命令</span><br><span class="line">[root@tao_120 logs]# mv access.log   &quot;access.log_$(date +&quot;%Y-%m-%d&quot;)&quot;</span><br><span class="line">[root@tao_120 logs]# ls</span><br><span class="line">access.log_2021-09-16  error.log  nginx.pid</span><br><span class="line"></span><br><span class="line">3.发送信号给nginx主进程，给他发送一个重新打开的信号，让nginx生成新的日志文件</span><br><span class="line">[root@tao_120 sbin]# kill -USR1  `cat /opt/nginx/logs/nginx.pid`  #等同于 nginx -s  reopen  命令</span><br><span class="line">[root@tao_120 sbin]# ls ../logs/</span><br><span class="line">access.log  access.log_2021-09-16  error.log  nginx.pid</span><br><span class="line"></span><br><span class="line">4.注意在以上的nginx重命名日志切割链，不要着急立即对文件修改，而是要注意等待几秒钟，因为nginx的工作模式特点，master下发指令给worker去干活，刚发指令的时候只是标记，当业务量很大的时候，这个修改操作可能会有点慢。</span><br><span class="line"></span><br><span class="line">5.在生产环境下，日志切割主要是以定时任务的形式来操作</span><br><span class="line">编写一个定时日志切割的脚本</span><br><span class="line">#!/bin/bash</span><br><span class="line">#脚本写入crontab，每天0点执行一次，这是nginx日志切割脚本文件</span><br><span class="line"></span><br><span class="line">logs_path=&quot;/opt/nginx/logs/&quot;      #这是定义一个变量logs_path就相当于这个路径了，用$&#123;logs_path&#125;表示</span><br><span class="line"></span><br><span class="line">mkdir -p $&#123;logs_path&#125;$(date -d &quot;yesterday&quot; +&quot;%Y&quot;)/$(date -d &quot;yesterday&quot; +&quot;%m&quot;)  #-d显示指定的时间，而不是当前</span><br><span class="line">mv $&#123;logs_path&#125;access.log  $(date -d &quot;yesterday&quot; +&quot;%Y&quot;)/$(date -d &quot;yesterday&quot; +&quot;%m&quot;)/access_$(date -d &quot;yesterday&quot; +&quot;%Y-%m-%d&quot;)</span><br><span class="line">#可以用nginx -s  reopen  来代替以下命令</span><br><span class="line">kill -USR1  `cat $&#123;logs_path&#125;nginx.pid`  #相当于kill -USR1  `cat /opt/nginx/logs/nginx.pid`</span><br><span class="line"></span><br><span class="line">6.写入到crontab定时文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Nginx静态资源站点"><a href="#Nginx静态资源站点" class="headerlink" title="Nginx静态资源站点"></a>Nginx静态资源站点</h1><h2 id="Nginx虚拟主机"><a href="#Nginx虚拟主机" class="headerlink" title="Nginx虚拟主机"></a>Nginx虚拟主机</h2><p>虚拟主机指的就是一个独立的站点，具有独立的域名，有完整的www服务，例如网站、FTP、邮件等。</p><p>Nginx支持多虚拟主机，在一台机器上可以运行完全独立的多个站点。</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200211162644884.png" alt="image-20200211162644884"></p><p>一些草根流量站长，常会搭建个人站点进行资源分享交流，并且可能有多个不同业务的站点，如果每台服务器只运行一个网站，那么将造成资源浪费，成本浪费。</p><p>利用虚拟主机的功能，就不用为了运行一个网站而单独配置一个Nginx服务器，或是单独再运行一组Nginx进程。</p><p>虚拟主机可以在一台服务器，同一个Nginx进程上运行多个网站。</p><p>nginx.conf主配置文件中，最简单的一段虚拟主机配置如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">            #监听端口</span><br><span class="line">            listen 80;</span><br><span class="line">            #填写域名匹配</span><br><span class="line">            server_name  localhost;</span><br><span class="line">            #访问日志</span><br><span class="line">            access_log  logs/host.access.log  main;</span><br><span class="line">            #url匹配</span><br><span class="line">            location / &#123;</span><br><span class="line">                        root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="搭建一个静态资源网站"><a href="#搭建一个静态资源网站" class="headerlink" title="搭建一个静态资源网站"></a>搭建一个静态资源网站</h3><p>修改nginx.conf，自上而下找到第一个server{}指令块，修改如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">准备好资源文件目录，内容自定义</span><br><span class="line">[root@chaogelinux website]# pwd</span><br><span class="line">/website</span><br><span class="line">[root@chaogelinux website]# ls</span><br><span class="line">index.html  pic</span><br><span class="line"></span><br><span class="line">1.修改nginx.conf</span><br><span class="line">server &#123;</span><br><span class="line">          listen       80;</span><br><span class="line">          server_name  localhost;</span><br><span class="line">          #默认编码</span><br><span class="line">          charset utf-8;</span><br><span class="line">          access_log  logs/host.access.log  main;</span><br><span class="line">        location / &#123;</span><br><span class="line">              #定义虚拟主机的资源目录,</span><br><span class="line">            root   /website/;</span><br><span class="line">            #定义首页文件的名字</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">2.重载nginx配置文件</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>访问网站首页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.16.61:80/index.html</span><br><span class="line">简写</span><br><span class="line">http://123.206.16.61/</span><br></pre></td></tr></table></figure><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200211180803985.png" alt="image-20200211180803985"></p><h3 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h3><p>nginx支持gzip最资源压缩传输，经过gzip亚索后的页面大小可以为原本的30%甚至更小，用户访问万展的体验会好很多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1.首先准备好nginx服务器，以及配置好虚拟主机站点，在准备一些静态数据</span><br><span class="line">[root@tao_120 html]# ll -h</span><br><span class="line">总用量 26M</span><br><span class="line">-rw-r--r-- 1 root root 496 9月  14 10:11 50x.html</span><br><span class="line">-rw-r--r-- 1 root root 26M 9月  17 15:09 chaoge.test</span><br><span class="line">-rw-r--r-- 1 root root 98K 9月  16 18:12 index.html</span><br><span class="line">-rw-r--r-- 1 root root 554 9月  15 21:42 index.html.bak</span><br><span class="line"></span><br><span class="line">2.此时在没有开启gzip压缩的情况下，访问该txt文件，发现加载速度很慢</span><br><span class="line"></span><br><span class="line">3.开启nginx的gzip功能，只需要在http｛｝配置中，加入如下参数</span><br><span class="line">nginx.conf开启gzip压缩功能，添加如下语句，针对静态资源压缩</span><br><span class="line"></span><br><span class="line">        gzip on;  #on，表示开启gzip</span><br><span class="line">        gzip_http_version 1.1;#表示http gzip版本</span><br><span class="line">        gzip_comp_level 4;#表示压缩等级</span><br><span class="line">        gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;#压缩类型</span><br><span class="line"></span><br><span class="line">4.检查一下修改是否正确，确认无误后，重新加载nginx配置文件</span><br><span class="line">[root@tao_120 html]# nginx -t</span><br><span class="line">nginx: the configuration file /opt/nginx//conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /opt/nginx//conf/nginx.conf test is successful</span><br><span class="line"></span><br><span class="line">[root@tao_120 html]# nginx -s reload  #重新加载</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200211191521572.png" alt="image-20200211191521572" style="zoom:50%;" /><p>开启了gzip压缩后，整体的传输资源大小，以及相应速度，都大幅度提高了</p><h2 id="基于IP多虚拟主机"><a href="#基于IP多虚拟主机" class="headerlink" title="基于IP多虚拟主机"></a>基于IP多虚拟主机</h2><p>Linux操作系统都能够支持给网卡绑定多个IP地址，可以使得一块网卡上运行多个基于IP的虚拟主机。</p><p>环境准备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">添加IP别名</span><br><span class="line">[root@tao_120 html]# ifconfig ens33:1 inet 192.168.31.160 netmask 255.255.255.0 broadcast 192.168.31.255</span><br><span class="line">[root@tao_120 html]# ifconfig ens33:2 inet 192.168.31.161 netmask 255.255.255.0 broadcast 192.168.31.255</span><br><span class="line"></span><br><span class="line">#此时机器中有三个IP，确保都可以通信即可</span><br><span class="line">[root@tao_120 html]# ifconfig |grep 192</span><br><span class="line">        inet 192.168.31.120  netmask 255.255.255.0  broadcast 192.168.31.255</span><br><span class="line">        inet 192.168.31.160  netmask 255.255.255.0  broadcast 192.168.31.255</span><br><span class="line">        inet 192.168.31.161  netmask 255.255.255.0  broadcast 192.168.31.255</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加nginx的配置，添加多个server｛｝标签，让nginx支持基于IP的多虚拟主机，返回多个站点内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">1.给nginx添加inlucade包含语法，让其他目录在的配置文件参数，导入到nginx.conf中，这样的写法，能够让nginx每一个配置文件，看起来更简洁，更清晰</span><br><span class="line"></span><br><span class="line">修改nginx.conf ，在http｛｝标签中的最后一行，添加如下参数，extra文件夹和conf文件夹为相对</span><br><span class="line">include extra/*.conf;</span><br><span class="line"></span><br><span class="line">2.在extra目录下，添加多个基于IP的虚拟主机配置</span><br><span class="line"></span><br><span class="line">可以像如下规划的形式，来编写nginx.conf配置文件</span><br><span class="line">第一个基于IP的虚拟主机,下载conf/nginx.conf   部分代码如下，当192.168.31.120请求到来，让nginx去/opt/nginx/html问价下查找</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;#监听端口</span><br><span class="line">        server_name  -;#域名</span><br><span class="line">        charset utf-8;#编码类型，现在是中文</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;#定义网页根目录的，这个html是以nginx安装目录的路径为相对</span><br><span class="line">        #index关键词，定义nginx的首页文件名字，默认找index.html文件</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">3.添加192.168.31.160 虚拟主机的配置</span><br><span class="line">[root@tao_120 conf]# vim extra/160.html</span><br><span class="line">sever &#123;</span><br><span class="line">listen 192.168.31.160:80;#端口上绑定上IP地址，防止找不到</span><br><span class="line">sever_name _;</span><br><span class="line">charset usf-8;</span><br><span class="line">location / &#123;</span><br><span class="line">root /opt/nginx/conf/extra/160;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">4.添加192.168.31.161 虚拟主机配置</span><br><span class="line">[root@tao_120 extra]# cat 161.conf </span><br><span class="line">server &#123;</span><br><span class="line">listen 192.168.31.161:80;</span><br><span class="line">server_name _;</span><br><span class="line">charset usf-8;</span><br><span class="line">location / &#123;</span><br><span class="line">root /opt/nginx/html/161;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">5.检查nginx语法是否正确</span><br><span class="line">[root@tao_120 extra]# nginx -t</span><br><span class="line">nginx: the configuration file /opt/nginx//conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /opt/nginx//conf/nginx.conf test is successful</span><br><span class="line"></span><br><span class="line">6.重新记载nginx配置文件，改了较多的nginx配置，在允许重启nginx的情况下，重启一下nginx服务，防止出现nginx有缓存情况，发现页面无变化。</span><br><span class="line">[root@tao_120 extra]# nginx -s reload</span><br><span class="line"></span><br><span class="line">7.准备3个基于IP的站点内容</span><br><span class="line">[root@tao_120 conf]# mkdir -p ../html/&#123;160,161&#125;  120配置在html里面</span><br><span class="line">[root@tao_120 html]#  echo &quot;hello,I&#x27;m 160,and you?&quot; &gt; 160/index.html</span><br><span class="line">[root@tao_120 html]#  echo &quot;hello,I&#x27;m 161,and you?&quot; &gt; 161/index.html</span><br><span class="line">root@tao_120 html]#  echo &quot;hello,I&#x27;m 120,and you?&quot; &gt; index.html</span><br><span class="line"></span><br><span class="line">8.在linux本地测试多IP的虚拟主机</span><br><span class="line">[root@tao_120 extra]# curl 192.168.31.120</span><br><span class="line">hello,I&#x27;m 120,and you?</span><br><span class="line">[root@tao_120 extra]# curl 192.168.31.160</span><br><span class="line">hello,I&#x27;m 160,and you?</span><br><span class="line">[root@tao_120 extra]# curl 192.168.31.161</span><br><span class="line">hello,I&#x27;m 161,and you?</span><br><span class="line"></span><br><span class="line">9.在客户端浏览器查看效果</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Nginx基于多域名的虚拟主机配置"><a href="#Nginx基于多域名的虚拟主机配置" class="headerlink" title="Nginx基于多域名的虚拟主机配置"></a>Nginx基于多域名的虚拟主机配置</h2><p>基于打过IP的虚拟主机，用的不是很多，还可能造成IP不足的情况，一般如果没有特殊需求，用的更多，且更方便的是基于多域名的虚拟主机</p><p>前提使用条件，要么配置DNS服务器，将你想用的域名解析到对应的ip</p><p>使用本地的host文件，进行本地测试访问</p><p>多域名的配置结合nginx，就实现了多虚拟主机的访问，解决了可能IP不足的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">1.环境准备，现在你的客户端本地，修改hosts文件信息</span><br><span class="line">macos  /etc/hosts  文件里面</span><br><span class="line">windows   C:\Windows\System32\drivers\etc\hosts文件</span><br><span class="line"></span><br><span class="line">2.修改hosts文件，添加如下信息，注意这里是客户端本地添加的域名</span><br><span class="line">192.168.31.120  www.nginx_120.cc</span><br><span class="line">192.168.31.120www.nginx_160.cc</span><br><span class="line">192.168.31.120www.nginx_161.cc</span><br><span class="line"></span><br><span class="line">3.修改服务福断的nginx配置</span><br><span class="line">第一个域名的虚拟机</span><br><span class="line">server&#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name www.nginx_120.cc;</span><br><span class="line">charset usf-8;</span><br><span class="line">location / &#123;</span><br><span class="line">root  html;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">第二个域名的虚拟机</span><br><span class="line">server&#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name www.nginx_160.cc;</span><br><span class="line">charset usf-8;</span><br><span class="line">location / &#123;</span><br><span class="line">root  /opt/nginx/html/extra/nginx_160;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">第三个域名的虚拟机</span><br><span class="line">server&#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name www.nginx_161.cc;</span><br><span class="line">charset usf-8;</span><br><span class="line">location / &#123;</span><br><span class="line">root  /opt/nginx/html/extra/nginx_161;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">4.修改完配置文件之后，检查一下修改是否正确</span><br><span class="line">[root@tao_120 html]# nginx -t</span><br><span class="line">nginx: the configuration file /opt/nginx//conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /opt/nginx//conf/nginx.conf test is successful</span><br><span class="line"></span><br><span class="line">#检查出修改正确无误后，重新读取nginx配置文件</span><br><span class="line">nginx  -s  reload</span><br><span class="line"></span><br><span class="line">5.分别准备三个域名的站点资料</span><br><span class="line">[root@tao_120 html]# mkdir -p nginx_&#123;160,161&#125;</span><br><span class="line">[root@tao_120 html]# ls</span><br><span class="line">160  161  50x.html  cc.txt  index.html  index.html.bak  nginx_160  nginx_161</span><br><span class="line">[root@tao_120 html]# echo &quot;I&#x27;m nginx_160,and you ?&quot; &gt; nginx_160/index.html</span><br><span class="line">[root@tao_120 html]# echo &quot;I&#x27;m nginx_161,and you ?&quot; &gt; nginx_161/index.html</span><br><span class="line">[root@tao_120 html]# echo &quot;I&#x27;m nginx_120,and you ?&quot; &gt; index.html</span><br><span class="line"></span><br><span class="line">6.通过浏览器，访问三个域名</span><br></pre></td></tr></table></figure><h3 id="Nginx支持基于多端口的虚拟主机配置"><a href="#Nginx支持基于多端口的虚拟主机配置" class="headerlink" title="Nginx支持基于多端口的虚拟主机配置"></a>Nginx支持基于多端口的虚拟主机配置</h3><p>基于端口的配置在生产环境比较少见，用于特殊场景，例如公司内部测试平台网站，使用特殊端口的后台，OA系统、网站后台，CRM后台等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1.环境准备</span><br><span class="line">在/opt/nginx/conf/extra/下写入两个端口的配置文件</span><br><span class="line">vim nginx_888.888.conf</span><br><span class="line">第一个虚拟主机</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">listen 888;</span><br><span class="line">server_name -;</span><br><span class="line">charset usf-8;</span><br><span class="line">location / &#123;</span><br><span class="line">root /opt/nginx/html/nginx_888.888;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.#第二个虚拟主机</span><br><span class="line">vim /opt/nginx/conf/extra/nginx_888.888.conf</span><br><span class="line">server&#123;</span><br><span class="line">listen 160;</span><br><span class="line">server_name -;</span><br><span class="line">charset usf-8;</span><br><span class="line">location / &#123;</span><br><span class="line">root /opt/nginx/html/nginx_160.160;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.检查修改后的配置文件是否有误</span><br><span class="line">[root@tao_120 html]# nginx -t</span><br><span class="line">nginx: the configuration file /opt/nginx//conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /opt/nginx//conf/nginx.conf test is successful</span><br><span class="line"></span><br><span class="line">#重新读取nginx配置文件</span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line">4.分别准备两个端口的站点</span><br><span class="line">[root@tao_120 html]# echo &quot;my listen 160&quot; &gt; nginx_160.160/index.html</span><br><span class="line">[root@tao_120 html]# echo &quot;my listen 161&quot; &gt; nginx_161.161/index.html</span><br><span class="line"></span><br><span class="line">5.通过客户端浏览器通过不同端口登陆不同页面</span><br></pre></td></tr></table></figure><h2 id="Nginx访客日志功能"><a href="#Nginx访客日志功能" class="headerlink" title="Nginx访客日志功能"></a>Nginx访客日志功能</h2><p>日志对于程序员很重要，可用于问题排错，记录程序运行状态，一个好的日志能够给与精确的问题定位。</p><p>Nginx日志功能需要在nginx.conf中打开相关指令<code>log_format</code>，设置日志格式，以及设置日志的存储位置<code>access_log</code>，指定日志的格式，路径，缓存大小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">nginx.conf中有关访客日志定义如下</span><br><span class="line">#定义日志的内容格式（记录内容的详细程度）</span><br><span class="line">log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                    &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line"> access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">参数解释 </span><br><span class="line">$remote_addr ：记录访问网站的客户端地址</span><br><span class="line">$remote_user ：记录远程客户端用户名称</span><br><span class="line">$time_local ：记录访问时间与时区</span><br><span class="line">$request ：记录用户的 http 请求起始行信息</span><br><span class="line">$status ：记录 http 状态码，即请求返回的状态，例如 200（OK，连接成功） 、301（重定向）、404（不能存在） 、502 （服务器崩溃）等</span><br><span class="line">$body_bytes_sent ：记录服务器发送给客户端的响应 body 字节数</span><br><span class="line">$http_referer ：记录此次请求是从哪个链接访问过来的，可以根据 referer 进行防盗链设置</span><br><span class="line">$http_user_agent ：记录客户端访问信息，如浏览器、手机客户端等</span><br><span class="line">$http_x_forwarded_for ：当前端有代理服务器时，设置 Web 节点记录客户端地址的配置，此参数生效的前提是代理服务器上也进行了相关的 x_forwarded_for 设置</span><br></pre></td></tr></table></figure><p>查看日志格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tail -2 logs/access.log</span><br><span class="line"></span><br><span class="line">192.168.178.1 - - [11/Feb/2020:19:24:37 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36&quot;</span><br><span class="line">127.0.0.1 - - [12/Feb/2020:10:26:26 +0800] &quot;GET / HTTP/1.1&quot; 200 65 &quot;-&quot; &quot;curl/7.29.0&quot;</span><br></pre></td></tr></table></figure><h2 id="Nginx多虚拟主机日志定义"><a href="#Nginx多虚拟主机日志定义" class="headerlink" title="Nginx多虚拟主机日志定义"></a>Nginx多虚拟主机日志定义</h2><p>不同的IP</p><p>不同的端口</p><p>不同的域名</p><p>​    都能够访问到一台计算机的配置，nginx的多虚拟主机的功能配置，利用虚拟机可以在一台服务器上，运行多个站点配置。</p><p>针对每一个虚拟主机都配置好access.log更方便更清晰的对每一个虚拟主机进行访客信息管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#针对虚拟主机，添加日志的路径</span><br><span class="line">[root@tao_120 logs]# cat ../conf/extra/nginx_dd.conf </span><br><span class="line">server &#123;</span><br><span class="line">listen 80;#监听的端口和ip</span><br><span class="line">server_name nginx_dd.cc; #主机域名</span><br><span class="line">access_log logs/nginx_dd.log;  #在server里面添加access_log路径，</span><br><span class="line">#url匹配</span><br><span class="line">location / &#123;</span><br><span class="line">root /opt/nginx/html/nginx_dd;</span><br><span class="line"> #默认首页文件，从左往右寻找，index.html或是index.htm文件</span><br><span class="line">index index.htm index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">#第二个虚拟主机的配置</span><br><span class="line">[root@tao_120 logs]# cat ../conf/extra/nginx_ee.conf </span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name nginx_ee.cc;</span><br><span class="line">access_log logs/nginx_ee.log;</span><br><span class="line">location / &#123;</span><br><span class="line">root /opt/nginx/html/nginx_ee;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Nginx访客日志功能-1"><a href="#Nginx访客日志功能-1" class="headerlink" title="Nginx访客日志功能"></a>Nginx访客日志功能</h2><p>日志对于程序员很重要，可用于问题排错，记录程序运行状态，一个好的日志能够给与精确的问题定位。</p><p>Nginx日志功能需要在nginx.conf中打开相关指令<code>log_format</code>，设置日志格式，以及设置日志的存储位置<code>access_log</code>，指定日志的格式，路径，缓存大小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">nginx.conf中有关访客日志定义如下</span><br><span class="line"> #a</span><br><span class="line">log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                    &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line"> access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">参数解释 </span><br><span class="line">$remote_addr ：记录访问网站的客户端地址</span><br><span class="line">$remote_user ：记录远程客户端用户名称</span><br><span class="line">$time_local ：记录访问时间与时区</span><br><span class="line">$request ：记录用户的 http 请求起始行信息</span><br><span class="line">$status ：记录 http 状态码，即请求返回的状态，例如 200 、404 、502 等</span><br><span class="line">$body_bytes_sent ：记录服务器发送给客户端的响应 body 字节数</span><br><span class="line">$http_referer ：记录此次请求是从哪个链接访问过来的，可以根据 referer 进行防盗链设置</span><br><span class="line">$http_user_agent ：记录客户端访问信息，如浏览器、手机客户端等</span><br><span class="line">$http_x_forwarded_for ：当前端有代理服务器时，设置 Web 节点记录客户端地址的配置，此参数生效的前提是代理服务器上也进行了相关的 x_forwarded_for 设置</span><br></pre></td></tr></table></figure><p>查看日志格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tail -2 logs/access.log</span><br><span class="line"></span><br><span class="line">192.168.178.1 - - [11/Feb/2020:19:24:37 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36&quot;</span><br><span class="line">127.0.0.1 - - [12/Feb/2020:10:26:26 +0800] &quot;GET / HTTP/1.1&quot; 200 65 &quot;-&quot; &quot;curl/7.29.0&quot;</span><br></pre></td></tr></table></figure><h2 id="Nginx目录浏览功能"><a href="#Nginx目录浏览功能" class="headerlink" title="Nginx目录浏览功能"></a>Nginx目录浏览功能</h2><p>能够将你机器上的目录资粮，提供一个展示，无论是谁都可以快速的访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">修改nginx.conf配置，这个功能在虚拟主机里定义的</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name nginx_ee.cc;</span><br><span class="line">access_log logs/nginx_ee.log;</span><br><span class="line">charset utf-8;  #显示中文编码</span><br><span class="line">location / &#123;</span><br><span class="line">        root /opt/nginx/html/nginx_ee;</span><br><span class="line">        # 关闭虚拟主机支持中文解析</span><br><span class="line">        #index index.html index.htm;</span><br><span class="line">        #自动的展示root所定义的目录下的所有文件内容</span><br><span class="line">        autoindex on;  # on 打开 ，off 关闭</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Nginx的浏览器缓存"><a href="#Nginx的浏览器缓存" class="headerlink" title="Nginx的浏览器缓存"></a>Nginx的浏览器缓存</h3><p>配置浏览器缓存可以加速静态资源的访问，浏览器对用户访问的资源进行存储，下次访问，不用再去向服务器寻求资料，直接本地显示，加速访问体验，节省网络资源，提高效率。</p><p>Nginx通过expires指令配置缓存，可以控制HTTP响应中的Expires和Cache-Control的头部信息，用来控制页面缓存</p><p>例如HTML页面经常引用JavaScript以及图片等文件，这些文件很少被修改，可以设置浏览器对该类资源在本地缓存定期的时间。</p><p>添加缓存之前响应信息</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200212145237067.png" alt="image-20200212145237067"></p><p>添加缓存配置之后</p><p>nginx.conf修改server{}语句块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</span><br><span class="line">            root /website/s1/;</span><br><span class="line">            expires 30d;</span><br><span class="line">&#125;</span><br><span class="line">        location ~ .*\.(js|css)?$ &#123;</span><br><span class="line">             root /website/s1/;</span><br><span class="line">             expires 1h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200212145838408.png" alt="image-20200212145838408"></p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200212145902911.png" alt="image-20200212145902911"></p><h2 id="规范Nginx-conf"><a href="#规范Nginx-conf" class="headerlink" title="规范Nginx.conf"></a>规范Nginx.conf</h2><p>对于Nginx的使用，需要反复修改Nginx.conf，修改次数多了之后，就难以观看了，Nginx提供了<code>include</code>指令，可以将其他目录的配置文件，导入进主配置文件nginx.conf中。</p><p>思路可以根据虚拟主机域名或是功能别名，创建配置文件，例如</p><ul><li>bbs.conf</li><li>crm.conf</li><li>blog.conf</li></ul><p>然后使用include指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">include        mime.types;</span><br><span class="line">include        fastcgi_params;</span><br><span class="line">include                 vhosts/*.conf;</span><br></pre></td></tr></table></figure><p>Nginx优化配置文件案例</p><p>nginx.conf主配置文件，修改为如下简略信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1.创建统一管理配置文件目录</span><br><span class="line">mkdir -p /opt/nginx/conf/extra</span><br><span class="line"></span><br><span class="line">2.读取nginx.conf配置文件，将第一个server&#123;&#125;虚拟主机配置导出为bbs.conf</span><br><span class="line">[root@bogon conf]# sed -n &#x27;29,87p&#x27; nginx.conf &gt; extra/bbs.conf</span><br><span class="line"></span><br><span class="line">3.删除原有的配置</span><br><span class="line">[root@bogon conf]# sed -i  &#x27;29,87d&#x27; nginx.conf</span><br><span class="line"></span><br><span class="line">4.生成第二个blog.conf，导出第二个虚拟主机的配置</span><br><span class="line">[root@bogon conf]# sed -n &#x27;29,41p&#x27; nginx.conf &gt; extra/blog.conf</span><br><span class="line">[root@bogon conf]# sed -i &#x27;29,41d&#x27; nginx.conf #删除主配置文件的参数</span><br><span class="line"></span><br><span class="line">5.主配置文件，添加include配置</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line">    include extra/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">6.此时nginx的两个虚拟主机任然可以用</span><br><span class="line">[root@bogon conf]# curl 127.0.0.1</span><br><span class="line">我是多域名虚拟主机，来自于域名www.chaogelinux.com</span><br><span class="line">&lt;img src=&quot;./1.jpg&quot;&gt;</span><br><span class="line">&lt;img src=&quot;./2.jpg&quot;&gt;</span><br><span class="line">&lt;img src=&quot;./3.jpg&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link rel=&quot;shortcut icon&quot; href=&quot;#&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">[root@bogon conf]# curl 127.0.0.1:81</span><br><span class="line">我是来自于域名www.chaogenginx.com的多域名虚拟主机</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实现了配置文件拆分，方便可观</span><br></pre></td></tr></table></figure><h2 id="Nginx状态信息功能"><a href="#Nginx状态信息功能" class="headerlink" title="Nginx状态信息功能"></a>Nginx状态信息功能</h2><p>nginx提供了status模块，用于检测nginx的请求连接信息，</p><p>这个功能需要在编译安装nginx的时候，添加–with-http-stud-status_module参数，才能使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx  -V #检查当前nginx是否支持status功能</span><br></pre></td></tr></table></figure><p>当你支持status功能，我们可以添加一个conf配置文件，用于检查状态页的功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">创建一个status.conf,放入extra目录下</span><br><span class="line"></span><br><span class="line">1.确保你的nginx.conf住配置文件，支持include语法</span><br><span class="line">include extra/*.conf; #将当前的extra目录下所有的conf文件，都识别为是nginx的配置文件</span><br><span class="line"></span><br><span class="line">2.创建status.conf</span><br><span class="line">[root@tao_120 extra]# touch status.conf</span><br><span class="line">[root@tao_120 extra]# ls</span><br><span class="line">nginx_dd.conf  nginx_ee.conf  status.conf</span><br><span class="line"></span><br><span class="line">3.修改status.conf开启状态页面功能，添加如下内容</span><br><span class="line">[root@tao_120 extra]# vim status.conf </span><br><span class="line">#写入如下内容</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">location / &#123;</span><br><span class="line">stub_status on;#开启状态页面功能</span><br><span class="line">access_log off;#光比访客日志功能</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">4.检查nginx配置， 重启nginx服务</span><br><span class="line">nginx -t #检查nginx配置</span><br><span class="line">nginx -s reload  #重新读取nginx 配置文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问nginx状态页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">192.168.31.120:85</span><br><span class="line">#查看到如下内容</span><br><span class="line">Active connections: 2 #显示正在处理的活动，连接数</span><br><span class="line">server accepts handled requests request_time</span><br><span class="line"> 7 7 68 0</span><br><span class="line">Reading: 0 Writing: 1 Waiting: 1 </span><br><span class="line"></span><br><span class="line">server  nginx启动后一共处理的请求数</span><br><span class="line">accepts handled nginx启动后创建的握手数量</span><br><span class="line">requests表示nginx一共处理了多少请求</span><br><span class="line"></span><br><span class="line">readingnginx读取到客户端的headers数量</span><br><span class="line">writingnginx响应给客户端的headers数量</span><br><span class="line">waitingnginx处理完毕请求之后，等待下一次的请求主流的连接数</span><br><span class="line">waiting值=active-（reading+writing）</span><br></pre></td></tr></table></figure><p>通过ab命令，nginx进行压力测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.安装ab命令</span><br><span class="line">yum install httpd-tools  -y</span><br><span class="line"></span><br><span class="line">2.使用ab命令对nginx发送大量的连接请求</span><br><span class="line">-n  请求数量  # 一共发出多少个请求   -n  100000</span><br><span class="line">-c请求并发数   -c  100</span><br><span class="line">-k表示启动keepalived保持连接功能</span><br><span class="line"></span><br><span class="line">ab  -kc  100   -n  10000  http://127.0.0.1/</span><br></pre></td></tr></table></figure><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200212160833105.png" alt="image-20200212160833105"></p><h2 id="Nginx错误日志"><a href="#Nginx错误日志" class="headerlink" title="Nginx错误日志"></a>Nginx错误日志</h2><p>Nginx能够将自身运行故障的信息也写入到指定的日志文件中。对于错误信息的调试，是维护Nginx的重要手段，指令是<code>error_log</code>，可以放在http{}全局中，也可以单独为虚拟主机记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">error_log file  level;</span><br><span class="line"></span><br><span class="line">日志级别在乎 debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">级别越高，日志记录越少，生产常用模式是warn|error|crit级别</span><br><span class="line">日志的记录，会给服务器增加额外大量的IO消耗，按需修改</span><br></pre></td></tr></table></figure><p>nginx.conf修改如下，针对虚拟主机添加错误日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#修改第一虚拟主机配置文件，添加error_log信息</span><br><span class="line">[root@tao_120 extra]# cat nginx_dd.conf </span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name nginx_dd.cc;</span><br><span class="line">access_log logs/nginx_dd.log;</span><br><span class="line">error_log logs/error_dd.log;  #添加error_log信息</span><br><span class="line">location / &#123;</span><br><span class="line">root /opt/nginx/html/nginx_dd;</span><br><span class="line">index index.htm index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#检查是否配置好</span><br><span class="line">nginx -t </span><br><span class="line">nginx  -s reload</span><br><span class="line"></span><br><span class="line">[root@tao_120 conf]# cd ../logs/</span><br><span class="line">[root@tao_120 logs]# ls</span><br><span class="line">access.log  error_dd.log  error_ee.log  error.log  nginx_dd.log  nginx_ee.log  nginx.pid</span><br></pre></td></tr></table></figure><h2 id="Nginx-location作用"><a href="#Nginx-location作用" class="headerlink" title="Nginx location作用"></a>Nginx location作用</h2><p>Nginx的locaiton作用是根据用户请求的URI不同，来执行不同的应用。</p><p>针对用户请求的网站URL进行匹配，匹配成功后进行对应的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nginx.conf中server&#123;&#125;指令块的location指令如下</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location [ = | ~| ~* | ^~ ]  url &#123;</span><br><span class="line">    #指定对应的动作</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#正则表达式解释</span><br><span class="line">匹配符 匹配规则 优先级</span><br><span class="line">=    精确匹配    1</span><br><span class="line">^~    以某个字符串开头，不做正则    2</span><br><span class="line">~*    正则匹配    3</span><br><span class="line">/blog/ 匹配常规字符串，有正则就优先正则 4</span><br><span class="line">/    通用匹配，不符合其他location的默认匹配    5</span><br></pre></td></tr></table></figure><p>实际演练</p><table><thead><tr><th>请求url</th><th>完整url</th><th>匹配后动作</th></tr></thead><tbody><tr><td>/</td><td><a href="http://192.168.178.134/">http://192.168.178.134/</a></td><td>配置A</td></tr><tr><td>/index.html</td><td><a href="http://192.168.178.134/index.html">http://192.168.178.134/index.html</a></td><td>配置B</td></tr><tr><td>/blog/blog.html</td><td><a href="http://192.168.178.134/blog/blog.html">http://192.168.178.134/blog/blog.html</a></td><td>配置C</td></tr><tr><td>/img/1.jpg</td><td><a href="http://192.168.178.134/1.jpg">http://192.168.178.134/1.jpg</a></td><td>配置D</td></tr><tr><td>/blog/1.jpg</td><td><a href="http://192.168.178.134/blog/1.jpg">http://192.168.178.134/blog/1.jpg</a></td><td>配置E</td></tr></tbody></table><p>修改nginx.conf如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@tao_120 extra]# cat nginx_test.conf </span><br><span class="line">server &#123;</span><br><span class="line">listen 8088;</span><br><span class="line">server_name nginx_location.cc;</span><br><span class="line">charset uft-8;</span><br><span class="line">#最低级匹配，不符合其他location就来这；</span><br><span class="line">location / &#123;</span><br><span class="line">return 500;</span><br><span class="line">&#125;</span><br><span class="line">#优先级最高 </span><br><span class="line">location = /1 &#123;</span><br><span class="line">        return 401;</span><br><span class="line">&#125;</span><br><span class="line">#以/blog/开头的url，来这里如符合其他location，则以其他优先</span><br><span class="line">location /blog/ &#123;</span><br><span class="line">        return 404;</span><br><span class="line">&#125;</span><br><span class="line">#匹配任何以/img/开头的请求，不匹配正则</span><br><span class="line">location ^~ /img/ &#123;</span><br><span class="line">        return 402;</span><br><span class="line">&#125;</span><br><span class="line">#匹配任何.gif结尾的请求，支持正则</span><br><span class="line">location ~* \.(gif|jpg|txt|jpeg) &#123;</span><br><span class="line">        return 403;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过curl命令，检测nginx的locaiton匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">curl命令</span><br><span class="line">-s 不输出错误和进度信息，静默输出</span><br><span class="line">-o  输出写入到指定文件中 /dev/null 就是丢弃输出，扔进黑洞</span><br><span class="line">-I 只显示响应头</span><br><span class="line">-w 完成后输出哪些内容</span><br><span class="line">#用户请求的url为空或者有一个/</span><br><span class="line">[root@lht_121 ~]# curl -s -o /dev/null -I -w &quot;%&#123;http_code&#125;\n&quot;  192.168.31.120:8088</span><br><span class="line">500</span><br><span class="line">[root@lht_121 ~]# curl -s -o /dev/null -I -w &quot;%&#123;http_code&#125;\n&quot;  192.168.31.120:8088/</span><br><span class="line">500</span><br><span class="line"></span><br><span class="line">#用户请求以/blog/开头的URL</span><br><span class="line">[root@lht_121 ~]# curl -s -o /dev/null -I -w &quot;%&#123;http_code&#125;\n&quot;  192.168.31.120:8088/blog/</span><br><span class="line">404</span><br><span class="line">[root@lht_121 ~]# curl -s -o /dev/null -I -w &quot;%&#123;http_code&#125;\n&quot;  192.168.31.120:8088/blog/123</span><br><span class="line">404</span><br><span class="line"></span><br><span class="line"># 匹配以.jpg结尾的URL，由于/blog/优先级低于~* 所以匹配1.jpg</span><br><span class="line">[root@lht_121 ~]# curl -s -o /dev/null -I -w &quot;%&#123;http_code&#125;\n&quot;  192.168.31.120:8088/blog/123.jpg</span><br><span class="line">403</span><br><span class="line"></span><br><span class="line"># 访问以/img/开头的URL</span><br><span class="line">[root@lht_121 ~]# curl -s -o /dev/null -I -w &quot;%&#123;http_code&#125;\n&quot;  192.168.31.120:8088/img/</span><br><span class="line">402</span><br><span class="line"># 匹配以/1为开头的URL  因为/1是以优先级最高的=匹配的，所以优先显示</span><br><span class="line">[root@lht_121 ~]# curl -s -o /dev/null -I -w &quot;%&#123;http_code&#125;\n&quot;  192.168.31.120:8088/1</span><br><span class="line">401</span><br><span class="line">[root@lht_121 ~]# </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Nginx地址重写"><a href="#Nginx地址重写" class="headerlink" title="Nginx地址重写"></a>Nginx地址重写</h2><p>Nginx rewrire技术主要是实现URL地址重写，且支持正则表达式的规则。</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200212175225568.png" alt="image-20200212175225568"></p><p>rewrite能够实现URL的跳转，需要nginx在编译安装的时候，装好了PCRE这个软件。</p><p>通过rewrite可以规范URL、根据变量进行URL跳转等，常用的功能如</p><ul><li>对于爬虫的封禁，让其跳转无用页面</li><li>动态的URL伪装成HTMl页面，便于搜索引擎的抓取</li><li>旧域名、旧目录的更新，需要跳转到新的URL地址</li></ul><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^/(.*) http://192.168.31.120/$1 permanent;</span><br><span class="line">#解释</span><br><span class="line">rewrite是指令，开启一个跳转规则</span><br><span class="line">正则是 ^/(.*) 表示匹配所有，匹配成功后跳转到后面的url地址</span><br><span class="line">$1 表示取出前面正则括号里的内容</span><br><span class="line">permanent表示 301 重定向的标记</span><br></pre></td></tr></table></figure><p>【rewrite的结尾参数 flag标记】</p><table><thead><tr><th>标记</th><th>解释a</th></tr></thead><tbody><tr><td>last</td><td>规则匹配完成后，继续向下匹配新的Locaiton</td></tr><tr><td>break</td><td>本条规则完成匹配后，立即停止</td></tr><tr><td>redirect</td><td>返回302临时重定向，浏览器地址栏显示跳转后的URL</td></tr><tr><td>permanent</td><td>返回301永久重定向，浏览器地址显示跳转后的URL</td></tr></tbody></table><ul><li><p>last和break用于实现URL重写，浏览器地址栏不发生变化</p></li><li><p>redirect和permanent用于实现URL跳转，浏览器地址栏跳转新的URL</p></li></ul><h3 id="实现301-URL跳转"><a href="#实现301-URL跳转" class="headerlink" title="实现301 URL跳转"></a>实现301 URL跳转</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#请求直接跳转到百度</span><br><span class="line">[root@bogon extra]# cat learn_rewrite.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 90;</span><br><span class="line">server_name _;</span><br><span class="line">rewrite ^/(.*) http://www.baidu.com/$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx访问认证"><a href="#Nginx访问认证" class="headerlink" title="Nginx访问认证"></a>Nginx访问认证</h2><p>有时候，我们一些站点内容想要进行授权查看，只能输入账号密码之后才能访问，例如一些重要的内网平台，CRM，CMDB，企业内部WIKI等等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">htpasswd是Apache密码生成工具，Nginx支持auth_basic认证，因此我门可以将生成的密码用于Nginx中，输入一行命令即可安装：yum -y install httpd-tools ，参数如下：</span><br><span class="line"></span><br><span class="line">-c 创建passwdfile.如果passwdfile 已经存在,那么它会重新写入并删去原有内容.</span><br><span class="line">-n 不更新passwordfile，直接显示密码</span><br><span class="line">-m 使用MD5加密（默认）</span><br><span class="line">-d 使用CRYPT加密（默认）</span><br><span class="line">-p 使用普通文本格式的密码</span><br><span class="line">-s 使用SHA加密</span><br><span class="line">-b 命令行中一并输入用户名和密码而不是根据提示输入密码，可以看见明文，不需要交互</span><br><span class="line">-D 删除指定的用户</span><br><span class="line"></span><br><span class="line">#接认证文件，htpasswd -bc .access username password  #在当前目录生成.access文件，用户名username，密码：password，默认采用MD5加密方式。</span><br><span class="line">nginx的认证模块指令，语法：</span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">    auth_basic &quot;string&quot;; 可以填写off或是string</span><br><span class="line">    auth_basic_user_file conf/htpasswd;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@chaogelinux extra]# cat www.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line">    server_name _;</span><br><span class="line">    location / &#123;</span><br><span class="line">    root html/www;</span><br><span class="line">    index index.html;</span><br><span class="line">    auth_basic    &quot;learn nginx auth_module&quot;;</span><br><span class="line">    #nginx会去这个文件中验证账号密码</span><br><span class="line">    auth_basic_user_file /home/Learn_Nginx/nginx/conf/extra/htpasswd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@chaogelinux www]# cat index.html</span><br><span class="line">&lt;meta charset=utf8&gt;</span><br><span class="line">只有正确输入了账号密码，才能看到此页面</span><br><span class="line"></span><br><span class="line">重启nginx</span><br><span class="line">nginx -s reload</span><br><span class="line">生成密码文件</span><br><span class="line">[root@chaogelinux extra]# htpasswd -bc ./htpasswd  chaoge  666</span><br><span class="line">Adding password for user chaoge</span><br></pre></td></tr></table></figure><p>访问测试</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200214181813782.png" alt="image-20200214181813782"></p><h2 id="root和alias区别"><a href="#root和alias区别" class="headerlink" title="root和alias区别"></a>root和alias区别</h2><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20201026140053711.png" alt="image-20201026140053711"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web基础</title>
      <link href="/2021/10/20/web%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/10/20/web%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="Web服务是通过万维网-WWW-超文本传输​​协议-HTTP-进行通信的客户端和服务器应用程序。-如万维网联盟-W3C-所述，Web服务提供了在各种平台和框架上运行的软件应用程序之间进行互操作的标准方法。"><a href="#Web服务是通过万维网-WWW-超文本传输​​协议-HTTP-进行通信的客户端和服务器应用程序。-如万维网联盟-W3C-所述，Web服务提供了在各种平台和框架上运行的软件应用程序之间进行互操作的标准方法。" class="headerlink" title="Web服务是通过万维网( WWW )超文本传输​​协议( HTTP )进行通信的客户端和服务器应用程序。 如万维网联盟(W3C)所述，Web服务提供了在各种平台和框架上运行的软件应用程序之间进行互操作的标准方法。 "></a>Web服务是通过万维网( WWW )超文本传输​​协议( HTTP )进行通信的客户端和服务器应用程序。 如万维网联盟(W3C)所述，Web服务提供了在各种平台和框架上运行的软件应用程序之间进行互操作的标准方法。 <span id="more"></span></h3><h1 id="网上冲浪"><a href="#网上冲浪" class="headerlink" title="网上冲浪"></a>网上冲浪</h1><p>网上冲浪：在Internet互联网上获取各种信息，进行工作、娱乐，在英文中上网是” surfing the internet”,因”surfing”的意思是冲浪，即称为“网上冲浪”，这是一种形象的说法。</p><p>这是一个非常上古的词汇了，小学初中写英语作文的时候还经常“surfing the internet”，当时要想上网，是需要专门找到连接互联网的电脑才可以进行上网。去“网上冲浪”是一件专门的事情，就好比现在说要去游泳，要去图书馆看书一样。</p><p>不像现在，每个人随时随地都在网上冲浪。</p><img src="http://book.luffycity.com/linux-book/%E4%BA%92%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/pic/image-20200113102850764.png" alt="image-20200113102850764" style="zoom:43%;" /><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>你知道我们打开浏览器（Web browser）的地址栏输入网站名字（域名），web页面如何展示的吗</p><img src="http://book.luffycity.com/linux-book/%E4%BA%92%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/pic/image-20200113103704780.png" alt="image-20200113103704780" style="zoom:50%;" /><p>当你浏览器的地址栏输入某个URL（uniform Resource Locator，同意资源定位符），机器可以上网，就可以看到web页面，就算你不连接内部原理，也能看到结构</p><p>Web页面肯定不是凭空出现的，根据浏览器地址栏指定的URL，浏览器想web server（web 服务器）中获取文件资源（resource）从而显示出页面。</p><p><img src="http://book.luffycity.com/linux-book/%E4%BA%92%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/pic/image-20200113104128851.png" alt="image-20200113104128851"></p><p>web使用的是一种http（HyperText Transfer Protocol，超文本传输协议），完成客户端到服务端的一系列请求过程</p><h1 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h1><p>通常互联网就是以TP/IP协议的基础运作，HTTP是TCP/IP的一个子集</p><p>计算机与网络设备要相互通信，双方就必须基于相同的方法。比如，如何在探测到通信目标、有那边先发起通信，使用哪种语言进行通信、怎样结束通信等规则都需要实现确定。不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就这这种规则称为协议（protocol）。</p><p>协议崔在各式各样的内容，TCP/IP是互联网各协议的总称</p><ul><li>ICMP（Internet Control Message Protocol）lnternet控制报文协议。它是TCP/IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。</li><li>lnernet Protocol简称IP，又译为网际协议或互联网协议</li><li>DNS建议在UDP或TCP协议之上，默认使用53号端口。客户端默认通过UDP协议进行通讯，但是由于广域网中不适合传输过大的UDP数据包，因此规定当报文长度超过了512字节是，应转换为使用TCP协议进行数据传输。</li><li>lnternet协议集支持一个无连接的传输协议，该协议称为用户数据报文协议（UDP，User Datagram Protocol）。UDP为应用程序提供了一种无需建立连接就可以发送封装IP数据包的方法。</li><li>FTP（File Transfer Protocol，文件传输协议）是TCP/IP协议组中的协议之一。FTP协议包括两个组成部分，其一为FTP服务器，其二为FTP客户端。其中FTP服务器用来存储文件，用户可以使用FTP客户端通过FTP协议访问位于FTP服务器上的资源。</li><li>SNMP是专门设计用于在IP网络管理网络节点（服务器、工作站、路由器、交换机及HUBS等）的一种标准协议，它是一种应用层协议。SNMP接受随机消息（及事件报告）网络管理系统获知网络出现问题。</li><li>http是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。</li></ul><p>TCP/IP协议分为了四层</p><ul><li>应用层</li><li>传输层</li><li>网络层</li><li>数据链路层</li></ul><img src="http://book.luffycity.com/linux-book/%E4%BA%92%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/pic/image-20200113105732826.png" alt="image-20200113105732826" style="zoom:50%;" /><ul><li>应用层，决定了向用户提供应用服务时的活动，例如 FTP  DNS  HTTP</li><li>传输层，用于在网络层中两台计算机之间的数据传输，TCP(Transmission Control Protocol，传输控制协议)和 UDP(User Data Protocol，用户数据报 协议)。</li><li>网络层，处理网络上传输的数据包，规定了数据传输的路线，目的地。</li><li>数据链路层，处理网络连接的硬件层，如操作系统，网卡等硬件设备驱动。</li></ul><h1 id="TCP传输原理"><a href="#TCP传输原理" class="headerlink" title="TCP传输原理"></a>TCP传输原理</h1><img src="http://book.luffycity.com/linux-book/%E4%BA%92%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/pic/image-20200113110505055.png" alt="image-20200113110505055" style="zoom:50%;" /><p>数据包在每一层传输的时候，都会加上一层对应层所属的首部信息，反之接受方在数据传输的时候，每一层都会进行相应的解包，这种称为<code>数据包的封装</code>。</p><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p>IP协议（Internet Protocol）处于OSI模型(<strong>开放式系统互联模型</strong>（英语：<strong>O</strong>pen <strong>S</strong>ystem <strong>I</strong>nterconnection Model，缩写：OSI；简称为<strong>OSI模型</strong>)中的网络层。</p><p>IP协议作用是把数据包发送到指定的目的地，这里的重要条件就是<code>IP地址</code>和<code>MAC地址</code></p><p>IP地址是指定了机器在网络的地址信息</p><p>MAC地址是指网卡所属的固定的地址</p><p>IP地址可以动态分配，自由变化，而MAC地址基本不会更改，一般机器的出场后就固定了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sersync</title>
      <link href="/2021/10/20/sersync/"/>
      <url>/2021/10/20/sersync/</url>
      
        <content type="html"><![CDATA[<h3 id="服务器同步的解决方案有很多。比较流行的有inotify-tools-rsync和Openduckbill-依赖于inotify-tools-。现在介绍一个解决方案sersync"><a href="#服务器同步的解决方案有很多。比较流行的有inotify-tools-rsync和Openduckbill-依赖于inotify-tools-。现在介绍一个解决方案sersync" class="headerlink" title="服务器同步的解决方案有很多。比较流行的有inotify-tools+rsync和Openduckbill(依赖于inotify-tools)。现在介绍一个解决方案sersync  "></a>服务器同步的解决方案有很多。比较流行的有inotify-tools+rsync和Openduckbill(依赖于inotify-tools)。现在介绍一个解决方案sersync  <span id="more"></span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提到数据同步就必然会谈到rsync，一般简单的服务器数据传输会使用ftp/sftp等方式，但是这样的方式效率不高，不支持差异化增量同步也不支持实时传输。针对数据实时同步需求大多数人会选择rsync+inotify-tools的解决方案，sersync是国人基于前两者开发的工具，不仅保留了优点同时还强化了实时监控，文件过滤，简化配置等功能，帮助用户提高运行效率，节省时间和网络资源。</span><br></pre></td></tr></table></figure><p>Sersync项目利用Inotify和Rsync工具技术实现对服务器数据实时复制。</p><p>当事件发生变化后，利用rsync命令把变化的数据复制到远端服务器上。</p><p>Sersync特点</p><ul><li>使用C++编写，支持对监控事件的过滤</li><li>Sersync采用xml配置文件，由守护进程启动，配置起来比起简易的<code>inotify+rsync更简单</code></li><li>使用多线程复制，可以并发复制多个不同文件，效率更高</li><li>Sersync自带异常检测机制，可以通过<code>失败队列</code>对出错的文件重新复制</li><li>自带crontab功能，实现对<code>失败队列</code>中的文件定时整体复制</li><li>自带socket和HTTP协议扩展，定制特殊需求，二次开发</li></ul><h2 id="Sersync软件架构原理"><a href="#Sersync软件架构原理" class="headerlink" title="Sersync软件架构原理"></a>Sersync软件架构原理</h2><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200316144938926.png" alt="image-20200316144938926"></p><p>上图执行原理解释</p><ol><li>Inotify监控指定目录对应事件的变化，当有事件变化时进入事件过滤队列</li><li>过滤队列负责过滤掉不需要触发复制的数据，也可以过滤短时间内产生的重复Inotify事件信息，过滤后的事件触发Rsync对应变化数据进行复制。</li><li>图中线程组（线程是等待线程队列的守护线程），当事件队列中中有事件发生后，线程组守护线程会逐个唤醒复制线程（线程就是干活的工人，没活的时候打盹，来活了逐个唤醒准备干活），当队列的Inotify事件较多的时候，复制线程就会全部唤醒一起工作，提升复制效率。（活太多，所有工人全部喊起来，加快工作效率）</li><li>除了线程组以外，还有Sersync服务线程负责处理<code>复制失败的文件</code>，它们再次复制，对于再次复制失败的文件（执行失败的命令），会记录到rsync_fail_log.sh脚本中，然后再定期执行脚本，同时利用自带的cron功能，实现每隔一段时间将所有未复制的数据整体复制。</li></ol><h2 id="Sersync部署"><a href="#Sersync部署" class="headerlink" title="Sersync部署"></a>Sersync部署</h2><h3 id="确保rsync服务正确，c-s端"><a href="#确保rsync服务正确，c-s端" class="headerlink" title="确保rsync服务正确，c/s端"></a>确保rsync服务正确，c/s端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.大前提Rsync Daemon服务正确</span><br><span class="line">[root@nfs01 scripts]# rsync -avz --delete /data/ rsync_backup@192.168.178.110::backup</span><br></pre></td></tr></table></figure><h3 id="确保当前客户端机器，是否支持Inotify"><a href="#确保当前客户端机器，是否支持Inotify" class="headerlink" title="确保当前客户端机器，是否支持Inotify"></a>确保当前客户端机器，是否支持Inotify</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 scripts]# ls /proc/sys/fs/inotify/</span><br><span class="line">max_queued_events  max_user_instances  max_user_watches</span><br></pre></td></tr></table></figure><h3 id="Sersync安装"><a href="#Sersync安装" class="headerlink" title="Sersync安装"></a>Sersync安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1.资料参考地址</span><br><span class="line">https://github.com/wsgzao/sersync</span><br><span class="line"></span><br><span class="line">2.下载获取sersync软件包，上传至linux</span><br><span class="line">[root@nfs01 ~]# ls /MyInotify/tools/</span><br><span class="line">sersync_installdir_64bit.zip</span><br><span class="line"></span><br><span class="line">3.通过unzip命令解压缩</span><br><span class="line">unzip  sersync_installdir_64bit.zip</span><br><span class="line"></span><br><span class="line">4.进入sersync可执行命令目录</span><br><span class="line">[root@php_123 bin]# pwd </span><br><span class="line">/mytools/sersync_installdir_64bit/sersync/bin</span><br><span class="line">#给sersync命令添加可执行权限</span><br><span class="line">[root@php_123 bin]# ll </span><br><span class="line">总用量 1768</span><br><span class="line">-rw-r--r-- 1 root root 1810128 10月 26 2011 sersync</span><br><span class="line">[root@php_123 bin]# chmod +x sersync </span><br><span class="line">[root@php_123 bin]# ll</span><br><span class="line">总用量 1768</span><br><span class="line">-rwxr-xr-x 1 root root 1810128 10月 26 2011 sersync</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="sersync配置文件"><a href="#sersync配置文件" class="headerlink" title="sersync配置文件"></a>sersync配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">1.修改配置文件，修改如下部分</span><br><span class="line">[root@php_123 conf]# vim  /mytools/sersync_installdir_64bit/sersync/conf/confxml.xml </span><br><span class="line"># 配置文件解释</span><br><span class="line"># sersync的过滤功能，排除指定的文件不复制</span><br><span class="line">  6     &lt;filter start=&quot;false&quot;&gt;</span><br><span class="line">  7         &lt;exclude expression=&quot;(.*)\.svn&quot;&gt;&lt;/exclude&gt;</span><br><span class="line">  8         &lt;exclude expression=&quot;(.*)\.gz&quot;&gt;&lt;/exclude&gt;</span><br><span class="line">  9         &lt;exclude expression=&quot;^info/*&quot;&gt;&lt;/exclude&gt;</span><br><span class="line"> 10         &lt;exclude expression=&quot;^static/*&quot;&gt;&lt;/exclude&gt;</span><br><span class="line"> 11     &lt;/filter&gt;</span><br><span class="line"></span><br><span class="line"># 指定监控事件，也就是触发监控管理的事件，true开启，false关闭</span><br><span class="line"> 12     &lt;inotify&gt;</span><br><span class="line"> 13         &lt;delete start=&quot;true&quot;/&gt;</span><br><span class="line"> 14         &lt;createFolder start=&quot;true&quot;/&gt;</span><br><span class="line"> 15         &lt;createFile start=&quot;false&quot;/&gt;</span><br><span class="line"> 16         &lt;closeWrite start=&quot;true&quot;/&gt;</span><br><span class="line"> 17         &lt;moveFrom start=&quot;true&quot;/&gt;</span><br><span class="line"> 18         &lt;moveTo start=&quot;true&quot;/&gt;</span><br><span class="line"> 19         &lt;attrib start=&quot;false&quot;/&gt;</span><br><span class="line"> 20         &lt;modify start=&quot;false&quot;/&gt;</span><br><span class="line"> 21     &lt;/inotify&gt;</span><br><span class="line"></span><br><span class="line"> # sersync主要功能点</span><br><span class="line"> 23     &lt;sersync&gt;</span><br><span class="line"> 24         &lt;localpath watch=&quot;/data&quot;&gt;</span><br><span class="line"> # 填写rsync同步服务端ip地址，以及同步的模块名，支持复制到多台服务器</span><br><span class="line"> 25             &lt;remote ip=&quot;192.168.178.110&quot; name=&quot;bakcup&quot;/&gt;</span><br><span class="line"> 26             &lt;!--&lt;remote ip=&quot;192.168.8.39&quot; name=&quot;tongbu&quot;/&gt;--&gt;</span><br><span class="line"> 27             &lt;!--&lt;remote ip=&quot;192.168.8.40&quot; name=&quot;tongbu&quot;/&gt;--&gt;</span><br><span class="line"> 28         &lt;/localpath&gt;</span><br><span class="line"></span><br><span class="line"> # 配置rsync的信息</span><br><span class="line"> 29         &lt;rsync&gt;</span><br><span class="line"> # 命令的参数</span><br><span class="line"> 30             &lt;commonParams params=&quot;-artuz&quot;/&gt;</span><br><span class="line"> # 填写rsync服务端验证的账号，密码文件</span><br><span class="line"> 31             &lt;auth start=&quot;true&quot; users=&quot;rsync_backup&quot; passwordfile=&quot;/etc/rsync.password&quot;/&gt;</span><br><span class="line"> 32             &lt;userDefinedPort start=&quot;false&quot; port=&quot;874&quot;/&gt;&lt;!-- port=874 --&gt;</span><br><span class="line"> 33             &lt;timeout start=&quot;false&quot; time=&quot;100&quot;/&gt;&lt;!-- timeout=100 --&gt;</span><br><span class="line"> 34             &lt;ssh start=&quot;false&quot;/&gt;</span><br><span class="line"> 35         &lt;/rsync&gt;</span><br></pre></td></tr></table></figure><h2 id="sersync部署命令行"><a href="#sersync部署命令行" class="headerlink" title="sersync部署命令行"></a>sersync部署命令行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">1.配置sersync命令环境变量</span><br><span class="line">方式一：可以添加sersync的完整bin目录，加入到PATH中</span><br><span class="line">方式二：把sersync命令，生成一个软链接，放入到PATH下</span><br><span class="line">[root@php_123 bin]# ln -s /mytools/sersync_installdir_64bit/sersync/bin/sersync  /usr/local/bin/</span><br><span class="line"></span><br><span class="line">2.查看命令帮助信息</span><br><span class="line">[root@php_123 bin]# sersync -h</span><br><span class="line">set the system param</span><br><span class="line">execute：echo 50000000 &gt; /proc/sys/fs/inotify/max_user_watches</span><br><span class="line">execute：echo 327679 &gt; /proc/sys/fs/inotify/max_queued_events</span><br><span class="line">parse the command param</span><br><span class="line">_______________________________________________________</span><br><span class="line">参数-d:启用守护进程模式</span><br><span class="line">参数-r:在监控前，将监控目录与远程主机用rsync命令推送一遍</span><br><span class="line">c参数-n: 指定开启守护线程的数量，默认为10个</span><br><span class="line">参数-o:指定配置文件，默认使用confxml.xml文件</span><br><span class="line">参数-m:单独启用其他模块，使用 -m refreshCDN 开启刷新CDN模块</span><br><span class="line">参数-m:单独启用其他模块，使用 -m socket 开启socket模块</span><br><span class="line">参数-m:单独启用其他模块，使用 -m http 开启http模块</span><br><span class="line">不加-m参数，则默认执行同步程序</span><br><span class="line">________________________________________________________________</span><br><span class="line"></span><br><span class="line">3.开启sersync服务</span><br><span class="line">[root@php_123 bin]# sersync -r -d -o /mytools/sersync_installdir_64bit/sersync/conf/confxml.xml </span><br><span class="line">set the system param</span><br><span class="line">execute：echo 50000000 &gt; /proc/sys/fs/inotify/max_user_watches</span><br><span class="line">execute：echo 327679 &gt; /proc/sys/fs/inotify/max_queued_events</span><br><span class="line">parse the command param</span><br><span class="line">option: -r rsync all the local files to the remote servers before the sersync work</span><br><span class="line">option: -d run as a daemon</span><br><span class="line">option: -o config xml name：  /mytools/sersync_installdir_64bit/sersync/conf/confxml.xml</span><br><span class="line">daemon thread num: 10</span><br><span class="line">parse xml config file</span><br><span class="line">host ip : localhosthost port: 8008</span><br><span class="line">daemon start，sersync run behind the console </span><br><span class="line">config xml parse success</span><br><span class="line">please set /etc/rsyncd.conf max connections=0 Manually</span><br><span class="line">sersync working thread 12  = 1(primary thread) + 1(fail retry thread) + 10(daemon sub threads) </span><br><span class="line">Max threads numbers is: 22 = 12(Thread pool nums) + 10(Sub threads)</span><br><span class="line">please according your cpu ，use -n param to adjust the cpu rate</span><br><span class="line">------------------------------------------</span><br><span class="line">rsync the directory recursivly to the remote servers once</span><br><span class="line">working please wait...</span><br><span class="line">execute command: cd /data &amp;&amp; rsync -artuz -R --delete ./ 192.168.31.124::backup &gt;/dev/null 2&gt;&amp;1 </span><br><span class="line">run the sersync: </span><br><span class="line">watch path is: /data</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加sersync命令至开机启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 data]# echo &quot;/MyInotify/tools/sersync_installdir_64bit/sersync/bin/sersync -d&quot; &gt;&gt; /etc/rc.local</span><br><span class="line">[root@nfs01 data]#</span><br><span class="line">[root@nfs01 data]# tail -1 /etc/rc.local</span><br><span class="line">/MyInotify/tools/sersync_installdir_64bit/sersync/bin/sersync -d</span><br></pre></td></tr></table></figure><p>命令部署测试</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Rsync备份服务</title>
      <link href="/2021/10/20/Rsync%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1/"/>
      <url>/2021/10/20/Rsync%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="rsync一种远程数据同步的工具，他可以在线同步数据，来进行数据的备份，与我们常用的（cp-，scp-）-命令进行数据备份有区别，rsync-可以进行增量备份，这一点，只有rsync可以做到，这也成为了，企业上常用的备份工具"><a href="#rsync一种远程数据同步的工具，他可以在线同步数据，来进行数据的备份，与我们常用的（cp-，scp-）-命令进行数据备份有区别，rsync-可以进行增量备份，这一点，只有rsync可以做到，这也成为了，企业上常用的备份工具" class="headerlink" title="rsync一种远程数据同步的工具，他可以在线同步数据，来进行数据的备份，与我们常用的（cp ，scp ） 命令进行数据备份有区别，rsync 可以进行增量备份，这一点，只有rsync可以做到，这也成为了，企业上常用的备份工具 "></a>rsync一种远程数据同步的工具，他可以在线同步数据，来进行数据的备份，与我们常用的（cp ，scp ） 命令进行数据备份有区别，rsync 可以进行增量备份，这一点，只有rsync可以做到，这也成为了，企业上常用的备份工具 <span id="more"></span></h2><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200308162726696.png" alt="image-20200308162726696"></p><h1 id="Rsync服务概念特性"><a href="#Rsync服务概念特性" class="headerlink" title="Rsync服务概念特性"></a>Rsync服务概念特性</h1><p>Rsync是一款开源的、快速的、多功能的、可实现<code>全量及增量</code>的本地或远程数据同步备份的优秀工具。并且可以不进行改变原有数据的属性信息，实现数据的备份迁移特性。Rsync软件适用于unix/linux/windows等多种操作系统平台。 Rsync是一个快速和非常通用的文件复制工具。它能本地复制，远程复制，或者远程守护进程方式复制。它提供了大量的参数来控制其行为的各个方面，并且允许非常灵活的方式来实现文件的传输复制。它以其delta-transfer算法闻名。减少通过网络数据发送数量，利用只发送源文件和目标文件之间的差异信息，从而实现数据的增量同步复制。</p><p>Rsync被广泛用于数据备份和镜像</p><p>，并且作为一种改进后的复制命令用于日常运维。</p><p>Rsync具备使本地和远程两台主机之间的<code>数据快速复制</code>，<code>远程备份的功能</code>，Rsync命令本身即可实现<code>异地主机复制数据</code>，功能类似scp又优于scp，scp每次都是<code>全量备份</code>，rsync可以实现<code>增量拷贝</code>（和scp一样都是基于ssh服务传输），Rsync软件还支持配置守护进程，实现异机数据复制。</p><p>增量复制是Rsync一特点，优于scp,cp命令。</p><h1 id="Rsync实现如下功能"><a href="#Rsync实现如下功能" class="headerlink" title="Rsync实现如下功能"></a><em>Rsync实现如下功能</em></h1><ul><li>本地数据同步复制，效果如cp</li><li>远程数据同步复制，如scp</li><li>本地数据删除，如rm</li><li>远程数据查看，如ls</li></ul><p><em>Rsync软件特性</em></p><ul><li>支持拷贝普通文件，特殊文件（link文件，设备文件）</li><li>支持排除指定文件、目录的同步功能（同步数据时，指定文件不同步）</li><li>能够保持原有文件所有属性均不变（stat查看的状态）</li><li>实现增量复制（只复制变化的数据，数据传输效率极高）</li><li>可以配合ssh、rcp、rsh等方式进行隧道加密文件传输（rsync本身不加密数据）</li><li>可以通过socket（进行通信文件）传输文件和数据（c/s架构）</li><li>支持匿名用户模式传输</li></ul><h1 id="增量传输"><a href="#增量传输" class="headerlink" title="增量传输"></a>增量传输</h1><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200308165915438.png" alt="image-20200308165915438"></p><p>Rsync软件的增量备份是一大特点，在备份复制数据时，Rsync通过其quick cheek算法，仅复制文件（容量、最后修改时间变化）的文件或是目录，也可以指定文件权限的变化复制，甚至可以复制一个文件里仅变化的内容，因此可以实现快速的备份复制数据。</p><p>Rsync在centos7系统上默认是3.x版本，效率更高，原理是一边比对差异，一边对差异的数据进行复制，比centos6上的Rsync 2.x更高效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看rsync版本</span><br><span class="line">[root@chaogelinux ~]# rsync --version</span><br><span class="line">rsync  version 3.1.2  protocol version 31</span><br><span class="line"></span><br><span class="line">yum install rsync -y</span><br></pre></td></tr></table></figure><h1 id="Rsync语法参数"><a href="#Rsync语法参数" class="headerlink" title="Rsync语法参数"></a>Rsync语法参数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">Rsync命令参数详解</span><br><span class="line"></span><br><span class="line">在对rsync服务器配置结束以后，下一步就需要在客户端发出rsync命令来实现将服务器端的文件备份到客户端来。rsync是一个功能非常强大的工具，其命令也有很多功能特色选项，我们下面就对它的选项一一进行分析说明。Rsync的命令格式可以为以下六种：</span><br><span class="line"></span><br><span class="line">　　rsync [OPTION]... SRC DEST</span><br><span class="line">　　rsync [OPTION]... SRC [USER@]HOST:DEST</span><br><span class="line">　　rsync [OPTION]... [USER@]HOST:SRC DEST</span><br><span class="line">　　rsync [OPTION]... [USER@]HOST::SRC DEST</span><br><span class="line">　　rsync [OPTION]... SRC [USER@]HOST::DEST</span><br><span class="line">　　rsync [OPTION]... rsync://[USER@]HOST[:PORT]/SRC [DEST]</span><br><span class="line">　　对应于以上六种命令格式，rsync有六种不同的工作模式：</span><br><span class="line">　　1)拷贝本地文件。当SRC和DES路径信息都不包含有单个冒号&quot;:&quot;分隔符时就启动这种工作模式。如：rsync -a /data /backup</span><br><span class="line">　　2)使用一个远程shell程序(如rsh、ssh)来实现将本地机器的内容拷贝到远程机器。当DST路径地址包含单个冒号&quot;:&quot;分隔符时启动该模式。如：rsync -avz *.c foo:src</span><br><span class="line">　　3)使用一个远程shell程序(如rsh、ssh)来实现将远程机器的内容拷贝到本地机器。当SRC地址路径包含单个冒号&quot;:&quot;分隔符时启动该模式。如：rsync -avz foo:src/bar /data</span><br><span class="line">　　4)从远程rsync服务器中拷贝文件到本地机。当SRC路径信息包含&quot;::&quot;分隔符时启动该模式。如：rsync -av root@172.16.78.192::www /databack</span><br><span class="line">　　5)从本地机器拷贝文件到远程rsync服务器中。当DST路径信息包含&quot;::&quot;分隔符时启动该模式。如：rsync -av /databack root@172.16.78.192::www</span><br><span class="line">    6)列远程机的文件列表。这类似于rsync传输，不过只要在命令中省略掉本地机信息即可。如：rsync -v rsync://172.16.78.192/www</span><br><span class="line"></span><br><span class="line">rsync参数的具体解释如下：</span><br><span class="line"></span><br><span class="line">-v, --verbose 详细模式输出</span><br><span class="line">-q, --quiet 精简输出模式</span><br><span class="line">-c, --checksum 打开校验开关，强制对文件传输进行校验</span><br><span class="line">-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD</span><br><span class="line">-r, --recursive 对子目录以递归模式处理</span><br><span class="line">-R, --relative 使用相对路径信息</span><br><span class="line">-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。</span><br><span class="line">--backup-dir 将备份文件(如~filename)存放在在目录下。</span><br><span class="line">-suffix=SUFFIX 定义备份文件前缀</span><br><span class="line">-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)</span><br><span class="line">-l, --links 保留软链结</span><br><span class="line">-L, --copy-links 想对待常规文件一样处理软链结</span><br><span class="line">--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结</span><br><span class="line">--safe-links 忽略指向SRC路径目录树以外的链结</span><br><span class="line">-H, --hard-links 保留硬链结     -p, --perms 保持文件权限</span><br><span class="line">-o, --owner 保持文件属主信息     -g, --group 保持文件属组信息</span><br><span class="line">-D, --devices 保持设备文件信息    -t, --times 保持文件时间信息</span><br><span class="line">-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间</span><br><span class="line">-n, --dry-run现实哪些文件将被传输</span><br><span class="line">-W, --whole-file 拷贝文件，不进行增量检测</span><br><span class="line">-x, --one-file-system 不要跨越文件系统边界</span><br><span class="line">-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节</span><br><span class="line">-e, --rsh=COMMAND 指定使用rsh、ssh方式进行数据同步</span><br><span class="line">--rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息</span><br><span class="line">-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件</span><br><span class="line">--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件</span><br><span class="line">--delete 删除那些DST中SRC没有的文件</span><br><span class="line">--delete-excluded 同样删除接收端那些被该选项指定排除的文件</span><br><span class="line">--delete-after 传输结束以后再删除</span><br><span class="line">--ignore-errors 及时出现IO错误也进行删除</span><br><span class="line">--max-delete=NUM 最多删除NUM个文件</span><br><span class="line">--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输</span><br><span class="line">--force 强制删除目录，即使不为空</span><br><span class="line">--numeric-ids 不将数字的用户和组ID匹配为用户名和组名</span><br><span class="line">--timeout=TIME IP超时时间，单位为秒</span><br><span class="line">-I, --ignore-times 不跳过那些有同样的时间和长度的文件</span><br><span class="line">--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间</span><br><span class="line">--modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0</span><br><span class="line">-T --temp-dir=DIR 在DIR中创建临时文件</span><br><span class="line">--compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份</span><br><span class="line">-P 等同于 --partial</span><br><span class="line">--progress 显示备份过程</span><br><span class="line">-z, --compress 对备份的文件在传输时进行压缩处理</span><br><span class="line">--exclude=PATTERN 指定排除不需要传输的文件模式</span><br><span class="line">--include=PATTERN 指定不排除而需要传输的文件模式</span><br><span class="line">--exclude-from=FILE 排除FILE中指定模式的文件</span><br><span class="line">--include-from=FILE 不排除FILE指定模式匹配的文件</span><br><span class="line">--version 打印版本信息</span><br><span class="line">--address 绑定到特定的地址</span><br><span class="line">--config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件</span><br><span class="line">--port=PORT 指定其他的rsync服务端口</span><br><span class="line">--blocking-io 对远程shell使用阻塞IO</span><br><span class="line">-stats 给出某些文件的传输状态</span><br><span class="line">--progress 在传输时现实传输过程</span><br><span class="line">--log-format=formAT 指定日志文件格式</span><br><span class="line">--password-file=FILE 从FILE中得到密码</span><br><span class="line">--bwlimit=KBPS 限制I/O带宽，KBytes per second      </span><br><span class="line">-h, --help 显示帮助信息</span><br></pre></td></tr></table></figure><h1 id="Rsync工作方式"><a href="#Rsync工作方式" class="headerlink" title="Rsync工作方式"></a>Rsync工作方式</h1><p>1本地数据传输</p><p>类似cp的复制，实现文件，目录的增量复制。</p><p>2.远程Shell数据传输</p><p>借助SSH服务在两台服务器之间传输，没有客户端/服务端之分，两台机器是相对的复制关系。</p><h2 id="本地的数据传输模式"><a href="#本地的数据传输模式" class="headerlink" title="本地的数据传输模式"></a>本地的数据传输模式</h2><p><em>语法模式</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync命令  参数   src源文件/目录    dest目标文件/目录</span><br></pre></td></tr></table></figure><p>1.本地文件复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 复制hosts文件</span><br><span class="line">[root@chaogelinux ~]# rsync /etc/hosts /tmp/</span><br></pre></td></tr></table></figure><p>2.复制目录内容</p><p>-r, –recursive 对子目录以递归模式处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 复制/data下所有内容到/tmp</span><br><span class="line">rsync -r /data/ /tmp/</span><br><span class="line"></span><br><span class="line"># 复制/data整个文件夹到/tmp</span><br><span class="line">rsync -r /data  /tmp   </span><br><span class="line"></span><br><span class="line">注意如上的区别</span><br></pre></td></tr></table></figure><p>3.删除文件夹数据，使用参数–delete</p><p>–delete 删除那些DST中SRC没有的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 新建空文件夹</span><br><span class="line">[root@chaogelinux ~]# mkdir /opt/null</span><br><span class="line"># 同步删除数据</span><br><span class="line">[root@chaogelinux ~]# rsync -r --delete /opt/null/ /tmp/</span><br></pre></td></tr></table></figure><p>4.清空文件内容，使用参数–delete，参数–delete必须和-r结合用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.echo &quot;超哥带你学Rsync&quot; &gt; /tmp/test.txt</span><br><span class="line">2.touch /tmp/null</span><br><span class="line">3.rsync -r --delete /tmp/null /tmp/test.txt</span><br></pre></td></tr></table></figure><p>5.查询文件和目录信息，如同ls -l</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.查询文件、文件夹信息</span><br><span class="line">[root@chaogelinux ~]# rsync /etc/hosts</span><br><span class="line">-rw-r--r--            248 2020/03/05 15:47:44 hosts</span><br><span class="line">[root@chaogelinux ~]# rsync /opt</span><br><span class="line">drwxr-xr-x          4,096 2020/03/08 17:17:55 opt</span><br></pre></td></tr></table></figure><h2 id="远程数据传输"><a href="#远程数据传输" class="headerlink" title="远程数据传输"></a>远程数据传输</h2><p>远程传输分为两种情况【拉取|推送】</p><p>拉取：远端服务器数据，拉取到本地</p><p>推送：本地数据发送给远程服务器</p><p><em>拉取pull</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line">rsync  option               user@host:src                   dest</span><br><span class="line">命令        可选参数        用户名@主机ip:源路径            本地路径</span><br></pre></td></tr></table></figure><p><em>推送push</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line">rsync        option        src            user@host:dest</span><br><span class="line">命令        参数            本地路径        用户@主机ip:目的路径</span><br></pre></td></tr></table></figure><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200308174234172.png" alt="image-20200308174234172"></p><p>1.拉取远程主机文件，拷贝到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.把远程主机的/etc/hosts文件，拷贝到本地/tmp</span><br><span class="line">rsync -av -e &#x27;ssh -p 22&#x27; root@123.206.16.61:/etc/hosts  /tmp</span><br><span class="line">-e, --rsh=COMMAND 指定使用rsh、ssh方式进行数据同步，若是默认22，可以不写该参数</span><br><span class="line">-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性</span><br><span class="line">-v, --verbose 详细模式输出</span><br><span class="line">-p，prot  后面指定端口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#执行结果</span><br><span class="line">[root@web01 tmp]# rsync -av -e &#x27;ssh -p 22&#x27; root@123.206.16.61:/etc/hosts  /tmp</span><br><span class="line">The authenticity of host &#x27;123.206.16.61 (123.206.16.61)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:CVwhwfUka2JLs1iD53HpLPrretR4pGltYRL6QB+5lyI.</span><br><span class="line">ECDSA key fingerprint is MD5:4b:41:6f:bd:84:ce:24:c3:70:d1:04:a1:5d:01:8d:34.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &#x27;123.206.16.61&#x27; (ECDSA) to the list of known hosts.</span><br><span class="line">root@123.206.16.61&#x27;s password:</span><br><span class="line">receiving incremental file list</span><br><span class="line">hosts</span><br><span class="line"></span><br><span class="line">sent 43 bytes  received 339 bytes  58.77 bytes/sec</span><br><span class="line">total size is 248  speedup is 0.65</span><br></pre></td></tr></table></figure><p>2.把本地的/etc/hosts文件推送到远程服务器的/tmp下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av /etc/hosts   root@123.206.16.61:/tmp/</span><br></pre></td></tr></table></figure><p>【提示】</p><ul><li>远程数据传输，指定SSH协议默认需要输入主机密码，可以配置SSH免密登录更为方便</li><li>工作环境下，采用rsync守护进程更为合适</li></ul><h2 id="守护进程传输模式"><a href="#守护进程传输模式" class="headerlink" title="守护进程传输模式"></a>守护进程传输模式</h2><p>守护进程传输模式是在客户端和服务端之间进行的数据复制。</p><p>服务端需要配置守护进程，在客户端执行命令，实现数据<code>拉取</code>和<code>推送</code>。</p><p>语法参数</p><p>【拉取语法】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.拉取模式语法，推荐使用，看清楚参数的符号！</span><br><span class="line">rsync        参数        user@host::src        dest</span><br><span class="line"></span><br><span class="line">2.拉取第二种</span><br><span class="line">rsync        参数        rsync://user@host:port/src</span><br></pre></td></tr></table></figure><p>【推送语法】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.推送语法</span><br><span class="line">rsync  参数  源路径    user@host::dest</span><br><span class="line"></span><br><span class="line">2.推送第二种</span><br><span class="line">rsync  参数  src    rsync://user@host:port/dest</span><br></pre></td></tr></table></figure><p>通过语法可知，拉取和推送数据的语法几乎是相同的</p><p>想要通过守护传输模式进行复制传输数据，还得额外部署Rsync Daemon服务才行</p><h2 id="守护进程传输模式实战"><a href="#守护进程传输模式实战" class="headerlink" title="守护进程传输模式实战"></a>守护进程传输模式实战</h2><p>守护进程传输模式是在客户端和服务端之间进行的数据复制。</p><p>服务端需要配置守护进程，在客户端执行命令，实现数据<code>拉取</code>和<code>推送</code>。</p><p>语法参数</p><p>【拉取语法】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.拉取模式语法，推荐使用，看清楚参数的符号！</span><br><span class="line">rsync        参数        user@host::src        dest</span><br><span class="line"></span><br><span class="line">2.拉取第二种</span><br><span class="line">rsync        参数        rsync://user@host:port/src</span><br></pre></td></tr></table></figure><p>【推送语法】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.推送语法</span><br><span class="line">rsync  参数  源路径    user@host::dest</span><br><span class="line"></span><br><span class="line">2.推送第二种</span><br><span class="line">rsync  参数  src    rsync://user@host:port/dest</span><br></pre></td></tr></table></figure><p>通过语法可知，拉取和推送数据的语法几乎是相同的</p><p>想要通过守护传输模式进行复制传输数据，还得额外部署Rsync Daemon服务才行</p><h2 id="守护进程传输模式实战-1"><a href="#守护进程传输模式实战-1" class="headerlink" title="守护进程传输模式实战"></a>守护进程传输模式实战</h2><h3 id="【准备三台linux服务器】"><a href="#【准备三台linux服务器】" class="headerlink" title="【准备三台linux服务器】"></a>【准备三台linux服务器】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.准备3台linux机器</span><br><span class="line"></span><br><span class="line">老师机器的环境</span><br><span class="line">192.168.178.140 web01            Nginx web服务器</span><br><span class="line">192.168.178.139 backup    Rsync备份存储服务器</span><br><span class="line">192.168.178.138  nfs01            NFS存储服务器</span><br></pre></td></tr></table></figure><p>三台机器的终端</p><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200311151031364.png" alt="image-20200311151031364"></p><h4 id="【环境部署，Rsync备份服务器】"><a href="#【环境部署，Rsync备份服务器】" class="headerlink" title="【环境部署，Rsync备份服务器】"></a>【环境部署，Rsync备份服务器】</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.准备linux系统环境  </span><br><span class="line">[root@chaoge_linux ~]# cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.7.1908 (Core)</span><br><span class="line"></span><br><span class="line">[root@chaoge_linux ~]# uname -r    # 查看内核版本</span><br><span class="line">3.10.0-1062.9.1.el7.x86_64</span><br><span class="line">[root@chaoge_linux ~]# uname -m    # 查看系统架构</span><br><span class="line">x86_64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.是否安装了rsync软件，若是未安装可以yum安装即可  </span><br><span class="line">[root@chaogelinux ~]# rpm -qa rsync</span><br><span class="line">rsync-3.1.2-6.el7_6.1.x86_64</span><br></pre></td></tr></table></figure><p>【配置需求】</p><p>在Rsync备份机器上以rsync守护进程的方式部署Rsync服务，使得所有Rsync节点的客户端主机，可以把本地数据通过rsync命令备份数据到BACKUP服务器上。</p><p>【备份架构拓扑图】</p><p>以Rsync守护进程模式部署架构，并且以远程数据同步方式由客户端节点向服务器端推送数据</p><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200311102610471.png" alt="image-20200311102610471"></p><h2 id="Rsync守护进程客户端访问原理图"><a href="#Rsync守护进程客户端访问原理图" class="headerlink" title="Rsync守护进程客户端访问原理图"></a>Rsync守护进程客户端访问原理图</h2><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200311143704499.png" alt="image-20200311143704499"></p><h2 id="Rsync服务端部署一"><a href="#Rsync服务端部署一" class="headerlink" title="Rsync服务端部署一"></a>Rsync服务端部署一</h2><table><thead><tr><th>步骤</th><th>举例</th><th>Rsync步骤</th></tr></thead><tbody><tr><td>1</td><td>确认是否有个房间可以当做仓库</td><td>确认Rsync程序是否安装</td></tr><tr><td>2</td><td>装修改造房间为仓库</td><td>修改Rsync配置文件信息</td></tr><tr><td>3</td><td>确认仓库的管理员</td><td>创建负责Rsync服务的虚拟用户</td></tr><tr><td>4</td><td>仓库中有柜子可以存储，管理员可以打开柜子</td><td>创建Rsync服务备份数据的目录，进行对虚拟用户授权</td></tr><tr><td>5</td><td>仓库要提升安全，上个锁</td><td>配置Rsync服务安全相关密钥，且对密钥文件授权600</td></tr><tr><td>6</td><td>确认仓库可以用了</td><td>启动Rsync服务，让其可以工作</td></tr><tr><td>7</td><td>确定仓库每天开门工作</td><td>设置Rsync服务开机启动</td></tr></tbody></table><p>【第一步，修改rsyncd.conf配置文件】</p><p>Rsync守护进程配置在BACKUP服务器上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.确认安装rsync服务</span><br><span class="line">yum install rsync -y </span><br><span class="line"></span><br><span class="line">2.修改配置文件，默认是 /etc/rsyncd.conf</span><br><span class="line">写入如下参数</span><br><span class="line">######by chaoge   rsyncd.conf#在最低行写入如下的数据</span><br><span class="line"></span><br><span class="line">uid = rsync#指定rsync服务运行的时候，想磁盘写入数据和读取数据的用户是谁</span><br><span class="line">gid = rsync# 指定rsync服务运行的时候，向磁盘进行读取和写入操作的操作者</span><br><span class="line">fake super = yes # 无需让rsync以root身份运行即可保存文件完整属性</span><br><span class="line">use chroot = no# 进行数据同步存数时，有关安全的参数，默认企业都是内网rsync同步，这个参数可以关闭了</span><br><span class="line">max connections = 200# 定义向备份服务器进行数据存储的并发连接数</span><br><span class="line">timeout = 300# 定义与备份服务器建立的网络连接，在多长时间没有数据传输时，就释放连接</span><br><span class="line">pid file = /var/run/rsyncd.pid# rsync服务运行时，用于记录rsync进程id号的文件</span><br><span class="line">lock file = /var/run/rsync.lock# 定义锁文件，主要和上述的max conn连接数进行并发控制</span><br><span class="line">log file = /var/log/rsyncd.log# 定义日志位置</span><br><span class="line">ignore errors# 在进行数据备份传输过程过程中，忽略一些I/O产生的传输错误</span><br><span class="line">read only = false# 设置对备份的目录的具有读写权限，即将只读模式进行关闭</span><br><span class="line">list = false# 确认是否可以将服务配置的模块信息，在客户端可以查看显示</span><br><span class="line">hosts allow = 192.168.31.0/24# 允许那些网段可以访问rsync</span><br><span class="line">hosts deny = 0.0.0.0/32# 拒绝所有的其他IP访问</span><br><span class="line">auth users = rsync_backup#用于链接rsync服务端的验证用户名</span><br><span class="line">secrets file = /etc/rsync.password# 定义密码文件路径</span><br><span class="line">[backup]# 定义区、断的名字，也是用于定义备份模块的信息，可以写入多个</span><br><span class="line">comment = This is tao backup!</span><br><span class="line">path = /backup/</span><br></pre></td></tr></table></figure><h2 id="在rsync服务端坐好环境配置工作"><a href="#在rsync服务端坐好环境配置工作" class="headerlink" title="在rsync服务端坐好环境配置工作"></a>在rsync服务端坐好环境配置工作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1.根据rsyncd.conf中定义的用户，目录，等信息，进行创建</span><br><span class="line">useradd rsync -s /sbin/nologin -M;</span><br><span class="line">mkdir -p /backup</span><br><span class="line">chown -R  rsync.rsync /backup</span><br><span class="line">[root@nginx_124 ~]# ll -d /backup</span><br><span class="line">drwxr-xr-x 2 rsync rsync 6 10月  2 15:39 /backup</span><br><span class="line"></span><br><span class="line">2.配置用于rsync进行复制验证的账户，密码，文件等信息</span><br><span class="line">[root@nginx_124 ~]# echo &quot;rsync_backup:123qwe&quot; &gt; /etc/rsync.password</span><br><span class="line">[root@nginx_124 ~]# cat /etc/rsync.password </span><br><span class="line">rsync_bakup:123qwe</span><br><span class="line">[root@nginx_124 ~]# chmod 600 /etc/rsync.password </span><br><span class="line">[root@nginx_124 ~]# </span><br><span class="line">[root@nginx_124 ~]# ll /etc/rsync.password </span><br><span class="line">-rw------- 1 root root 19 10月  4 13:45 /etc/rsync.password</span><br><span class="line"></span><br><span class="line">3.启动rsync服务，以及检查服务开机自启</span><br><span class="line">[root@nginx_124 ~]# systemctl start rsyncd</span><br><span class="line">[root@nginx_124 ~]# systemctl status rsyncd</span><br><span class="line">● rsyncd.service - fast remote file copy program daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/rsyncd.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 一 2021-10-04 11:17:59 CST; 2h 31min ago</span><br><span class="line"> Main PID: 831 (rsync)</span><br><span class="line">   CGroup: /system.slice/rsyncd.service</span><br><span class="line">           └─831 /usr/bin/rsync --daemon --no-detach</span><br><span class="line"></span><br><span class="line">10月 04 11:17:59 nginx_124 systemd[1]: Started fast remote file copy program daemon.</span><br><span class="line">10月 04 11:17:59 nginx_124 rsyncd[831]: rsyncd version 3.1.2 starting, listening on port 873</span><br><span class="line">[root@nginx_124 ~]# systemctl enable rsyncd</span><br><span class="line"></span><br><span class="line">4.检查rsync服务端的进程和端口</span><br><span class="line">[root@nginx_124 ~]# ps -ef |grep rsync</span><br><span class="line">root        831      1  0 11:19 ?        00:00:00 /usr/bin/rsync --daemon --no-detach</span><br><span class="line">root       1601   1449  0 13:49 pts/0    00:00:00 grep --color=auto rsync</span><br><span class="line">[root@nginx_124 ~]# netstat -tunlp |grep rsync</span><br><span class="line">tcp        0      0 0.0.0.0:873             0.0.0.0:*               LISTEN      831/rsync           </span><br><span class="line">tcp6       0      0 :::873                  :::*                    LISTEN      831/rsync       </span><br></pre></td></tr></table></figure><h2 id="rsync客户端部署操作"><a href="#rsync客户端部署操作" class="headerlink" title="rsync客户端部署操作"></a>rsync客户端部署操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.确认rsync命令是否存在</span><br><span class="line">2.创建rsync服务断连接的账号密码文件，以及授权</span><br><span class="line">3.注意rsync客户端要和服务断的配置区别开</span><br></pre></td></tr></table></figure><p>配置笔记</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.安装rsync服务</span><br><span class="line">yum  install  rsync  -y</span><br><span class="line">[root@php_123 ~]# rsync --version</span><br><span class="line">rsync  version 3.1.2  protocol version 31</span><br><span class="line"></span><br><span class="line">2.创建用于和rsync链接的账密文件</span><br><span class="line">[root@php_123 ~]# echo &quot;123qwe&quot; &gt; /etc/rsync.password</span><br><span class="line">[root@php_123 ~]# cat /etc/rsync.password </span><br><span class="line">123qwe</span><br><span class="line"></span><br><span class="line">3.对秘密文件授权</span><br><span class="line">[root@php_123 ~]# chmod 600 /etc/rsync.password </span><br><span class="line">[root@php_123 ~]# ll /etc/rsync.password </span><br><span class="line">-rw------- 1 root root 7 10月  4 13:56 /etc/rsync.password</span><br><span class="line"></span><br><span class="line">4.除了使用这种密码文件的形式，rsync也支持使用变量的方式，省略指定密码验证</span><br><span class="line">[root@php_123 ~]# export RSYNC_PASSWORD=123qwe</span><br><span class="line">[root@php_123 ~]# echo $RSYNC_PASSWORD</span><br><span class="line">123qwe</span><br><span class="line"></span><br><span class="line">5.永久变量生效</span><br><span class="line">[root@php_123 ~]# echo &quot;export RSYNC_PASSWORD=123qwe&quot;  &gt;&gt;  /etc/profile </span><br><span class="line">[root@php_123 ~]# tail -1 /etc/profile</span><br><span class="line">export RSYNC_PASSWORD=123qwe</span><br></pre></td></tr></table></figure><p>至此，rsync服务端以及以守护进程模式运行了，客户端的环境准备也弄好了</p><h1 id="测试rsync数据推拉"><a href="#测试rsync数据推拉" class="headerlink" title="测试rsync数据推拉"></a>测试rsync数据推拉</h1><h3 id="推送：客户端同步文件给服务端"><a href="#推送：客户端同步文件给服务端" class="headerlink" title="推送：客户端同步文件给服务端"></a>推送：客户端同步文件给服务端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.从客户端推送 /opt目录 同步到服务端Rsync指定的目录（/bakcup）下</span><br><span class="line">[root@nfs01 ~]# rsync -avzP /opt  rsync_backup@192.168.178.139::backup --password-file=/etc/rsync.password</span><br><span class="line">参数解释</span><br><span class="line">-avzP /opt</span><br><span class="line">-a  保持文件原有属性</span><br><span class="line">-v    显示传输细节情况</span><br><span class="line">-z    对传输数据压缩传输</span><br><span class="line">-P    显示文件传输的进度信息</span><br><span class="line">/opt  要推送的本地目录，注意/opt/ 表示推送该目录下内容</span><br><span class="line"></span><br><span class="line">选项解释</span><br><span class="line">rsync_backup@192.168.178.139::backup --password-file=/etc/rsync.password</span><br><span class="line"></span><br><span class="line"># 验证rsync服务端参数 grep &#x27;auth user&#x27; /etc/rsyncd.conf</span><br><span class="line">rsync_backup    rsync同步数据的虚拟认证用户 </span><br><span class="line"># 是rsync服务端配置文件中定义的模块名  /etc/rsyncd.conf </span><br><span class="line">@192.168.178.139::backup   要推送的目的地ip地址以及模块名称</span><br><span class="line"></span><br><span class="line">--password-file=/etc/rsync.password   #指定密码文件</span><br><span class="line">2.也可以直接使用密码变量，进行同步</span><br><span class="line">[root@nfs01 ~]# tail -1 /etc/profile</span><br><span class="line">export RSYNC_PASSWORD=123qwe</span><br><span class="line">[root@nfs01 ~]# rsync -avzP /etc/ rsync_backup@192.168.178.139::backup</span><br></pre></td></tr></table></figure><h3 id="拉取数据的操作：从rsync服务端把数据拉取到本地来"><a href="#拉取数据的操作：从rsync服务端把数据拉取到本地来" class="headerlink" title="拉取数据的操作：从rsync服务端把数据拉取到本地来"></a>拉取数据的操作：从rsync服务端把数据拉取到本地来</h3><p>把rsync服务端的备份目录中的数据，拷贝到客户端的某个目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.在客户端执行</span><br><span class="line">[root@php_123 mytools]# rsync -avzP rsync_backup@192.168.31.124::backup /opt/ --password-file=/etc/rsync.password </span><br><span class="line"></span><br><span class="line">2.此时也就是把rsync服务端的/backup目录下的内容，同步到客户端的/opt目录下了</span><br><span class="line">[root@php_123 mytools]# ls /opt/</span><br><span class="line">100         14.txt  1.txt   25     30  36     41  47     52  58     63  69     74  7.txt  85     90  96</span><br><span class="line">10.txt      15.txt  20.txt  26     31  37     42  48     53  59     64  6.txt  75  80     86     91  97</span><br><span class="line">11.txt      16.txt  21.txt  27     32  38     43  49     54  5.txt  65  70     76  81     87     92  98</span><br><span class="line">&#123;1.22&#125;.txt  17.txt  22.txt  28     33  39     44  4.txt  55  60     66  71     77  82     88     93  99</span><br><span class="line">12.txt      18.txt  23      29     34  3.txt  45  50     56  61     67  72     78  83     89     94  9.txt</span><br><span class="line">13.txt      19.txt  24      2.txt  35  40     46  51     57  62     68  73     79  84     8.txt  95</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="注意同步问题"><a href="#注意同步问题" class="headerlink" title="注意同步问题"></a>注意同步问题</h1><h2 id="Rsync服务端排错思路"><a href="#Rsync服务端排错思路" class="headerlink" title="Rsync服务端排错思路"></a>Rsync服务端排错思路</h2><ol><li>检查rsync服务端的配置文件路径是否正确：<code>/etc/rsyncd.conf</code></li><li>查看配置文件的<code>host allow</code>,<code>host deny</code>允许的ip网段是否允许客户端访问</li><li>查看配置文件中的path参数路径是否存在，权限是否正确（和配置文件的UUID参数对应）</li><li>查看rsync服务是否启动，端口、进程是否存活</li><li>查看iptables防火墙、selinux是否允许rsync服务通过，或是关闭</li><li>查看服务端rsync配置文件的密码文件，权限是否600，格式，语法是否正确，且和配置文件的<code>secrect files</code>参数对应</li><li>如果是推送数据，要查看配置rsyncd.conf中的用户对该<code>rsync模块</code>下的文件是否可以读取</li></ol><h2 id="Rsync客户端排错"><a href="#Rsync客户端排错" class="headerlink" title="Rsync客户端排错"></a>Rsync客户端排错</h2><ol><li>查看rsync客户端配置的密码文件权限是否600，密码文件格式是否正确，是否和服务端的密码一致</li><li>尝试telnet连接rsync服务端的<code>873</code>端口，检测服务是否可以连接</li><li>客户端执行命令语法要检查，细心</li></ol><h3 id="【客户端的错误现象：No-route-to-host】"><a href="#【客户端的错误现象：No-route-to-host】" class="headerlink" title="【客户端的错误现象：No route to host】"></a>【客户端的错误现象：No route to host】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup</span><br><span class="line"></span><br><span class="line">rsync: failed to connect to 172.16.1.41: No route to host (113)</span><br><span class="line"></span><br><span class="line">rsync error: error in socket IO (code 10) at clientserver.c(124) [sender=3.0.6]</span><br></pre></td></tr></table></figure><p>办法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.关闭iptables，或者添加规则</span><br><span class="line">iptables -F</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line">2.关闭selinux</span><br><span class="line">[root@nfs01 ~]# setenforce 0  #临时关闭</span><br><span class="line">[root@rsync01 ~]# sed -i &#x27;s/enforcing/disabled/g&#x27; /etc/selinux/config  #重启永久关闭</span><br></pre></td></tr></table></figure><h3 id="【注意命令同步的细节】"><a href="#【注意命令同步的细节】" class="headerlink" title="【注意命令同步的细节】"></a>【注意命令同步的细节】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.同步整个文件夹</span><br><span class="line">[root@nfs01 ~]# rsync -avzP /etc rsync_backup@192.168.178.139::backup</span><br><span class="line"></span><br><span class="line">2.同步文件夹下内容</span><br><span class="line">[root@nfs01 ~]# rsync -avzP /etc/ rsync_backup@192.168.178.139::backup</span><br></pre></td></tr></table></figure><h3 id="【ERROR-The-remote-path-must-start-with-a-module-name-not-a-】"><a href="#【ERROR-The-remote-path-must-start-with-a-module-name-not-a-】" class="headerlink" title="【ERROR: The remote path must start with a module name not a /】"></a>【ERROR: The remote path must start with a module name not a /】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rsync客户端执行rsync命令错误：</span><br><span class="line"></span><br><span class="line">客户端的错误现象：  </span><br><span class="line"></span><br><span class="line">[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::/backup</span><br><span class="line"></span><br><span class="line">ERROR: The remote path must start with a module name not a /</span><br><span class="line"></span><br><span class="line">rsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6]</span><br></pre></td></tr></table></figure><p>办法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原因：客户端命令敲错了</span><br><span class="line">rsync命令语法理解错误，::/backup是错误的语法，应该为::backup(rsync模块)</span><br></pre></td></tr></table></figure><h3 id="【-ERROR-auth-failed-on-module-backup】"><a href="#【-ERROR-auth-failed-on-module-backup】" class="headerlink" title="【@ERROR: auth failed on module backup】"></a>【@ERROR: auth failed on module backup】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">客户端的错误现象：</span><br><span class="line"></span><br><span class="line">[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup</span><br><span class="line"></span><br><span class="line">Password:</span><br><span class="line"></span><br><span class="line">@ERROR: auth failed on module backup</span><br><span class="line"></span><br><span class="line">rsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6]</span><br></pre></td></tr></table></figure><p>办法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.密码文件错误/etc/rsync.password</span><br><span class="line">2.密码文件参数和实际的密码文件名不一致，检查secrets file = /etc/rsync.password</span><br><span class="line">3.密码文件权限不对 ll /etc/rsync.password  不是600</span><br><span class="line">4.检查免密文件，是否手误</span><br><span class="line">[root@rsync01 ~]# cat /etc/rsync.password</span><br><span class="line">rsync_backup:chaoge</span><br><span class="line"></span><br><span class="line">5.rsync客户端的密码文件写错，只需要写入密码即可</span><br><span class="line">[root@nfs01 ~]# cat /etc/rsync.password</span><br><span class="line">chaoge</span><br></pre></td></tr></table></figure><h3 id="【-ERROR-Unknown-module-‘backup’】"><a href="#【-ERROR-Unknown-module-‘backup’】" class="headerlink" title="【@ERROR: Unknown module ‘backup’】"></a>【@ERROR: Unknown module ‘backup’】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup</span><br><span class="line"></span><br><span class="line">@ERROR: Unknown module &#x27;backup&#x27;</span><br><span class="line"></span><br><span class="line">rsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6]</span><br></pre></td></tr></table></figure><p>办法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">异常问题解决：</span><br><span class="line"></span><br><span class="line">1、 /etc/rsyncd.conf配置文件模块名称书写错误</span><br><span class="line"></span><br><span class="line">2、配置文件中网段限制不对</span><br></pre></td></tr></table></figure><h3 id="【Permission-denied】"><a href="#【Permission-denied】" class="headerlink" title="【Permission denied】"></a>【Permission denied】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup</span><br><span class="line"></span><br><span class="line">Password:</span><br><span class="line"></span><br><span class="line">sending incremental file list</span><br><span class="line"></span><br><span class="line">hosts</span><br><span class="line"></span><br><span class="line">rsync: mkstemp &quot;.hosts.5z3AOA&quot; (in backup) failed: Permission denied (13)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sent 196 bytes  received 27 bytes  63.71 bytes/sec</span><br><span class="line"></span><br><span class="line">total size is 349  speedup is 1.57</span><br><span class="line"></span><br><span class="line">rsync error: some files/attrs were not transferred (see previous errors) (code 23) at main.c(1039) [sender=3.0.6]</span><br></pre></td></tr></table></figure><p>办法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 共享目录的属主和属组不正确，不是rsync</span><br><span class="line"></span><br><span class="line">2. 共享目录的权限不正确，不是755</span><br><span class="line"></span><br><span class="line">3.注意防火墙，selinux的关闭</span><br></pre></td></tr></table></figure><h3 id="【chdir-failed-】"><a href="#【chdir-failed-】" class="headerlink" title="【chdir failed 】"></a>【chdir failed 】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup</span><br><span class="line"></span><br><span class="line">Password:</span><br><span class="line"></span><br><span class="line">@ERROR: chdir failed</span><br><span class="line"></span><br><span class="line">rsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6]</span><br></pre></td></tr></table></figure><p>办法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">异常问题解决：</span><br><span class="line"></span><br><span class="line">1. 备份存储目录没有建立</span><br><span class="line"></span><br><span class="line">2. 建立的备份存储目录和配置文件定义不一致</span><br></pre></td></tr></table></figure><h3 id="【invalid-uid-rsync】"><a href="#【invalid-uid-rsync】" class="headerlink" title="【invalid uid rsync】"></a>【invalid uid rsync】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup</span><br><span class="line"></span><br><span class="line">Password:</span><br><span class="line"></span><br><span class="line">@ERROR: invalid uid rsync</span><br><span class="line"></span><br><span class="line">rsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6]</span><br></pre></td></tr></table></figure><p>办法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">异常问题解决：</span><br><span class="line"></span><br><span class="line">rsync服务对应rsync虚拟用户不存在了</span><br></pre></td></tr></table></figure><h3 id="客户端有-etc-rsync-password依旧需要输入密码"><a href="#客户端有-etc-rsync-password依旧需要输入密码" class="headerlink" title="客户端有/etc/rsync.password依旧需要输入密码"></a>客户端有/etc/rsync.password依旧需要输入密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.密码文件也得是600权限</span><br><span class="line">2.密码文件名字是否正常</span><br></pre></td></tr></table></figure><h3 id="【Connection-refused-111-】"><a href="#【Connection-refused-111-】" class="headerlink" title="【Connection refused (111)】"></a>【Connection refused (111)】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy-muban ~]#  rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup</span><br><span class="line"></span><br><span class="line">rsync: failed to connect to 172.16.1.41: Connection refused (111)</span><br><span class="line"></span><br><span class="line">rsync error: error in socket IO (code 10) at clientserver.c(124) [sender=3.0.6]</span><br></pre></td></tr></table></figure><p>办法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.检查防火墙，selinux的关闭</span><br><span class="line">2.检查rsync服务端rsyncd是否开启</span><br></pre></td></tr></table></figure><h1 id="Rync扩展"><a href="#Rync扩展" class="headerlink" title="Rync扩展"></a>Rync扩展</h1><h1 id="rsync多模块"><a href="#rsync多模块" class="headerlink" title="rsync多模块"></a>rsync多模块</h1><p>修改rsyncd.conf住配置文件，在最低行写入如下信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[myweb]</span><br><span class="line">comment = This is tao web static</span><br><span class="line">path = /web_static/</span><br></pre></td></tr></table></figure><p>修改完配置文件以后，要穿见目录与权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx_124 /]# mkdir /web_static</span><br><span class="line">[root@nginx_124 /]# chown -R rsync.rsync /web_static/</span><br><span class="line">[root@nginx_124 /]# ll -d /web_static/</span><br><span class="line">drwxr-xr-x 2 rsync rsync 6 10月  4 15:30 /web_static/</span><br></pre></td></tr></table></figure><p>重启rsync服务端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx_124 /]# systemctl restart rsyncd</span><br><span class="line">[root@nginx_124 /]# systemctl status rsyncd</span><br><span class="line">● rsyncd.service - fast remote file copy program daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/rsyncd.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 一 2021-10-04 15:31:22 CST; 6s ago</span><br><span class="line"> Main PID: 1788 (rsync)</span><br><span class="line">   CGroup: /system.slice/rsyncd.service</span><br><span class="line">           └─1788 /usr/bin/rsync --daemon --no-detach</span><br><span class="line"></span><br><span class="line">10月 04 15:31:22 nginx_124 systemd[1]: Started fast remote file copy program daemon.</span><br></pre></td></tr></table></figure><p>在客户端进行rsync测试，和新的模块进行数据同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.再次和backup模块进行数据推拉</span><br><span class="line">推送数据，把客户端本地的数据，推送给服务端</span><br><span class="line">[root@php_123 opt]# rsync -azP /opt   rsync_backup@192.168.31.124::backup/test   </span><br><span class="line"></span><br><span class="line">拉取数据，拉取backup模块下的数据</span><br><span class="line">[root@php_123 opt]# rsync -avzP  rsync_backup@192.168.31.124::backup/test   /tmp/123   </span><br></pre></td></tr></table></figure><p>针对第二个my_web模块进行数据推拉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.推送数据</span><br><span class="line">[root@php_123 opt]# rsync -avzP   /tmp/123   rsync_backup@192.168.31.124::myweb --password-file=/etc/rsync.password</span><br><span class="line">2.拉取数据</span><br><span class="line">[root@php_123 opt]# rsync -avzP   rsync_backup@192.168.31.124::myweb  /opt</span><br></pre></td></tr></table></figure><h1 id="rsync指定目录和文件进行排除复制"><a href="#rsync指定目录和文件进行排除复制" class="headerlink" title="rsync指定目录和文件进行排除复制"></a>rsync指定目录和文件进行排除复制</h1><p>1.准备好rsync服务端，在服务断中准备一些数据，当前要操作的服务端，备份模块式myweb</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@php_123 opt]# tree</span><br><span class="line">.</span><br><span class="line">├── a</span><br><span class="line">│   └── 1.txt</span><br><span class="line">├── b</span><br><span class="line">│   └── 2.txt</span><br><span class="line">├── c</span><br><span class="line">│   └── 3.txt</span><br><span class="line">└── d</span><br><span class="line">    └── 4.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.在客户端上拉取文件，命令多加一个排他的参数，排除文件或目录</p><p>–exclude=文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@php_123 opt]# rsync --exclude=a  --exclude=b/1.txt  --exclude=d -avzP sync_backup@192.168.31.124::myweb  /opt/  </span><br></pre></td></tr></table></figure><h2 id="方法二，在Rsync服务端配置"><a href="#方法二，在Rsync服务端配置" class="headerlink" title="方法二，在Rsync服务端配置"></a>方法二，在Rsync服务端配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.修改rsync服务端配置文件，添加如下配置，排除指定目录</span><br><span class="line">exclude=a c b/2</span><br><span class="line">  </span><br><span class="line">2.重启服务</span><br><span class="line">[root@rsync01 backup]# systemctl restart rsyncd</span><br></pre></td></tr></table></figure><p>3.在客户端验证拉取，仍然能够看到同样的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]# rsync --exclude=a --exclude=b/2  --exclude=c -avzP rsync_backup@192.168.178.148::backup /mnt --password-file=/etc/rsync.password^C</span><br><span class="line">[root@nfs01 ~]#</span><br><span class="line">[root@nfs01 ~]#</span><br><span class="line">[root@nfs01 ~]# rsync -avzP rsync_backup@192.168.178.148::backup /mnt</span><br></pre></td></tr></table></figure><h1 id="rsync数据同步之无差异数据复制"><a href="#rsync数据同步之无差异数据复制" class="headerlink" title="rsync数据同步之无差异数据复制"></a>rsync数据同步之无差异数据复制</h1><p>【问题背景】</p><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200312172538549.png" alt="image-20200312172538549"></p><p>【无差异复制】</p><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200312172756937.png" alt="image-20200312172756937"></p><p>实现该同步方式，主要是使用rsync的<code>--delete</code>参数</p><p>所谓无差异复制，指的是<code>无论拉取，还是推送，都保持两边的数据完全一致</code>，也就删除其他多余文件的参数</p><p>【1.本地推送式删除】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 保持/mnt下内容和/tmp完全一致，删除其他多余文件</span><br><span class="line">[root@rsync01 tmp]# rsync -avzP --delete /tmp/  /mnt/</span><br></pre></td></tr></table></figure><p>【2.拉取数据无差异同步】</p><p>注意rsyncd.conf配置文件，之前配置过<code>排除文件的参数</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avzP --delete rsync_backup@192.168.178.148::backup /mnt/ --password-file=/etc/rsync.password</span><br></pre></td></tr></table></figure><p><strong>再次强调，<code>--delete</code>参数就是保证<code>客户端</code>和<code>服务端</code>的数据完全一致，这可能是个危险的命令！！</strong></p><p>【3.推送数据无差异同步】</p><p><strong>也就是将本地的目录和远程服务端的目录保持一致，使用不当可能会造成远程服务器的备份数据丢失！！小心使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]# rsync -avz  --delete /tmp/ rsync_backup@192.168.178.157::backup --password-file=/etc/rsync.password[root@nfs01 ~]# rsync -avz  --delete /tmp/ rsync_backup@192.168.178.157::backup --password-file=/etc/rsync.password</span><br></pre></td></tr></table></figure><h3 id="–delete参数总结与生产环境"><a href="#–delete参数总结与生产环境" class="headerlink" title="–delete参数总结与生产环境"></a>–delete参数总结与生产环境</h3><ul><li>Rsync推送企业工作场景：数据备份、上传</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">本地有的资料，远端机器完全一致</span><br><span class="line">在使用场景是备份、上传情况下，一般不用加上--delete参数，除非是NFS服务的实施复制，数据必须完全一致性</span><br></pre></td></tr></table></figure><ul><li>Rsync拉取场景：代码发布、下载</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rsync无差异同步还可以用于负载均衡下的Web服务器之间的同步，或者NFS共享数据的同步</span><br></pre></td></tr></table></figure><h2 id="Rsync断点续传"><a href="#Rsync断点续传" class="headerlink" title="Rsync断点续传"></a>Rsync断点续传</h2><p>Rsync支持大文件断点续传，参数如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--partial  </span><br><span class="line">默认情况rsync传输中断后，将会删除所有部分传输的文件，某些情况下用户希望能保留已经传输的内容，该参数告知rsync保留部分已传输的文件，可以使得剩余文件部分传输</span><br><span class="line"></span><br><span class="line">--partial-dir=DIR</span><br><span class="line">保留部分传输文件，这是个更好的参数，能够指定目录保存部分数据，而不是写入目标文件</span><br><span class="line">下次传输的时候，rsync将使用该目录的数据，来恢复整体数据传输，结束后删除该目录</span><br></pre></td></tr></table></figure><p>【断点续传案例】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.加上断点续传指定目录参数，传输中断，部分数据也保存在了指定目录,传输结束后，会删除该文件</span><br><span class="line">[root@nfs01 tmp]# rsync -avzP --partial-dir=/tmp/ /tmp/1  rsync_backup@192.168.178.157::backup</span><br></pre></td></tr></table></figure><h2 id="Rsync限速"><a href="#Rsync限速" class="headerlink" title="Rsync限速"></a>Rsync限速</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">限速参数</span><br><span class="line">--bwlimit=KBPS</span><br><span class="line">该参数允许最大传输速率是多少KB/s，设置为0则不限速</span><br></pre></td></tr></table></figure><p>在某公司，白天高峰期某DBA人员在数据库服务器通过rsync复制百G数据到备份服务器，导致数据库服务器带宽占满，造成用户无法访问。</p><p>这就应该用rsync限速功能，限制复制速度在带宽的1/3这样，就能够解决该问题</p><p>当然，尽量别在高峰期做大数据复制行为！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.快四生成1G文件</span><br><span class="line">dd if=/dev/zero of=test1  bs=10M count=128</span><br><span class="line"></span><br><span class="line">2.不限速传输形式</span><br><span class="line">[root@nfs01 tmp]# rsync -avzP /tmp/test1 rsync_backup@192.168.178.157::backup</span><br><span class="line">sending incremental file list</span><br><span class="line">test1</span><br><span class="line">    495,026,176  36%   91.26MB/s    0:00:09  ^C</span><br><span class="line">rsync error: received SIGINT, SIGTERM, or SIGHUP (code 20) at rsync.c(638) [sender=3.1.2]</span><br><span class="line"></span><br><span class="line">3.限速传输</span><br><span class="line">[root@nfs01 tmp]# rsync -avzP --bwlimit=10 /tmp/  rsync_backup@192.168.178.157::backup</span><br></pre></td></tr></table></figure><h1 id="生产经验"><a href="#生产经验" class="headerlink" title="生产经验"></a>生产经验</h1><p>rsync默认增量复制，与oss的数据复制的时候，注意参数，无法用-a参数，因为涉及到权限问题，-a是保持属性</p><p>rsync -r</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Apache常用功能</title>
      <link href="/2021/10/20/Apache%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/"/>
      <url>/2021/10/20/Apache%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="apache怎么玩"><a href="#apache怎么玩" class="headerlink" title="apache怎么玩 "></a>apache怎么玩 <span id="more"></span></h1><p>修改apache网页根目录，需要修改两个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1.修改httd.conf</span><br><span class="line">DocumentRoot   代表网页根目录</span><br><span class="line">Directory定义该目录的属性</span><br><span class="line">#修改如下参数</span><br><span class="line">DocumenRoot &quot;/www/html&quot;</span><br><span class="line"></span><br><span class="line">&lt;Directory /&gt;</span><br><span class="line">    AllowOverride none  #不允许其他配置文件，覆盖现有配置</span><br><span class="line">    #Allow open access:</span><br><span class="line">    Require all denied#允许所有请求</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.创建新的站点目录</span><br><span class="line">mkdir -p   /www/html</span><br><span class="line"></span><br><span class="line">3.创建新的首页文件  .index.html</span><br><span class="line">vim /www/html</span><br><span class="line">写入你想写的文件</span><br><span class="line"></span><br><span class="line">4.确保关闭防火墙，</span><br><span class="line">iptables  -F   #清除防火墙规则</span><br><span class="line">systemctl  stop   firewalld   #关闭防火墙进程</span><br><span class="line">systemctl  disable   firewalld  #禁止开机自启</span><br><span class="line"></span><br><span class="line">#关闭系统自带的selinux防火墙，获取其状态，disbaled说明selinux关了</span><br><span class="line">[root@tao_120 ~]# getenforce   #查看selinux状态</span><br><span class="line">Enforcing       #开启状态</span><br><span class="line">[root@tao_120 ~]# setenforce 0#输入此命令，临时关闭selinux防火墙    1表示开启</span><br><span class="line">[root@chaogelinux conf]# grep -i &#x27;^selinux&#x27; /etc/selinux/config    </span><br><span class="line">SELINUX=disabled    #永久关闭selinux，重启机器生效</span><br><span class="line">SELINUXTYPE=targeted</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时就可以访问新资源目录的内容了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@tao_120 ~]# curl  127.0.0.1</span><br><span class="line">haha</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="默认运行端口"><a href="#默认运行端口" class="headerlink" title="默认运行端口"></a>默认运行端口</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.修改httpd.conf，修改如下参数</span><br><span class="line"></span><br><span class="line">[root@tao_120 html]# grep -i &#x27;listen 90&#x27;  /etc/httpd/conf/httpd.conf</span><br><span class="line">Listen 90</span><br></pre></td></tr></table></figure><h1 id="apache的工作模式"><a href="#apache的工作模式" class="headerlink" title="apache的工作模式"></a>apache的工作模式</h1><p>apache是经典的网站黄金架构lanm中的a</p><p>Apache提供了三种稳定（多进程处理模块）MPM(Mutli-Processing Modules 多通道处理模块)，</p><p>使得apache能够适应更多不同的工作环境，扩展了apache的功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">检查默认的apache工作模式</span><br><span class="line">[root@tao_120 html]# httpd -V |grep -i &quot;server mpm&quot;</span><br><span class="line">AH00558: httpd: Could not reliably determine the server&#x27;s fully qualified domain name, using ::1. Set the &#x27;ServerName&#x27; directive globally to suppress this message</span><br><span class="line">Server MPM:     prefork</span><br></pre></td></tr></table></figure><p>可以在编译apache软件的时候，添加编译参数，更改mam模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--with-mpm=prefork|worker|event</span><br></pre></td></tr></table></figure><p>apache提供了三种工作模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.prefork</span><br><span class="line">apache再启动支出，就预先fork（打开）了一下子进程，然后等待请求进来。之所以这样做，是为了减少频繁穿件和销毁进程的开箱。每个子进程，只有一个线程，在一个时间点内只能处理一个请求</span><br><span class="line"></span><br><span class="line">优点：成熟稳定，兼容所有新老模块。同时，不需要担心线程问题。</span><br><span class="line">缺点：一个进程相对占用更多的系统资源，消耗更多的内存。而且，它并不擅长高并发请求</span><br><span class="line"></span><br><span class="line">2.worker</span><br><span class="line">使用了多线程的混合模式，他也预先fork了几个子进程（数量较少），然后每个子进程穿件一些线程，同时包括一个监听线程，每个请求过来，会被分配到1个线程来提供服务。线程比进程会更轻量，因为线程通常会共享父进程的内存空间，因此，内存的占用会减少一些。在高并发的场景下，因为比起prefork有更多的可用线程，表现会更优秀一些。</span><br><span class="line"></span><br><span class="line">优点：占据更少的内存，高并发场景下表现优秀。</span><br><span class="line">缺点：必须考虑线程的资源抢夺问题</span><br><span class="line"></span><br><span class="line">3.event</span><br><span class="line">它和worker模式很像，最大的区别就是，他解决了keep—alive场景下，长期呗占用的线程的资源浪费问题。在event MPM中，会有一个专门的线程来管理这些keep-alive类型的线程，当有真实的请求过来的时候，将请求传递给服务线程，执行完毕后，又允许它释放。这样增强了高并发场景下的请求处理能力。</span><br><span class="line">HTTP采用keep-alive连接时减少TCP链接数量，但是由于需要与服务器线程或进程进行绑定，导致一个繁忙的服务器会消耗完所有的线程。event MPM是解决这个问题的新模型，他把服务进程从链接中分离出来。在服务器处理速度很快，同时具有非常高的点击率的时候，可用的县城数量就是关键的资源限制，此时event MPM方式是有效的，但不能在HTTPS访问下工作。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="userdir功能"><a href="#userdir功能" class="headerlink" title="userdir功能"></a>userdir功能</h1><p>userdir模块可是很方便的和他人共享服务器的目录资源</p><p><em>修改/etc/httpd/conf.d/userdir.conf</em>*</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">1.启动userdir</span><br><span class="line">vim /etc/httpd/conf.d/userdir.conf</span><br><span class="line">&lt;IfModule mod_userdir.c&gt;</span><br><span class="line">    #</span><br><span class="line">    # UserDir is disabled by default since it can confirm the presence</span><br><span class="line">    # of a username on the system (depending on home directory</span><br><span class="line">    # permissions).</span><br><span class="line">    #</span><br><span class="line">    #UserDir disabled    #添加注销，表示启用userdir服务</span><br><span class="line"></span><br><span class="line">    #</span><br><span class="line">    # To enable requests to /~user/ to serve the user&#x27;s public_html</span><br><span class="line">    # directory, remove the &quot;UserDir disabled&quot; line above, and uncomment</span><br><span class="line">    # the following line instead:</span><br><span class="line">    # </span><br><span class="line">    UserDir public_html</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory &quot;/home/*/public_html&quot;&gt;</span><br><span class="line">    #AllowOverride FileInfo AuthConfig Limit Indexes</span><br><span class="line">  #添加以下内容</span><br><span class="line">    AllowOverride all#表示所有人可以访问</span><br><span class="line">    authuserfile &quot;etc/httpd/passwd&quot;#密码存放目录</span><br><span class="line">    authname &quot;input your account&quot;#登陆提示</span><br><span class="line">    authtype basic#定义basic类型</span><br><span class="line">    require user tao#定义登陆用户</span><br><span class="line">    #Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec</span><br><span class="line">    #Require method GET POST OPTIONS</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">2.创建网站数据文件夹，注意权限</span><br><span class="line">[root@tao_120 ~]# useradd  tao    #创建普通用户</span><br><span class="line">[root@tao_120 ~]# id tao </span><br><span class="line">uid=1000(tao) gid=1000(tao) 组=1000(tao)</span><br><span class="line"></span><br><span class="line">[root@tao_120 ~]# su - tao#进入普通用户</span><br><span class="line">[tao@tao_120 ~]$ mkdir public_html#创建网页数据文件夹</span><br><span class="line">[tao@tao_120 ~]$ ls</span><br><span class="line">123  niye  public_html</span><br><span class="line"></span><br><span class="line">3.创建网页文件</span><br><span class="line">[tao@tao_120 public_html]$ vim /home/tao/public_html/index.html</span><br><span class="line">输入内容</span><br><span class="line"></span><br><span class="line">4.设置权限</span><br><span class="line">[tao@tao_120 public_html]$ chmod -Rf  755  /home/tao</span><br><span class="line"></span><br><span class="line">5.创建需要验证的账户密码，生成数据库文件</span><br><span class="line">[root@tao_120 ~]# htpasswd -c /etc/httpd/passwd tao    #通过htpasswd命令  -c  指定路径  设置tao账户密码：tao666</span><br><span class="line">New password: </span><br><span class="line">Re-type new password: </span><br><span class="line">Adding password for user tao</span><br><span class="line"></span><br><span class="line">6.重启httpd</span><br><span class="line">[root@tao_120 ~]# systemctl restart httpd</span><br><span class="line"></span><br><span class="line">7.访问一下网页，http://192.168.88.120:90/~tao/      #格式是http://ip/~用户名</span><br><span class="line"></span><br><span class="line">8.访问目录下资源</span><br><span class="line">[root@tao_120 ~]# ls /home/tao/public_html/</span><br><span class="line">index.html</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>z</p><h1 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h1><p>虚拟主机，也叫“网站空间“，就是把一台运行在互谅网上的物理服务器划分成多个”虚拟”服务器。虚拟主机技术极大的促进了网络技术的应用和普及。同时虚拟主机的租用服务也成了网络时代的一种新型经济形式。</p><img src="http://book.luffycity.com/linux-book/%E4%BA%92%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/pic/image-20200115173512746.png" alt="image-20200115173512746" style="zoom:0%;" /><p>如果每台linux服务器，只能够跑一个网站，那一些只是简单业务的网站，或者个人博客站点，对于硬件资源来说是浪费的，且需要支付服务器的费用</p><p>对于Apache是支持虚拟主机的，能够以用户请求的不同的IP、域名、端口来区分不同的站点。</p><h2 id="基于IP的虚拟主机"><a href="#基于IP的虚拟主机" class="headerlink" title="基于IP的虚拟主机"></a>基于IP的虚拟主机</h2><p>在一台服务器上绑定多个IP地址，每个IP地址绑定一个站点，访问不同的IP，就相当于访问不同的网站资源。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在服务器中添加三个IP地址</span><br><span class="line">[root@tao_120 ~]# vim /etc/httpd/conf/httpd.conf </span><br><span class="line">[root@tao_120 ~]# ip address add  192.168.88.160/24  dev ens33</span><br><span class="line">[root@tao_120 ~]# ip address add  192.168.88.161/24  dev ens33</span><br><span class="line">[root@tao_120 ~]# ip address add  192.168.88.162/24  dev ens33</span><br><span class="line">[root@tao_120 ~]# ip a |grep &quot;inet 192&quot;</span><br><span class="line">    inet 192.168.88.120/24 brd 192.168.88.255 scope global noprefixroute ens33</span><br><span class="line">    inet 192.168.88.160/24 scope global secondary ens33</span><br><span class="line">    inet 192.168.88.161/24 scope global secondary ens33</span><br><span class="line">    inet 192.168.88.162/24 scope global secondary ens33</span><br><span class="line"></span><br><span class="line">在服务器中配置域名解析</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置三个文件夹，对应三个站点资料</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@lht_121 www]# mkdir -p /www/&#123;ling,tao,lht&#125;</span><br><span class="line">[root@lht_121 www]# ls</span><br><span class="line">html  lht  ling  tao</span><br><span class="line">[root@lht_121 www]# cat lht/index.html   ling/index.html tao/index.html </span><br><span class="line">你好我是lht，我现在用的域名是www.cclht.cn,我的IP地址是192.168.88.160</span><br><span class="line">大家好，我是ling，我的域名是www.ccling.cn，我的IP地址是192.168.88.161</span><br><span class="line">大家好，我是tao，我的域名是www.cctao.cn,我的IP地址是：192.168.88.162</span><br></pre></td></tr></table></figure><p>修改httpd.conf配置文件，最底行添加apache虚拟主机配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vim   /etc/httpd/conf/httpd.conf</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">&lt;VirtualHost 192.168.88.160&gt;  #虚拟主机地址</span><br><span class="line">DocumentRoot /www/lht#指定的root文档是/www/lht</span><br><span class="line">ServerName &quot;www.cclht.cn&quot;#httpd服务的指定域名名称</span><br><span class="line">&lt;Directory /www/lht &gt;#指定路径</span><br><span class="line">AllowOverride None#不允许任何人覆盖</span><br><span class="line">Require all granted#允许所有人写入</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">&lt;VirtualHost 192.168.88.161&gt;</span><br><span class="line">DocumentRoot /www/ling</span><br><span class="line">ServerName &quot;www.ccling.cn&quot;</span><br><span class="line">&lt;Directory /www/ling &gt;</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">&lt;VirtualHost 192.168.88.162&gt;</span><br><span class="line">DocumentRoot /www/tao</span><br><span class="line">ServerName &quot;www.cctao.cn&quot;</span><br><span class="line">&lt;Directory /www/tao &gt;</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>配置好文件后，重启httpd服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lht_121 www]# systemctl restart httpd</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>IP和域名都能访问成功！！！</p><h2 id="status状态页"><a href="#status状态页" class="headerlink" title="status状态页"></a>status状态页</h2><p>对于运维人员来说，需要实时监控httpd实时运行情况，负载情况，连接数等，能够更好的掌握服务器的情况 ，需要在编译安装apache的时候，开启mod_status模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在/etc/httpd/conf/httpd.conf配置文件中添加状态参数</span><br><span class="line"># 添加如下配置参数</span><br><span class="line">&lt;Location /server-status&gt;#服务状态的存放位置</span><br><span class="line">SetHandler server-status</span><br><span class="line">&lt;RequireAll&gt;</span><br><span class="line">Require ip 192.168.88.0/24#表示这个可以访问IP段</span><br><span class="line">&lt;/RequireAll&gt;</span><br><span class="line">&lt;/Location&gt;</span><br></pre></td></tr></table></figure><p>重启httpd服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl  restart  httpd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问状态页路径</span><br><span class="line">http://192.168.88.121/server-status</span><br></pre></td></tr></table></figure><p><img src="http://book.luffycity.com/linux-book/%E4%BA%92%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/pic/image-20200117103329820.png" alt="image-20200117103329820"></p><h1 id="针对apache进行压力测试-ab命令"><a href="#针对apache进行压力测试-ab命令" class="headerlink" title="针对apache进行压力测试   ab命令"></a>针对apache进行压力测试   ab命令</h1><p>使用apache自带的压力测试工具<em><strong>ab命令</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.安装ab命令</span><br><span class="line">[root@tao_120 ~]# yum install httpd-tools -y</span><br></pre></td></tr></table></figure><p><strong>ab命令参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">此外，我们再根据上面的用法介绍界面来详细了解每个参数选项的作用。</span><br><span class="line"></span><br><span class="line">-n    即requests，用于指定压力测试总共的执行次数。</span><br><span class="line">-c    即concurrency，用于指定的并发数。</span><br><span class="line">-t    即timelimit，等待响应的最大时间(单位：秒)。</span><br><span class="line">-b    即windowsize，TCP发送/接收的缓冲大小(单位：字节)。</span><br><span class="line">-p    即postfile，发送POST请求时需要上传的文件，此外还必须设置-T参数。</span><br><span class="line">-u    即putfile，发送PUT请求时需要上传的文件，此外还必须设置-T参数。</span><br><span class="line">-T    即content-type，用于设置Content-Type请求头信息，例如：application/x-www-form-urlencoded，默认值为text/plain。</span><br><span class="line">-v    即verbosity，指定打印帮助信息的冗余级别。</span><br><span class="line">-w    以HTML表格形式打印结果。</span><br><span class="line">-i    使用HEAD请求代替GET请求。</span><br><span class="line">-x    插入字符串作为table标签的属性。</span><br><span class="line">-y    插入字符串作为tr标签的属性。</span><br><span class="line">-z    插入字符串作为td标签的属性。</span><br><span class="line">-C    添加cookie信息，例如：&quot;Apache=1234&quot;(可以重复该参数选项以添加多个)。</span><br><span class="line">-H    添加任意的请求头，例如：&quot;Accept-Encoding: gzip&quot;，请求头将会添加在现有的多个请求头之后(可以重复该参数选项以添加多个)。</span><br><span class="line">-A    添加一个基本的网络认证信息，用户名和密码之间用英文冒号隔开。</span><br><span class="line">-P    添加一个基本的代理认证信息，用户名和密码之间用英文冒号隔开。</span><br><span class="line">-X    指定使用的和端口号，例如:&quot;126.10.10.3:88&quot;。</span><br><span class="line">-V    打印版本号并退出。</span><br><span class="line">-k    使用HTTP的KeepAlive特性。</span><br><span class="line">-d    不显示百分比。</span><br><span class="line">-S    不显示预估和警告信息。</span><br><span class="line">-g    输出结果信息到gnuplot格式的文件中。</span><br><span class="line">-e    输出结果信息到CSV格式的文件中。</span><br><span class="line">-r    指定接收到错误信息时不退出程序。</span><br><span class="line">-h    显示用法信息，其实就是ab -help。</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.发出100个并发数，总共发出100000个请求</span><br><span class="line">ab  -c  100  -n   100000  http://192.168.88.121/</span><br><span class="line"></span><br><span class="line">2.通过server-status状态页查看apache服务状态信息</span><br><span class="line">http://192.168.88.121/server-status</span><br></pre></td></tr></table></figure><h1 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h1><p>curl命令是基本URL语法，在命令行下工作的传输工具，支持多种协议，比如FTP, HTTP, HTTPS</p><p>1.curl命令保存网页元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  192.168.88.121   &gt;　　　index.html</span><br></pre></td></tr></table></figure><p>２．利用参数，直接保存网页　dfdafdafafdsa</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-o　参数，指定保存文件的名字</span><br><span class="line">curl  -o  /tmp/test.html   www.pythonav.cn</span><br></pre></td></tr></table></figure><p>3.测试网页是否存活</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-o   把网页内容输出到指定的文件中</span><br><span class="line">-s   静默输出</span><br><span class="line">-w   指定curl结束后输出的内容</span><br><span class="line">curl -o /dev/null  -s  -w  %&#123;http_code&#125;  192.168.88.121</span><br><span class="line">echo $?  #查看上一条命令是否正确执行，为0，表示正常执行，</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>利用curl保存网页的cookie</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@chaogelinux tmp]# curl -c cookiec.txt  www.baidu.com</span><br><span class="line"></span><br><span class="line">[root@chaogelinux tmp]# cat cookiec.txt</span><br><span class="line"># Netscape HTTP Cookie File</span><br><span class="line"># http://curl.haxx.se/docs/http-cookies.html</span><br><span class="line"># This file was generated by libcurl! Edit at your own risk.</span><br><span class="line"></span><br><span class="line">.baidu.com    TRUE    /    FALSE    1579334979    BDORZ    27315</span><br></pre></td></tr></table></figure><p>5.模式客户端登陆</p><p>伪装user-agent</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#原本客户端地址</span><br><span class="line">222.35.242.113 - - [17/Jan/2020:16:17:06 +0800] &quot;GET / HTTP/1.1&quot; 200 9503 &quot;-&quot; &quot;curl/7.64.1&quot; &quot;-&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#指定客户端地址</span><br><span class="line">yumac: ~ yuchao$curl -A &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36&quot;  www.pythonav.cn</span><br></pre></td></tr></table></figure><p>6.现在资源</p><p>-O  通过大写字母O来参数，  直接保存资源到本地， 用源文件名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O http://hcdn1.luffycity.com/static/frontend/public_class/PY1@2x_1566529821.1110113.png</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>7.断点续传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O -C http://hcdn1.luffycity.com/static/frontend/public_class/PY1@2x_1566529821.1110113.png</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ansible自动化运维</title>
      <link href="/2021/10/20/ansible%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
      <url>/2021/10/20/ansible%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Ansible自动化运维"><a href="#什么是Ansible自动化运维" class="headerlink" title="什么是Ansible自动化运维 "></a>什么是Ansible自动化运维 <span id="more"></span></h2><h1 id="人工运维时代"><a href="#人工运维时代" class="headerlink" title="人工运维时代"></a>人工运维时代</h1><p>运维人员大多需要维护数量众多的机器，反复重复的劳动力，很多机器需要同时部署相同的服务或是执行命令，还得反复登录不同的机器执行。</p><p>例如在backup服务器上部署Rsync服务，需要在所有其他的服务器上部署Rsync客户端配置一遍。</p><p>一台台机器登录执行命令实在太繁琐，运维人员也常用Xshell、SecureCRT之类的工具添加多个服务器的标签，提高快速连接服务器的效率。</p><h1 id="自动化运维时代"><a href="#自动化运维时代" class="headerlink" title="自动化运维时代"></a>自动化运维时代</h1><p>SSH自动化运维时代是指2003~2012年，当时SSH自动化运维是很流行的，通过再管理机器统一创建秘钥对，将私钥留在管理机上，公钥发到所有被管理的机器，然后开发脚本实现批量管理。</p><p>系统管理员日常会进行大量的重复性操作，例如安装软件，修改配置文件，创建用户，批量执行命令等等。如果主机数量庞大，单靠人工维护实在让人难以忍受。</p><p>早期运维人员会根据自己的生产环境来写特定脚本完成大量重复性工作，这些脚本复杂且难以维护。</p><p>系统管理员面临的问题主要是1、系统配置管理，2、远程执行命令，因此诞生了很多开源软件，系统维护方面有fabric、puppet、chef、ansible、saltstack等，这些软件擅长维护系统状态或方便的对大量主机进行批量的命令执行。</p><p>其中有两款软件都是用Python语言开发的，也就是<code>saltstack</code>、<code>ansible</code>，学习简单，功能强大。</p><h2 id="自动化运维趋势"><a href="#自动化运维趋势" class="headerlink" title="自动化运维趋势"></a>自动化运维趋势</h2><p>如今的自动化运维，不再是一个批量自动化管理软件就可以解决所有问题了，运维管理高速发展，从人肉运维到自动化运维，再到数据化运维、可视化运维、到AI智能运维，运维界倡导DevOps、AIOps运维，前景十分广阔，给用户更广阔的施展空间。</p><h2 id="自动化运维好处"><a href="#自动化运维好处" class="headerlink" title="自动化运维好处"></a>自动化运维好处</h2><ul><li>提高工作效率，减少重复性工作</li><li>大大减少人为出错的可能性</li><li>数据化管理、数据化汇报、问题可追溯</li></ul><h1 id="Ansible介绍"><a href="#Ansible介绍" class="headerlink" title="Ansible介绍"></a>Ansible介绍</h1><p>Ansible是一个同时管理多个远程主机的软件（任何可以通过SSH协议登录的机器），因此Ansible可以管理<code>远程虚拟机</code>、<code>物理机</code>，也可以是本地主机。</p><p>Ansible通过SSH协议实现<code>管理节点</code>、<code>远程节点</code>的通信。只要是能够SSH登录的主机完成的操作，都可以通Ansible自动化操作，比如批量复制、批量删除、批量修改、批量查看、批量安装、重启、更新等。</p><h1 id="Ansible特点"><a href="#Ansible特点" class="headerlink" title="Ansible特点"></a>Ansible特点</h1><p>Ansible的编排引擎可以出色的完成配置管理、流程控制、资源部署等多方面的操作。和其他IT自动化产品比较，Ansible无须安装客户端软件，管理简便，功能强大，便于维护。</p><p>Ansible基于Python开发，由主要的Paramiko和PyYAML两个关键模块构建。</p><ul><li>安装部署简单，学习曲线平坦</li><li>管理主机便捷，支持多台主机并行管理</li><li>无须单独在被管理主机上安装客户端软件（no agents），无须占用其他端口，仅利用SSH服务工作。</li><li>远程执行安全，轻松对执行的内容进行审计、评估、重写</li><li>能够立即管理远程主机，无须事先安装任何客户端。</li><li>不仅支持python、还可以使用其他语言开发模块。</li><li>非root账户可用</li><li>不需要安装服务端(no servers)，不需要守护进程服务</li><li>有活跃的官方社区</li></ul><p>在云计算时代，基础架构必须满足按需自动伸缩、按使用量计费的基本特性，因此自动化运维软件是必备的工具之一。</p><h1 id="Ansible软件架构"><a href="#Ansible软件架构" class="headerlink" title="Ansible软件架构"></a>Ansible软件架构</h1><p>Ansible是基于模块工作的，本身没有批量部署的能力。真正具有批量部署的是Ansible所运行的模块，Ansible只是提供一种框架。</p><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200317093301268.png" alt="image-20200317093301268"></p><h1 id="Ansible服务器规划"><a href="#Ansible服务器规划" class="headerlink" title="Ansible服务器规划"></a>Ansible服务器规划</h1><h2 id="准备好虚拟机"><a href="#准备好虚拟机" class="headerlink" title="准备好虚拟机"></a>准备好虚拟机</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">准备好3台liunx虚拟机，配置在同一个局域网内，然后设置好静态IP地址</span><br><span class="line"></span><br><span class="line">rsync_server  192.168.31.121     管理机器（安装好了ansible的服务端，公司的老板）</span><br><span class="line">php_123  192.168.31.123 被管理机器（配置好ssh服务，以及关闭防火墙等等，公司员工）</span><br><span class="line">nginx_124  192.168.31.124 被管理机器（配置好ssh服务，以及关闭防火墙等等，公司员工）</span><br></pre></td></tr></table></figure><h2 id="先准备ansible管理机器"><a href="#先准备ansible管理机器" class="headerlink" title="先准备ansible管理机器"></a>先准备ansible管理机器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">1.选择yum自动化安装，阿里云yum，epel源，前提配置好</span><br><span class="line">yum   install   epel-release -y</span><br><span class="line">yum  installansible   libselinux-python -y</span><br><span class="line"></span><br><span class="line">2.检查ansible软件安装情况，查询配置文件，和可执行命令</span><br><span class="line"></span><br><span class="line">[root@rsync_server ~]#  rpm -ql   ansible  |  grep -E  &#x27;^/etc|^/usr/bin&#x27;</span><br><span class="line">/etc/ansible                                #Ansible软件主目录</span><br><span class="line">/etc/ansible/ansible.cfg        #Ansible主配置文件</span><br><span class="line">/etc/ansible/hosts                    #Ansible软件被管理节点的主机列表文件</span><br><span class="line">/etc/ansible/roles                </span><br><span class="line">/usr/bin/ansible                        #Anisble批量管理命令</span><br><span class="line">/usr/bin/ansible-2</span><br><span class="line">/usr/bin/ansible-2.7</span><br><span class="line">/usr/bin/ansible-config</span><br><span class="line">/usr/bin/ansible-connection</span><br><span class="line">/usr/bin/ansible-console</span><br><span class="line">/usr/bin/ansible-console-2</span><br><span class="line">/usr/bin/ansible-console-2.7</span><br><span class="line">/usr/bin/ansible-doc</span><br><span class="line">/usr/bin/ansible-doc-2</span><br><span class="line">/usr/bin/ansible-doc-2.7</span><br><span class="line">/usr/bin/ansible-galaxy</span><br><span class="line">/usr/bin/ansible-galaxy-2</span><br><span class="line">/usr/bin/ansible-galaxy-2.7</span><br><span class="line">/usr/bin/ansible-inventory</span><br><span class="line">/usr/bin/ansible-playbook            #Ansible程序剧本执行命令</span><br><span class="line">/usr/bin/ansible-playbook-2</span><br><span class="line">/usr/bin/ansible-playbook-2.7</span><br><span class="line">/usr/bin/ansible-pull</span><br><span class="line">/usr/bin/ansible-pull-2</span><br><span class="line">/usr/bin/ansible-pull-2.7</span><br><span class="line">/usr/bin/ansible-test</span><br><span class="line">/usr/bin/ansible-vault</span><br><span class="line">/usr/bin/ansible-vault-2</span><br><span class="line">/usr/bin/ansible-vault-2.7</span><br><span class="line"></span><br><span class="line">3.检查ansible版本</span><br><span class="line">ansible   --version</span><br></pre></td></tr></table></figure><h3 id="Anisble命令及参数"><a href="#Anisble命令及参数" class="headerlink" title="Anisble命令及参数"></a>Anisble命令及参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、cfengine、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a MODULE_ARGS, --args=MODULE_ARGS    </span><br><span class="line">             #module arguments</span><br><span class="line">             #指定执行模块使用的参数  </span><br><span class="line">  --ask-vault-pass      </span><br><span class="line">             #ask for vault password</span><br><span class="line">             #加密playbook文件时提示输入密码</span><br><span class="line">  -B SECONDS, --background=SECONDS</span><br><span class="line">             #run asynchronously, failing after X seconds(default=N/A)</span><br><span class="line">             #后台运行超时时间,异步运行，X秒之后失败</span><br><span class="line">  -C, --check           </span><br><span class="line">             #don&#x27;t make any changes; instead, try to predict some of the changes that may occur</span><br><span class="line">             #模拟执行，不会真正在机器上执行(查看执行会产生什么变化)</span><br><span class="line">  -D, --diff            </span><br><span class="line">             #when changing (small) files and templates, show the differences in those files; works great with --check</span><br><span class="line">             #当更新的文件数及内容较少时，该选项可显示这些文件不同的地方，该选项结合-C用会有较好的效果</span><br><span class="line">  -e EXTRA_VARS, --extra-vars=EXTRA_VARS</span><br><span class="line">             #set additional variables as key=value or YAML/JSON</span><br><span class="line">             #执行命令时添加额外参数变量</span><br><span class="line">  -f FORKS, --forks=FORKS</span><br><span class="line">             #specify number of parallel processes to use(default=5)</span><br><span class="line">             #并行任务数。FORKS被指定为一个整数,默认是5</span><br><span class="line">  -h, --help            </span><br><span class="line">             #show this help message and exit</span><br><span class="line">             #打开帮助文档API</span><br><span class="line">  -i INVENTORY, --inventory-file=INVENTORY</span><br><span class="line">             #specify inventory host path(default=/etc/ansible/hosts) or comma separated host list.</span><br><span class="line">             #指定要读取的Inventory文件</span><br><span class="line">  -l SUBSET, --limit=SUBSET</span><br><span class="line">             #further limit selected hosts to an additional pattern</span><br><span class="line">             #限定执行的主机范围</span><br><span class="line">  --list-hosts          </span><br><span class="line">             #outputs a list of matching hosts; does not execute anything else</span><br><span class="line">             #列出执行匹配到的主机，但并不会执行</span><br><span class="line">  -m MODULE_NAME, --module-name=MODULE_NAME</span><br><span class="line">             #module name to execute (default=command)</span><br><span class="line">             #指定执行使用的模块，默认使用 command 模块</span><br><span class="line">  -M MODULE_PATH, --module-path=MODULE_PATH</span><br><span class="line">             #specify path(s) to module library (default=None)</span><br><span class="line">             #要执行的模块的路径</span><br><span class="line">  --new-vault-password-file=NEW_VAULT_PASSWORD_FILE</span><br><span class="line">             #new vault password file for rekey</span><br><span class="line">             #    </span><br><span class="line">  -o, --one-line        </span><br><span class="line">             #condense output</span><br><span class="line">             #压缩输出，摘要输出.尝试一切都在一行上输出</span><br><span class="line">  --output=OUTPUT_FILE  </span><br><span class="line">             #output file name for encrypt or decrypt; use - for stdout</span><br><span class="line">             #</span><br><span class="line">  -P POLL_INTERVAL, --poll=POLL_INTERVAL</span><br><span class="line">             #set the poll interval if using -B (default=15)</span><br><span class="line">             #设置轮询间隔，每隔数秒。需要- B</span><br><span class="line">  --syntax-check        </span><br><span class="line">             #perform a syntax check on the playbook, but do not execute it</span><br><span class="line">             #检查Playbook中的语法书写</span><br><span class="line">  -t TREE, --tree=TREE  </span><br><span class="line">             #log output to this directory</span><br><span class="line">             #将日志内容保存在该输出目录,结果保存在一个文件中在每台主机上</span><br><span class="line">  --vault-password-file=VAULT_PASSWORD_FILE</span><br><span class="line">             #vault password file</span><br><span class="line">             #</span><br><span class="line">  -v, --verbose         </span><br><span class="line">             #verbose mode (-vvv for more, -vvvv to enable connection debugging)</span><br><span class="line">             #执行详细输出</span><br><span class="line">  --version             </span><br><span class="line">             #show program&#x27;s version number and exit</span><br><span class="line">             #显示版本</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Connection Options:</span><br><span class="line">    control as whom and how to connect to hosts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    -k, --ask-pass      </span><br><span class="line">             #ask for connection password</span><br><span class="line">             #</span><br><span class="line">    --private-key=PRIVATE_KEY_FILE, --key-file=PRIVATE_KEY_FILE</span><br><span class="line">             #use this file to authenticate the connection</span><br><span class="line">             #</span><br><span class="line">    -u REMOTE_USER, --user=REMOTE_USER</span><br><span class="line">             #connect as this user (default=None)</span><br><span class="line">             #指定远程主机以USERNAME运行命令</span><br><span class="line">    -c CONNECTION, --connection=CONNECTION</span><br><span class="line">             #connection type to use (default=smart)</span><br><span class="line">             #指定连接方式，可用选项paramiko (SSH)、ssh、local，local方式常用于crontab和kickstarts</span><br><span class="line">    -T TIMEOUT, --timeout=TIMEOUT</span><br><span class="line">             #override the connection timeout in seconds(default=10)</span><br><span class="line">             #SSH连接超时时间设定，默认10s</span><br><span class="line">    --ssh-common-args=SSH_COMMON_ARGS</span><br><span class="line">             #specify common arguments to pass to sftp/scp/ssh (e.g.ProxyCommand)</span><br><span class="line">             #</span><br><span class="line">    --sftp-extra-args=SFTP_EXTRA_ARGS</span><br><span class="line">             #specify extra arguments to pass to sftp only (e.g. -f, -l)</span><br><span class="line">             #</span><br><span class="line">    --scp-extra-args=SCP_EXTRA_ARGS</span><br><span class="line">             #specify extra arguments to pass to scp only (e.g. -l)</span><br><span class="line">             #</span><br><span class="line">    --ssh-extra-args=SSH_EXTRA_ARGS</span><br><span class="line">             #specify extra arguments to pass to ssh only (e.g. -R)</span><br><span class="line">             #</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Privilege Escalation Options:</span><br><span class="line">    control how and which user you become as on target hosts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    -s, --sudo          </span><br><span class="line">             #run operations with sudo (nopasswd) (deprecated, use become)</span><br><span class="line">             #相当于Linux系统下的sudo命令</span><br><span class="line">    -U SUDO_USER, --sudo-user=SUDO_USER</span><br><span class="line">             #desired sudo user (default=root) (deprecated, use become)</span><br><span class="line">             #使用sudo，相当于Linux下的sudo命令</span><br><span class="line">    -S, --su            </span><br><span class="line">             #run operations with su (deprecated, use become)</span><br><span class="line">             #</span><br><span class="line">    -R SU_USER, --su-user=SU_USER</span><br><span class="line">             #run operations with su as this user (default=root) (deprecated, use become)</span><br><span class="line">             #</span><br><span class="line">   -b, --become        </span><br><span class="line">             #run operations with become (does not imply password prompting)</span><br><span class="line">             #</span><br><span class="line">    --become-method=BECOME_METHOD</span><br><span class="line">             #privilege escalation method to use (default=sudo),valid choices: [ sudo | su | pbrun | pfexec | doas |dzdo | ksu | runas ]</span><br><span class="line">             #</span><br><span class="line">    --become-user=BECOME_USER</span><br><span class="line">             #run operations as this user (default=root)</span><br><span class="line">             #</span><br><span class="line">    --ask-sudo-pass     </span><br><span class="line">             #ask for sudo password (deprecated, use become)</span><br><span class="line">             #</span><br><span class="line">    --ask-su-pass       </span><br><span class="line">             #ask for su password (deprecated, use become)</span><br><span class="line">             #</span><br><span class="line">    -K, --ask-become-pass</span><br><span class="line">             #ask for privilege escalation password</span><br><span class="line">             #</span><br></pre></td></tr></table></figure><h2 id="准备ansible被管理机器（员工）"><a href="#准备ansible被管理机器（员工）" class="headerlink" title="准备ansible被管理机器（员工）"></a>准备ansible被管理机器（员工）</h2><p>安装ansible所需的系统模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rsync_server</span><br><span class="line">php_123</span><br><span class="line"></span><br><span class="line">yum install epel-release  libselinux-python -y</span><br></pre></td></tr></table></figure><p>ansible管理方式</p><p>ansible批量管理主机的方式主要有两种</p><ul><li>传统的输入ssh密码验证</li><li>密钥管理</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">配置好ansible的配置文件，添加被管理机器的IP地址，或者主机名</span><br><span class="line">1.备份现有的配置文件</span><br><span class="line">[root@rsync_server ~]#  cp /etc/ansible/hosts&#123;,.bak&#125;</span><br><span class="line"></span><br><span class="line">2.添加ansible需要管理的机器IP地址</span><br><span class="line">[root@rsync_server ~]# tail -3 /etc/ansible/hosts</span><br><span class="line">[tao]</span><br><span class="line">192.168.31.123</span><br><span class="line">192.168.31.124</span><br></pre></td></tr></table></figure><h2 id="SSH密码认证批量管理主机"><a href="#SSH密码认证批量管理主机" class="headerlink" title="SSH密码认证批量管理主机"></a>SSH密码认证批量管理主机</h2><p>Ansible是直接利用<code>本地SSH</code>以及一些<code>远程SSH服务</code>作为客户端的，且基本上客户端的SSH服务默认都是开启的，无须额外配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.在rsync_server机器上，执行ansible命令批量远程管理</span><br><span class="line">#参数解释</span><br><span class="line">-m指定功能模块，默认就是command模块</span><br><span class="line">-a告诉模块需要执行的参数</span><br><span class="line">-k询问密码验证</span><br><span class="line">-u指定运行的用户</span><br><span class="line">在rsync_server机器上，高速其他被管理的机器，你要执行hostname命令，用root的用户执行。</span><br><span class="line">[root@rsync_server ~]# ansible tao -m command -a &#x27;hostname&#x27;  -k -u root</span><br><span class="line">SSH password: </span><br><span class="line">192.168.31.124 | FAILED | rc=-1 &gt;&gt;</span><br><span class="line">Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this.  Please add this host&#x27;s fingerprint to your known_hosts file to manage this host.</span><br><span class="line">192.168.31.123 | FAILED | rc=-1 &gt;&gt;</span><br><span class="line">Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this.  Please add this host&#x27;s fingerprint to your known_hosts file to manage this host.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【错误解释】</p><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200317105030840.png" alt="image-20200317105030840"></p><p>【解决办法】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.手动访问客户端机器，生成指纹密钥</span><br><span class="line">[root@rsync_server ~]# ssh root@192.168.31.123</span><br><span class="line">The authenticity of host &#x27;192.168.31.123 (192.168.31.123)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:xC3ZfhdbiT20LLWwAwgFKHCrqq/Yb4J6txCKPte/MMU.</span><br><span class="line">ECDSA key fingerprint is MD5:cf:7d:8b:91:44:c8:4c:cd:c8:f5:83:00:bb:2e:0d:bb.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &#x27;192.168.31.123&#x27; (ECDSA) to the list of known hosts.</span><br><span class="line">root@192.168.31.123&#x27;s password: </span><br><span class="line">Last login: Mon Oct 18 14:57:50 2021 from 192.168.31.211</span><br><span class="line">[root@php_123 ~]# exit</span><br><span class="line">登出</span><br><span class="line">Connection to 192.168.31.123 closed.</span><br><span class="line">[root@rsync_server ~]# ssh root@192.168.31.124</span><br><span class="line">The authenticity of host &#x27;192.168.31.124 (192.168.31.124)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:cLAv7vJjWYQN2dOodLJgYH/AFNWQ6aerpk46nDF0K+k.</span><br><span class="line">ECDSA key fingerprint is MD5:36:65:72:50:96:a9:15:bd:f4:ae:ce:98:d6:cb:c1:34.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? 1^Hyes</span><br><span class="line">Please type &#x27;yes&#x27; or &#x27;no&#x27;: yes</span><br><span class="line">Warning: Permanently added &#x27;192.168.31.124&#x27; (ECDSA) to the list of known hosts.</span><br><span class="line">root@192.168.31.124&#x27;s password: </span><br><span class="line">Last login: Mon Oct 18 14:57:43 2021 from 192.168.31.211</span><br></pre></td></tr></table></figure><p>【再次执行命令测试anisble】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@rsync_server ~]# ansible tao -m command -a &#x27;hostname&#x27;  -k -u root</span><br><span class="line">SSH password: </span><br><span class="line">192.168.31.123 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">php_123</span><br><span class="line">192.168.31.124 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">nginx_124</span><br></pre></td></tr></table></figure><p>【配置免密登录客户端机器，批量管理】</p><p>每次执行ansible命令都要输入root的用户密码，如果主机密码不一致，还得输入多次</p><p>可以在<code>/etc/ansible/hosts</code>主机列表文件中添加指定配置参数，实现远程管理主机的效果</p><h2 id="ansible自带的密码认证参数"><a href="#ansible自带的密码认证参数" class="headerlink" title="ansible自带的密码认证参数"></a>ansible自带的密码认证参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">可以在/etc/ansible/hosts文件中，定义好密码即可，即可实现快速的认证，远程管理主机</span><br><span class="line"></span><br><span class="line">参数</span><br><span class="line">ansible_host主机地址</span><br><span class="line">ansible_port端口，默认是22端口</span><br><span class="line">ansible_user认证的用户</span><br><span class="line">ansible_ssh_pass用户认证的密码</span><br></pre></td></tr></table></figure><p>使用hosts文件的参数形式，来实现ssh认证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.修改hosts文件，修改如下</span><br><span class="line">[root@rsync_server ~]# tail -3 /etc/ansible/hosts</span><br><span class="line">[tao]</span><br><span class="line">192.168.31.123 ansible_user=root ansible_ssh_pass=123qwe</span><br><span class="line">192.168.31.124 ansible_user=root ansible_ssh_pass=123qwe</span><br><span class="line"></span><br><span class="line">2.此时可以不需要密码，即可完成ssh认证了</span><br><span class="line">[root@rsync_server ~]# ansible tao -m command -a &quot;hostname&quot; </span><br><span class="line">192.168.31.123 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">php_123</span><br><span class="line">192.168.31.124 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">nginx_124</span><br></pre></td></tr></table></figure><h2 id="ssh密钥方式批量管理主机"><a href="#ssh密钥方式批量管理主机" class="headerlink" title="ssh密钥方式批量管理主机"></a>ssh密钥方式批量管理主机</h2><p>这个方式比起hosts文件的密码参数来的更放心</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.在rsync_server机器上穿件ssh密钥对</span><br><span class="line">[root@rsync_server ~]# ssh-keygen -f ~/.ssh/id_rsa -P &quot;&quot; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">2.检查公私钥文件</span><br><span class="line">[root@rsync_server ~]# ll /root/.ssh/</span><br><span class="line">总用量 12</span><br><span class="line">-rw-r--r--. 1 root root    0 8月  26 18:26 authorized_keys</span><br><span class="line">-rw-------. 1 root root 1679 8月  26 17:54 id_rsa</span><br><span class="line">-rw-r--r--. 1 root root  408 8月  26 17:54 id_rsa.pub</span><br><span class="line">-rw-r--r--  1 root root  352 10月 18 15:16 known_hosts</span><br></pre></td></tr></table></figure><h2 id="编写公钥分发脚本"><a href="#编写公钥分发脚本" class="headerlink" title="编写公钥分发脚本"></a>编写公钥分发脚本</h2><p>直接编写批量分发脚本，省时省力</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.编写脚本如下</span><br><span class="line">[root@rsync_server mysh]# cat /mysh/ssh_key_send.sh </span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line">rm -rf ~/.ssh/id_rsa*# 清空用户家目录里面所有公私钥对文件</span><br><span class="line">ssh-keygen -f ~/.ssh/id_rsa -P &quot;&quot; &gt; /dev/null 2&gt;&amp;1# ssh-keygen 生成新的公私钥对， -f  制定一个私钥文件 -P 指定输入私钥密码为空</span><br><span class="line">SSH_Pass=123qwe# SSH_pass变量 密码为  123qwe</span><br><span class="line">Key_Path=~/.ssh/id_rsa.pub# 公钥路径</span><br><span class="line">for ip in 123 124# for 循环，</span><br><span class="line">do</span><br><span class="line">sshpass -p$SSH_Pass ssh-copy-id -i $Key_Path &quot;-o StrictHostKeyChecking=no&quot; 192.168.31.$ip</span><br><span class="line">done</span><br><span class="line">参数解读：</span><br><span class="line">sshpass 通过它我们能够向命令提示符本身提供密码（非交互式密码验证）</span><br><span class="line">-p password：指定明文本密码输入（安全性较差）</span><br><span class="line">ssh-copy-id -i $Key_Path    ssh-copy-id 发送公钥，  -i  指定公钥路径 </span><br><span class="line"># 非交互式分发公钥命令需要用sshpass指定SSH密码，通过-o StrictHostKeyChecking=no 跳过SSH连接确认信息</span><br><span class="line"></span><br><span class="line">2.执行脚本，快速分发公钥，实现免密登录</span><br><span class="line">[root@rsync_server mysh]# sh ssh_key_send.sh </span><br></pre></td></tr></table></figure><p>修改ansible被管理主机列表文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@rsync_server mysh]# tail /etc/ansible/hosts</span><br><span class="line"># Here&#x27;s another example of host ranges, this time there are no</span><br><span class="line"># leading 0s:</span><br><span class="line"></span><br><span class="line">## db-[99:101]-node.example.com</span><br><span class="line"></span><br><span class="line">[tao]</span><br><span class="line">#192.168.31.123 ansible_user=root ansible_ssh_pass=123qwe</span><br><span class="line">#192.168.31.124 ansible_user=root ansible_ssh_pass=123qwe</span><br><span class="line">192.168.31.123</span><br><span class="line">192.168.31.124</span><br></pre></td></tr></table></figure><p>再次尝试用ansible命令进行连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@rsync_server mysh]# ansible tao -m command -a &quot;df -h&quot;</span><br><span class="line">192.168.31.123 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs        476M     0  476M    0% /dev</span><br><span class="line">tmpfs           487M     0  487M    0% /dev/shm</span><br><span class="line">tmpfs           487M  7.7M  479M    2% /run</span><br><span class="line">tmpfs           487M     0  487M    0% /sys/fs/cgroup</span><br><span class="line">/dev/sda3        20G  6.0G   14G   32% /</span><br><span class="line">/dev/sda1       197M  110M   88M   56% /boot</span><br><span class="line">tmpfs            98M     0   98M    0% /run/user/0</span><br><span class="line">192.168.31.124 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs        476M     0  476M    0% /dev</span><br><span class="line">tmpfs           487M     0  487M    0% /dev/shm</span><br><span class="line">tmpfs           487M  7.6M  479M    2% /run</span><br><span class="line">tmpfs           487M     0  487M    0% /sys/fs/cgroup</span><br><span class="line">/dev/sda3        20G  2.2G   17G   12% /</span><br><span class="line">/dev/sda1       197M  110M   88M   56% /boot</span><br><span class="line">tmpfs            98M     0   98M    0% /run/user/0</span><br></pre></td></tr></table></figure><p>此时已经无需输入密码</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在生产环境下，ansible管理连接方式二选一即可</p><p>要求下更高的话，采用普通用户管理再提权管理。  sudo</p><p>主机连接安全性上，若是用了密钥管理，那么对于管理机的安全性就得严格把控，最好禁止SSH外网连接，启用内网VPN连接，加强安全性，否则管理机被入侵，对于客户端机器是很危险的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lnotify企业级实时复制实践</title>
      <link href="/2021/10/20/lnotify%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%9E%E6%97%B6%E5%A4%8D%E5%88%B6%E5%AE%9E%E8%B7%B5/"/>
      <url>/2021/10/20/lnotify%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%9E%E6%97%B6%E5%A4%8D%E5%88%B6%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="企业级实时复制实践"><a href="#企业级实时复制实践" class="headerlink" title="企业级实时复制实践 "></a>企业级实时复制实践 <span id="more"></span></h1><h2 id="实时复制介绍"><a href="#实时复制介绍" class="headerlink" title="实时复制介绍"></a>实时复制介绍</h2><p>网站集群架构中，数据永远是最核心且重要的，数据丢失，将会给企业造成巨大损失</p><p>【数据遭到破坏】</p><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200313103200974.png" alt="image-20200313103200974"></p><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200313103244792.png" alt="image-20200313103244792"></p><h2 id="数据备份方案"><a href="#数据备份方案" class="headerlink" title="数据备份方案"></a>数据备份方案</h2><p>企业网站和应用都得有完全的数据备份方案确保数据不丢失，通常企业有如下的数据备份方案</p><h3 id="定时任务定期备份"><a href="#定时任务定期备份" class="headerlink" title="定时任务定期备份"></a>定时任务定期备份</h3><p>需要周期性备份的数据可以分两类：</p><ul><li>后台程序代码、运维配置文件修改，一般会定时任务执行脚本进行文件备份，然后配置Rsync工具推送到远程服务器备份</li><li>对于数据库文件用定时任务脚本配合数据库提供的备份工具，定时生成备份文件，配合Rsync备份到远端</li></ul><p>为什么要用实时同步服务</p><p>因为定时任务有缺陷，一分钟以内的数据无法进行同步，容易造成数据丢失</p><h3 id="实施复制方案"><a href="#实施复制方案" class="headerlink" title="实施复制方案"></a>实施复制方案</h3><p>实施复制是最适合企业备份重要数据的方式，用于用户提交的数据备份，对于用户提交的普通文件（jpg、tar、zip、MP4、txt、html）等待，都可以用<code>Inofity+Sersync+Rsync</code>实时备份方案。</p><p>对于数据文件，还有更复杂的分布式存储方案，把数据同时备份成多份，如FastDFS、GlusterFS等</p><p>对于提交到数据库中的数据，还可以用数据库的主从复制（如MySQL），这是软件自带的实时备份。</p><h2 id="图解备份方式"><a href="#图解备份方式" class="headerlink" title="图解备份方式"></a>图解备份方式</h2><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200313110213125.png" alt="image-20200313110213125"></p><h3 id="图解实时复制"><a href="#图解实时复制" class="headerlink" title="图解实时复制"></a>图解实时复制</h3><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200315153148617.png" alt="image-20200315153148617"></p><h2 id="实时复制环境准备"><a href="#实时复制环境准备" class="headerlink" title="实时复制环境准备"></a>实时复制环境准备</h2><p>【部署机器准备】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NFS01机器  192.168.178.111        /data共享目录</span><br><span class="line">BACKUP机器                                      /backup 备份目录</span><br></pre></td></tr></table></figure><h3 id="实时复制说明"><a href="#实时复制说明" class="headerlink" title="实时复制说明"></a>实时复制说明</h3><p>1.实时复制软件会监控磁盘文件系统的变化，比如指定的/data目录，实时复制软件进程会实时监控这个/data目录中对应文件系统数据的变化。</p><p>2.一旦/data目录文件发生变化，就会执行rsync命令，将变化的数据推送到备份服务器对应的备份目录中</p><h3 id="实施复制软件介绍"><a href="#实施复制软件介绍" class="headerlink" title="实施复制软件介绍"></a>实施复制软件介绍</h3><p>企业常用实时复制软件如下两款</p><table><thead><tr><th>软件</th><th>依赖程序</th><th>部署难点</th><th>说明</th></tr></thead><tbody><tr><td>Inotify-tools</td><td>Rsync守护进程</td><td>复制脚本</td><td>监控目录数据变化</td></tr><tr><td>Sersync*</td><td>Rsync守护进程</td><td>配置文件</td><td>监控目录数据变化</td></tr></tbody></table><h2 id="Inotify机制"><a href="#Inotify机制" class="headerlink" title="Inotify机制"></a>Inotify机制</h2><p>Inotify是一种异步的系统事件监控机制，通过Inotify可以监控文件系统中添加、删除、修改等事件，利用这个内核接口，第三方软件可以监控文件系统下的情况变化。</p><p>那么Inofity-tools就是该类软件的实现，是一个监控指定目录数据实时变化的软件。</p><p>实现了Inotify的软件还有<code>Sersync</code>、<code>Inotify-tools</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sersync软件是在Inotify的基础上进行开发的，功能更加强大，支持配置文件中定义、重试机制、过滤机制、提供CDN数据更新、多线程操作等。</span><br></pre></td></tr></table></figure><p>【Inotify机制的优点】</p><ul><li>监控文件系统的事件变化，通过复制工具实现实时数据复制</li><li>支持多线程实时复制</li></ul><p>【Inotify的缺点】</p><ul><li>实测当文件数量大于200个（10~100kb），复制存在延迟。</li></ul><h2 id="Inofity-Rsync实施复制实战"><a href="#Inofity-Rsync实施复制实战" class="headerlink" title="Inofity+Rsync实施复制实战"></a>Inofity+Rsync实施复制实战</h2><p>无论是Inotify-tools还是Sersync、本身的核心功能都是<code>监控指定目录内的数据变化</code>，具体的复制到远端服务器的功能还是借助Rsync工具配合，Inotify机制软件工作流程如下</p><ol><li>备份源客户端开机运行Inotify软件，检测指定目录的文件系统变化</li><li>一旦获取到指定监控目录的数据发生变化，即刻执行Rsync命令复制数据。</li><li>将变化的数据发送到Rsync服务端的备份目录。</li></ol><h2 id="项目部署实施"><a href="#项目部署实施" class="headerlink" title="项目部署实施"></a>项目部署实施</h2><p>【1.确保远程数据传输服务部署完成】</p><h3 id="前提配置好Rsync-Daemon（守护进程模式）"><a href="#前提配置好Rsync-Daemon（守护进程模式）" class="headerlink" title="前提配置好Rsync Daemon（守护进程模式）"></a>前提配置好Rsync Daemon（守护进程模式）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">也就是可以在客户端机器，推送、拉取数据到BACKUP服务器，才能配置Inofity-tools</span><br><span class="line"></span><br><span class="line">将rsync守护进程模式部署完毕</span><br><span class="line">rsync服务端部署</span><br><span class="line">a 检查rsync软件是否已经安装</span><br><span class="line">b 编写rsync软件主配置文件</span><br><span class="line">c 创建备份目录管理用户</span><br><span class="line">d 创建备份目录，并进行授权</span><br><span class="line">e 创建认证文件，编写认证用户和密码信息，设置文件权限为600</span><br><span class="line">f 启动rsync守护进程服务</span><br></pre></td></tr></table></figure><h3 id="在NFS01机器配置"><a href="#在NFS01机器配置" class="headerlink" title="在NFS01机器配置"></a>在NFS01机器配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">rsync客户端部署</span><br><span class="line">a 检查rsync软件是否已经安装    </span><br><span class="line">b 创建认证文件，编写认证用户密码信息即可，设置文件权限为600</span><br><span class="line">c 利用客户端进行数据同步测试</span><br><span class="line"></span><br><span class="line">当前也就是rsync客户端机器，配置如下部署</span><br><span class="line">1.设置密码环境变量，方便的使用rsync命令</span><br><span class="line">[root@nfs01 ~]# echo &quot;export RSYNC_PASSWORD=chaoge&quot;  &gt;&gt; /etc/bashrc</span><br><span class="line"></span><br><span class="line">2.加载配置文件</span><br><span class="line">source /etc/bashrc</span><br><span class="line"></span><br><span class="line">3.检查环境变量</span><br><span class="line">[root@nfs01 ~]# echo $RSYNC_PASSWORD</span><br><span class="line">chaoge</span><br><span class="line"></span><br><span class="line">4.作为Rsync客户端，测试推送和拉取数据是否正常</span><br><span class="line">#推送本地数据给Rsync服务端</span><br><span class="line">[root@nfs01 ~]# rsync -avz /data/ rsync_backup@192.168.178.110::backup</span><br><span class="line"></span><br><span class="line">5.拉取服务端资料</span><br><span class="line">[root@nfs01 ~]# rsync -avz rsync_backup@192.168.178.110::backup  /tmp</span><br></pre></td></tr></table></figure><h3 id="检查Linux版本是否支持Inotify机制"><a href="#检查Linux版本是否支持Inotify机制" class="headerlink" title="检查Linux版本是否支持Inotify机制"></a>检查Linux版本是否支持Inotify机制</h3><p>只有Linux内核版本在2.6.13起才支持，以及是否存在三个系统文件，存在则支持</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.检查linux内核版本</span><br><span class="line">[root@nfs01 ~]# uname -r</span><br><span class="line">3.10.0-1062.9.1.el7.x86_64</span><br><span class="line"></span><br><span class="line">2.检查Inotify相关文件</span><br><span class="line">[root@nfs01 ~]# ls -l /proc/sys/fs/inotify/</span><br><span class="line">总用量 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@nfs01 ~]# cd /proc/sys/fs/inotify/</span><br><span class="line">[root@nfs01 inotify]# ll</span><br><span class="line">总用量 0</span><br><span class="line">-rw-r--r-- 1 root root 0 2018-02-25 19:45 max_queued_events    </span><br><span class="line">-rw-r--r-- 1 root root 0 2018-02-25 19:45 max_user_instances</span><br><span class="line">-rw-r--r-- 1 root root 0 2018-02-25 19:45 max_user_watches</span><br><span class="line">max_user_watches:    设置inotifywait或inotifywatch命令可以监视的文件数量（单进程）</span><br><span class="line">默认只能监控8192个文件</span><br><span class="line"></span><br><span class="line">max_user_instances:    设置每个用户可以运行的inotifywait或inotifywatch命令的进程数</span><br><span class="line">默认每个用户可以开启inotify服务128个进程</span><br><span class="line"></span><br><span class="line">max_queued_events:    设置inotify实例事件（event）队列可容纳的事件数量</span><br><span class="line">默认监控事件队列长度为16384</span><br></pre></td></tr></table></figure><h3 id="Inotify-tools工具安装"><a href="#Inotify-tools工具安装" class="headerlink" title="Inotify-tools工具安装"></a>Inotify-tools工具安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.yum安装，需配置epel源</span><br><span class="line">[root@nfs01 ~]# yum install inotify-tools -y</span><br><span class="line"></span><br><span class="line">2.检查软件</span><br><span class="line">[root@nfs01 ~]# rpm -ql inotify-tools|head -2</span><br><span class="line">/usr/bin/inotifywait        # 重要软件命令</span><br><span class="line">/usr/bin/inotifywatch        # 重用软件命令</span><br></pre></td></tr></table></figure><h3 id="Inotify命令工具"><a href="#Inotify命令工具" class="headerlink" title="Inotify命令工具"></a>Inotify命令工具</h3><p>上述操作我们安装好了Inotify-tools软件，生成2个重要的命令</p><ul><li>inotifywait：在被监控的目录等待特定文件系统事件（open、close、delete等事件），执行后处于阻塞状态，适合在Shell脚本中使用，是实现监控的关键</li><li>Inotifywatch：收集被监控的文件系统使用的统计数据（文件系统事件发生的次数统计）</li></ul><p>【inotifywait命令解释】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">inotifywait用于等待文件或文件集上的一个待定事件，可以监控任何文件和目录设置，并且可以递归地监控整个目录树；</span><br><span class="line"></span><br><span class="line">inotifywatch用于收集被监控的文件系统计数据，包括每个inotify事件发生多少次等信息</span><br><span class="line"></span><br><span class="line">从上面可知inotifywait是一个监控事件，可以配合shell脚本使用它。与它相关的参数：</span><br><span class="line"></span><br><span class="line">语法格式：inotifywait [-hcmrq][-e][-t][–format][-timefmt][…]</span><br><span class="line"></span><br><span class="line">-m： 即“–monitor” 表示始终保持事件监听状态。</span><br><span class="line"></span><br><span class="line">-d：类似于-m参数，将命令运行在后台，记录出发的事件信息，记录在指定文件里，加上--outfile参数</span><br><span class="line"></span><br><span class="line">-r： 即“–recursive” 表示递归查询目录</span><br><span class="line"></span><br><span class="line">-q： 即“–quiet” 表示打印出监控事件</span><br><span class="line"></span><br><span class="line">-o： 即“–outfile” 输出事情到一个文件而不是标准输出</span><br><span class="line"></span><br><span class="line">-s: 即“–syslog” 输入错误信息到系统日志</span><br><span class="line"></span><br><span class="line">-e： 即“–event”， 通过此参数可以指定要监控的事件，常见的事件有modify、delete、create、close_write、move、close、unmount和attrib等</span><br><span class="line"></span><br><span class="line">-format： 指定输出格式；常用的格式符如：</span><br><span class="line"></span><br><span class="line">%w：表示发生事件的目录</span><br><span class="line"></span><br><span class="line">%f：表示发生事件的文件</span><br><span class="line"></span><br><span class="line">%e：表示发生的事件</span><br><span class="line"></span><br><span class="line">%Xe:事件以“X”分隔</span><br><span class="line"></span><br><span class="line">%T：使用由-timefmt定义的时间格式</span><br><span class="line"></span><br><span class="line">-timefmt：指定时间格式，用于-format选项中的%T格式</span><br></pre></td></tr></table></figure><p>利用Inotify软件监控的事件主要是如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Events    含义</span><br><span class="line">access    文件或目录被读取</span><br><span class="line">modify    文件或目录内容被修改</span><br><span class="line">attrib    文件或目录属性被改变</span><br><span class="line">close    文件或目录封闭，无论读/写模式</span><br><span class="line">open    文件或目录被打开</span><br><span class="line">moved_to    文件或目录被移动至另外一个目录</span><br><span class="line">move    文件或目录被移动到另一个目录或从另一个目录移动至当前目录</span><br><span class="line">create    文件或目录被创建在当前目录</span><br><span class="line">delete    文件或目录被删除</span><br><span class="line">umount    文件系统被卸载</span><br></pre></td></tr></table></figure><h3 id="Inotify可监控的事件"><a href="#Inotify可监控的事件" class="headerlink" title="Inotify可监控的事件"></a>Inotify可监控的事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">可监控的事件</span><br><span class="line">有几种事件能够被监控。一些事件，比如 IN_DELETE_SELF 只适用于正在被监控的项目，而另一些，比如 IN_ATTRIB 或者 IN_OPEN 则只适用于监控过的项目，或者如果该项目是目录，则可以应用到其所包含的目录或文件。</span><br><span class="line"></span><br><span class="line">IN_ACCESS</span><br><span class="line">被监控项目或者被监控目录中的条目被访问过。例如，一个打开的文件被读取。</span><br><span class="line">IN_MODIFY</span><br><span class="line">被监控项目或者被监控目录中的条目被修改过。例如，一个打开的文件被修改。</span><br><span class="line">IN_ATTRIB</span><br><span class="line">被监控项目或者被监控目录中条目的元数据被修改过。例如，时间戳或者许可被修改。</span><br><span class="line">IN_CLOSE_WRITE</span><br><span class="line">一个打开的，等待写入的文件或目录被关闭。</span><br><span class="line">IN_CLOSE_NOWRITE</span><br><span class="line">一个以只读方式打开的文件或目录被关闭。</span><br><span class="line">IN_CLOSE</span><br><span class="line">一个掩码，可以很便捷地对前面提到的两个关闭事件（IN_CLOSE_WRITE | IN_CLOSE_NOWRITE）进行逻辑操作。</span><br><span class="line">IN_OPEN</span><br><span class="line">文件或目录被打开。</span><br><span class="line">IN_MOVED_FROM</span><br><span class="line">被监控项目或者被监控目录中的条目被移出监控区域。该事件还包含一个 cookie 来实现 IN_MOVED_FROM 与 IN_MOVED_TO 的关联。</span><br><span class="line">IN_MOVED_TO</span><br><span class="line">文件或目录被移入监控区域。该事件包含一个针对 IN_MOVED_FROM 的 cookie。如果文件或目录只是被重命名，将能看到这两个事件，如果它只是被移入或移出非监控区域，将只能看到一个事件。如果移动或重命名一个被监控项目，监控将继续进行。参见下面的 IN_MOVE-SELF。</span><br><span class="line">IN_MOVE</span><br><span class="line">可以很便捷地对前面提到的两个移动事件（IN_MOVED_FROM | IN_MOVED_TO）进行逻辑操作的掩码。</span><br><span class="line">IN_CREATE</span><br><span class="line">在被监控目录中创建了子目录或文件。</span><br><span class="line">IN_DELETE</span><br><span class="line">被监控目录中有子目录或文件被删除。</span><br><span class="line">IN_DELETE_SELF</span><br><span class="line">被监控项目本身被删除。监控终止，并且将收到一个 IN_IGNORED 事件。</span><br><span class="line">IN_MOVE_SELF</span><br><span class="line">监控项目本身被移动。</span><br></pre></td></tr></table></figure><h3 id="测试create事件"><a href="#测试create事件" class="headerlink" title="测试create事件"></a>测试create事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 语法</span><br><span class="line">inotifywait -mrq --timefmt &quot;%F&quot; --format &quot;%T %w%f 事件信息：%e&quot; /data  &lt;-- 相对完整的命令应用</span><br><span class="line"></span><br><span class="line"># 指定事件监控</span><br><span class="line">inotifywait -mrq --timefmt &quot;%F&quot; --format &quot;%T %w%f 事件信息：%e&quot; -e create /data  </span><br><span class="line"></span><br><span class="line"># 实际案例，监控/data目录的创建</span><br><span class="line">[root@nfs01 ~]# inotifywait -mrq --timefmt &#x27;%d/%m/%y %H:%M&#x27; --format &#x27;%T%w%f&#x27; -e create /data</span><br><span class="line"># 参数解释</span><br><span class="line">-m： 即“–monitor” 表示始终保持事件监听状态。</span><br><span class="line">-r： 即“–recursive” 表示递归查询目录</span><br><span class="line">-q： 即“–quiet” 表示打印出监控事件</span><br><span class="line">--timefmt：指定时间格式</span><br><span class="line">%m 　月份(以01-12来表示)。</span><br><span class="line">%d 　日期(以01-31来表示)。</span><br><span class="line">%y 　年份(以00-99来表示)。</span><br><span class="line"></span><br><span class="line">%w：表示发生事件的目录</span><br><span class="line">%f：表示发生事件的文件</span><br><span class="line">%T：使用由-timefmt定义的时间格式</span><br><span class="line">%e：表示发生的事件</span><br><span class="line"></span><br><span class="line">#日志检测</span><br><span class="line">16/03/20 09:26/data/超哥带你学inotify.txt</span><br><span class="line">16/03/20 09:26/data/嗨起来</span><br><span class="line">16/03/20 09:27/data/今天是个好日子.txt</span><br><span class="line"></span><br><span class="line">-e： 即“–event”， 通过此参数可以指定要监控的事件，常见的事件有modify、delete、create、close_write、move、close、unmount和attrib等</span><br></pre></td></tr></table></figure><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200316092928813.png" alt="image-20200316092928813"></p><p>【上述案例解读】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令中只监控了create的事件，并没有检测其他事件，因此也只有create会被inotify监控到</span><br><span class="line">-e： 即“–event”， 通过此参数可以指定要监控的事件，常见的事件有modify、delete、create、close_write、move、close、unmount和attrib等</span><br></pre></td></tr></table></figure><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200316094403287.png" alt="image-20200316094403287"></p><h3 id="测试delete事件"><a href="#测试delete事件" class="headerlink" title="测试delete事件"></a>测试delete事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.在NFS01客户端机器上检测inotify功能，检测delete事件，只有在该目录下的删除动作，才会触发监控</span><br><span class="line">[root@nfs01 ~]# inotifywait -mrq --format &#x27;%w%f&#x27; -e delete /data</span><br><span class="line"></span><br><span class="line">2.再开一个终端，进行删除动作</span><br><span class="line">[root@nfs01 data]# rm -rf 爱的魔力转圈圈.txt</span><br></pre></td></tr></table></figure><h3 id="close-write事件"><a href="#close-write事件" class="headerlink" title="close_write事件"></a>close_write事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">检测不同的时间，其实就是-e参数指定的不同，其实很简单</span><br><span class="line">[root@nfs01 ~]# inotifywait -mrq --format &#x27;%w%f&#x27; -e close_write /data</span><br></pre></td></tr></table></figure><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200316095418634.png" alt="image-20200316095418634"></p><h3 id="inotify增删改事件"><a href="#inotify增删改事件" class="headerlink" title="inotify增删改事件"></a>inotify增删改事件</h3><table><thead><tr><th>重要事件</th><th>包含事件</th><th>说明</th></tr></thead><tbody><tr><td>close</td><td>close_write、close_nowrite</td><td>文件或目录关闭，不管是<code>读</code>还是<code>写</code>都包含<code>关闭</code>操作</td></tr><tr><td>close_write</td><td>create</td><td>含创建文件事件，不含创建目录事件，自身有修改事件</td></tr><tr><td>move</td><td>moved_to、moved_from</td><td>文件或目录无论是移动、移除监控目录，都被监控</td></tr></tbody></table><h3 id="扩展：sed命令触发事件"><a href="#扩展：sed命令触发事件" class="headerlink" title="扩展：sed命令触发事件"></a>扩展：sed命令触发事件</h3><h4 id="在NFS01上开启Inotify监控功能"><a href="#在NFS01上开启Inotify监控功能" class="headerlink" title="在NFS01上开启Inotify监控功能"></a>在NFS01上开启Inotify监控功能</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.监控所有事件，且格式化输出</span><br><span class="line">[root@nfs01 ~]# inotifywait -mrq /data --format &quot;%w%f 事件：%e&quot;</span><br></pre></td></tr></table></figure><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200316104837006.png" alt="image-20200316104837006"></p><h4 id="利用sed修改文件内容"><a href="#利用sed修改文件内容" class="headerlink" title="利用sed修改文件内容"></a>利用sed修改文件内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 替换chaoge.txt的内容，且进行备份，旧内容在chaoge.txt.bak  ，替换后内容在chaoge.txt</span><br><span class="line">[root@nfs01 data]# sed -i.bak  &#x27;s/默认监控所有事件/超哥带你学inotify事件/g&#x27; /data/chaoge.txt</span><br><span class="line"></span><br><span class="line"># sed修改文件事件如下</span><br><span class="line">1. 创建临时文件</span><br><span class="line">2. 把源文件内容放入临时文件中</span><br><span class="line">3. 修改临时文件内容</span><br><span class="line">4. 对源文件进行备份 -i.bak ---- chaoge.txt.bak</span><br><span class="line">5. 对临时文件重命名为chaoge.txt</span><br></pre></td></tr></table></figure><h4 id="sed修改文件inotify事件图"><a href="#sed修改文件inotify事件图" class="headerlink" title="sed修改文件inotify事件图"></a>sed修改文件inotify事件图</h4><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200316110754515.png" alt="image-20200316110754515"></p><h2 id="Inotify-tools软件部署实战"><a href="#Inotify-tools软件部署实战" class="headerlink" title="Inotify-tools软件部署实战"></a>Inotify-tools软件部署实战</h2><h3 id="手工配置inotify的监控事件，增删改查"><a href="#手工配置inotify的监控事件，增删改查" class="headerlink" title="手工配置inotify的监控事件，增删改查"></a>手工配置inotify的监控事件，增删改查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 检测目录的增删改事件</span><br><span class="line">[root@nfs01 ~]# inotifywait -mrq --timefmt &quot;%y-%m-%d %T&quot;   --format &quot;%T  %w%f 当前事件有：%e&quot; -e close_write,delete  /data/</span><br></pre></td></tr></table></figure><p>再开一个终端，修改数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 data]# touch /data/超哥带你学inotify.txt</span><br><span class="line">[root@nfs01 data]# echo &quot;超哥带你飞&quot; &gt;&gt; /data/超哥带你学inotify.txt.bak</span><br><span class="line">[root@nfs01 data]#</span><br><span class="line">[root@nfs01 data]# rm -rf /data/*</span><br><span class="line"></span><br><span class="line">#Inotify能够检测到如下信息</span><br><span class="line">/data/超哥带你学inotify.txt</span><br><span class="line">/data/超哥带你学inotify.txt.bak</span><br><span class="line">/data/chaoge.txt</span><br><span class="line">/data/chaoge.txt.bak</span><br><span class="line">/data/超哥带你学inotify.txt.bak</span><br><span class="line">/data/嗨起来</span><br></pre></td></tr></table></figure><h3 id="编写实时监控和复制脚本"><a href="#编写实时监控和复制脚本" class="headerlink" title="编写实时监控和复制脚本"></a>编写实时监控和复制脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1.生成一个数字1，2，3的文件</span><br><span class="line">seq 3 &gt; /tmp/chaoge.txt</span><br><span class="line"></span><br><span class="line">2.编写一个脚本，能够循环读取文件内容</span><br><span class="line">[root@nfs01 tmp]# cat test.sh</span><br><span class="line">cat ./chaoge.txt | \</span><br><span class="line">while read line</span><br><span class="line">do</span><br><span class="line">  echo $line</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">3.检查文件</span><br><span class="line">[root@nfs01 tmp]# ls</span><br><span class="line">chaoge.txt  test.sh</span><br><span class="line"></span><br><span class="line">4.执行该脚本，-x参数执行脚本，输出执行过程，调试利器，也可以不加</span><br><span class="line">[root@nfs01 tmp]# sh -x test.sh</span><br><span class="line">+ read line                    #按行读取</span><br><span class="line">+ cat ./chaoge.txt  #读取文件</span><br><span class="line">+ echo 1    #输出1</span><br><span class="line">1</span><br><span class="line">+ read line                #按行读取</span><br><span class="line">+ echo 2                    #输出2</span><br><span class="line">2</span><br><span class="line">+ read line</span><br><span class="line">+ echo 3</span><br><span class="line">3</span><br><span class="line">+ read line</span><br></pre></td></tr></table></figure><p>【操作实时同步的脚本】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.创建统一管理脚本的文件夹</span><br><span class="line">[root@nfs01 tmp]# mkdir -p /MyInotify/scripts</span><br><span class="line"></span><br><span class="line">2.创建针对事件变化完整复制的脚本 monitor.sh</span><br><span class="line">[root@nfs01 scripts]# cat monitor.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">cmd=&quot;/usr/bin/inotifywait&quot;</span><br><span class="line">$cmd -mrq --timefmt &quot;%y-%m-%d %T&quot;   --format &quot;%T  %w%f 当前事件有：%e&quot;  -e close_write,delete /data | \</span><br><span class="line">while read line</span><br><span class="line">do</span><br><span class="line">        cd /data &amp;&amp; \</span><br><span class="line">        rsync -az --delete ./ rsync_backup@192.168.178.139::backup</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="在nfs01机器上执行脚本"><a href="#在nfs01机器上执行脚本" class="headerlink" title="在nfs01机器上执行脚本"></a>在nfs01机器上执行脚本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 scripts]# sh -x  monitor.sh</span><br></pre></td></tr></table></figure><p><img src="http://book.luffycity.com/linux-book/%E9%AB%98%E6%80%A7%E8%83%BDWeb%E9%9B%86%E7%BE%A4%E5%AE%9E%E6%88%98/pic/image-20200316140535119.png" alt="image-20200316140535119"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">测试脚本没问题后，可以将脚本运行在后台，实时监听文件变化，进行同步，保证数据备份安全</span><br><span class="line">1.脚本放置后台运行，在前台运行会占用终端，且终端关了，任务会断</span><br><span class="line">[root@nfs01 scripts]# /bin/sh /MyInotify/scripts/monitor.sh &amp;&gt;/dev/null &amp;</span><br><span class="line">[1] 3004</span><br><span class="line">[root@nfs01 scripts]# jobs</span><br><span class="line">[1]+  运行中               /bin/sh /MyInotify/scripts/monitor.sh &amp;&gt;/dev/null &amp;</span><br><span class="line">[root@nfs01 scripts]#</span><br><span class="line"></span><br><span class="line">2.该任务添加至开机启动文件</span><br><span class="line">[root@nfs01 scripts]# tail -2 /etc/rc.local</span><br><span class="line"># inotify + rsync  script by chaoge</span><br><span class="line">/bin/sh /MyInotify/scripts/monitor.sh &amp;&gt;/dev/null &amp;</span><br></pre></td></tr></table></figure><p>至此Rsync+inotify实施复制已经结束</p><h3 id="Inotify优化参数"><a href="#Inotify优化参数" class="headerlink" title="Inotify优化参数"></a>Inotify优化参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">有关inotify的内核参数文件，可以针对企业需求进行优化，修改如下</span><br><span class="line">[root@nfs01 scripts]# cat /proc/sys/fs/inotify/max_*</span><br><span class="line">16384</span><br><span class="line">128</span><br><span class="line">8192</span><br><span class="line"></span><br><span class="line">[root@nfs01 scripts]# echo &quot;50000000&quot; &gt; /proc/sys/fs/inotify/max_user_watches</span><br><span class="line">[root@nfs01 scripts]# echo &quot;50000000&quot; &gt; /proc/sys/fs/inotify/max_queued_events</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LNMP架构</title>
      <link href="/2021/10/20/LNMP%E6%9E%B6%E6%9E%84/"/>
      <url>/2021/10/20/LNMP%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="认识什么是LNMP架构：linux-Nginx-MySQL-PHP-Python"><a href="#认识什么是LNMP架构：linux-Nginx-MySQL-PHP-Python" class="headerlink" title="认识什么是LNMP架构：linux+Nginx+MySQL+PHP/Python "></a>认识什么是LNMP架构：linux+Nginx+MySQL+PHP/Python <span id="more"></span></h1><p>lamp架构（linux+apache+mysql（mariadb）+php/python）</p><p>之前学习Apache了解过LAMP（Linux、Apache、Mysql、Perl/PHP/Python）</p><p>由于上述架构，已然是一个商业版软件的代名词，后来自由软件趋势兴起，如何用开源软件替代商业软件，这是人们追求的，所有的Linux发行版几乎都会内置这样的软件。</p><p>但是由于Nginx的兴趣，卓越的性能，更简单的配置，更强大的功能，更低的资源消耗，LAMP已经渐渐被LNMP取代。</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200212203206493.png" alt="image-20200212203206493"></p><p>LNMP是网站架构初期最合适的单体架构。因为初创型技术团队对于技术的选型，需要考虑如下因素</p><ol><li>在创业初期，研发资源有限，研发人力有限，技术储备有限，需要选择一个易维护、简单的技术架构；</li><li>产品需要快速研发上线，并能够满足快速迭代要求，现实情况决定了一开始没有时间和精力来选择一个过于复杂的分布式架构系统，研发速度必须要快；</li><li>创业初期，业务复杂度比较低，业务量也比较小，如果选择过于复杂的架构，反而会增加研发难度以及运维难度；</li><li>遵从选择合适的技术而不是最好的技术原则，并权衡研发效率和产品目标，同时创业初期只有一个PHP研发人员，过于复杂的技术架构必然会带来比较高昂的学习成本。</li></ol><p>基于如上的因素，LNMP架构就是最合适的。</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200212205020615.png" alt="image-20200212205020615"></p><p>如此架构，一般三台服务器足以，Nginx与后台系统部署在一台机器，Mysql数据库单独服务器，Mencached缓存一台服务器。这样的架构优势在于</p><ul><li>单体架构，架构简单，清晰的分层结构；</li><li>可以快速研发，满足产品快速迭代要求；</li><li>没有复杂的技术，技术学习成本低，同时运维成本低，无需专业的运维，节省开支。</li></ul><h2 id="LNMP组合工作流程"><a href="#LNMP组合工作流程" class="headerlink" title="LNMP组合工作流程"></a>LNMP组合工作流程</h2><p>LNMP工作流是用户通过浏览器输入域名访问Nginx web服务，Nginx判断请求是静态请求则由Nginx返回给用户。如果是动态请求(如.php结尾)，那么Nginx会将该请求通过FastCGI接口发送给PHP引擎（php-fpm进程）进行解析，如果该动态请求需要读取mysql数据库，php会继续向后读取数据库，最终Nginx将获取的数据返回给用户。</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200214182854973.png" alt="image-20200214182854973"></p><h2 id="LNMP部署之Nginx部署"><a href="#LNMP部署之Nginx部署" class="headerlink" title="LNMP部署之Nginx部署"></a>LNMP部署之Nginx部署</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">1.安装形式选择</span><br><span class="line">yum安装</span><br><span class="line">自动下载软件包及其依赖关系，自动化安装，省时省力</span><br><span class="line">都是默认的安装路径，以及版本不容易指定，自定制化太低，无法扩展第三方新功能</span><br><span class="line">rpm包</span><br><span class="line">需要手动解决依赖关系，弃用</span><br><span class="line">源代码编译安装</span><br><span class="line">自由下载软件版本，自定制安装路径，第三方功能扩展</span><br><span class="line">源代码编译安装步骤稍微负载一点</span><br><span class="line"></span><br><span class="line">2.安装nginx所需的pcre库，让nginx支持url重写的rewrite功能</span><br><span class="line">yum install pcre pcre-devel -y</span><br><span class="line"></span><br><span class="line">3.安装openssl-devel模块，nginx需要支持https</span><br><span class="line">[root@web01 opt]# yum install openssl openssl-devel -y</span><br><span class="line"></span><br><span class="line">4.1 安装gcc编译器</span><br><span class="line">yum install   -y</span><br><span class="line"></span><br><span class="line">5.下载nginx源码包</span><br><span class="line">wget  http://nginx.org/download/nginx-1.21.3.tar.gz</span><br><span class="line"></span><br><span class="line">6.解压缩，源代码包</span><br><span class="line">[root@liu_121 mytools]# tar -zxf nginx-1.21.3.tar.gz </span><br><span class="line"></span><br><span class="line">7.创建普通的nginx用户，用于运行nginx进程，降低nginx的系统权限</span><br><span class="line">[root@liu_121 mytools]# useradd  nginx -s /sbin/nologin -M</span><br><span class="line"></span><br><span class="line">8.开始编译安装nginx服务</span><br><span class="line">./configure --prefix=/mytools/nginx_1.16.0 --user=nginx --group=nginx --with-http_ssl_module  --with-http_flv_module --with-http_gzip_static_module --with-http_stub_status_module  --with-threads  --with-file-aio</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install </span><br><span class="line"></span><br><span class="line">9.配置软连接，生产环境常用操作，便于运维，开发，测试使用，以及nginx以后的升级</span><br><span class="line">[root@liu_121 mytools]# ln -s nginx.1213/ nginx</span><br><span class="line">[root@liu_121 mytools]# ll nginx</span><br><span class="line">总用量 1044</span><br><span class="line">lrwxrwxrwx. 1 root  root       11 9月  25 14:27 nginx -&gt; nginx.1213/</span><br><span class="line"></span><br><span class="line">10.配置nginx环境变量</span><br><span class="line">[root@liu_121 ~]# tail -1 /etc/profile</span><br><span class="line">PATH=&quot;$PATH:/root/mytools/nginx/sbin&quot;</span><br><span class="line">[root@liu_121 ~]# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/mytools/nginx/sbin:/root/bin</span><br></pre></td></tr></table></figure><h2 id="LNMP之MySQL数据库"><a href="#LNMP之MySQL数据库" class="headerlink" title="LNMP之MySQL数据库"></a>LNMP之MySQL数据库</h2><p>Mysql是互联网领域非常重要的，深受广大用户欢迎的一款开源数据库。MysSQL是一款关系型数据库，且把数据保存在不同的二维表，且把数据表再放入数据库中管理，而不是所有的数据统一放在一个大仓库，这样的设计提高MySQL的读写速度。</p><p>我们会在后面章节专门学习MYSQL，进阶DBA</p><h2 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h2><p>安装方式我们可以选择多种</p><ul><li>Yum/rpm包安装，简单、快速、无法定制化、新手推荐使用</li><li>二进制安装，解压缩后直接简单配置即可使用，速度较快，专业DBA常用</li><li>源码编译安装，特点是可以定制化安装需求，缺点过程较为复杂</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.创建mysql用户</span><br><span class="line">[root@liu_121 ~]# useradd mysql -s /sbin/nologin -M</span><br><span class="line">[root@liu_121 ~]# id mysql</span><br><span class="line">uid=1002(mysql) gid=1002(mysql) 组=1002(mysql)</span><br><span class="line"></span><br><span class="line">2.下载mysql二进制软件包，提前配置好yum源，下载wget命令</span><br><span class="line">yum install wget -y</span><br><span class="line">[root@liu_121 mytools]# wget http://mirrors.163.com/mysql/Downloads/MySQL-Cluster-7.5/mysql-cluster-gpl-7.5.20-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">【软件包选择】</span><br><span class="line">mysql二进制安装包体积较大，名字和源代码包有些区别，但是安装过程较快</span><br><span class="line"></span><br><span class="line">mysql二进制包  mysql-cluster-gpl-7.5.20-linux-glibc2.12-x86_64.tar.gz   846M</span><br><span class="line">mysql源码包   mysql-5.7.26.tar.gz                52M</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二进制方式安装mysql"><a href="#二进制方式安装mysql" class="headerlink" title="二进制方式安装mysql"></a>二进制方式安装mysql</h2><p>我们这里搭建LNMP环境，nginx和mysql是安装在一台机器上的，当然也可以是分开在不同的服务器上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.解压缩二进制mysql代码</span><br><span class="line">[root@liu_121 mytools]# tar -zxf mysql-cluster-gpl-7.5.20-linux-glibc2.12-x86_64.tar.gz </span><br><span class="line"></span><br><span class="line">2.配置软链接，快捷方位mysql</span><br><span class="line">[root@liu_121 mytools]# ln -s mysql-cluster-gpl-7.5.20-linux-glibc2.12-x86_64 mysql</span><br><span class="line">[root@liu_121 mytools]# llmysql </span><br><span class="line">lrwxrwxrwx.  1 root  root         47 9月  25 15:45 mysql -&gt; mysql-cluster-gpl-7.5.20-linux-glibc2.12-x86_64</span><br><span class="line"></span><br><span class="line">3.安全性的准备工作，卸载可能centos7存在的mariadb相关的依赖关系</span><br><span class="line">rpm -e --nodeps mariadb-libs</span><br><span class="line"></span><br><span class="line">4.开始准备启动mysql的配置文件  /etc/my.cnf</span><br><span class="line">vim /etc/my.cnf[mysql]是区，段的意思，以下的参数，对齐生效</span><br><span class="line">[mysqld]这是代表对服务端生效的参数</span><br><span class="line">[mysql] 这是代表对客户端生效的参数</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/mytools/mysql/#指定mysql的默认根路径</span><br><span class="line">datadir=/mytools/mysql/data# mysql安装文件夹</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">server_id=1</span><br><span class="line">port=3306#数据库默认端口号</span><br><span class="line">log_error=/mytools/mysql/data/mysql_err.log#mysql错误日志目录</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="初始化mysql服务端"><a href="#初始化mysql服务端" class="headerlink" title="初始化mysql服务端"></a>初始化mysql服务端</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1.首先卸载系统自带的mariadb的依赖</span><br><span class="line">rpm -e --nodeps mariadb-libs</span><br><span class="line"></span><br><span class="line">2.检查mysql的所需的依赖环境</span><br><span class="line">yum install libaio-devel -y</span><br><span class="line"></span><br><span class="line">3.创建mysql数据文件夹，用于初始化数据，且进行权限控制</span><br><span class="line">mkdir -p  /root/mytools/mysql/data/</span><br><span class="line">chown -R  mysql.mysql  /mytools/mysql/  # 修改mysql所有的内容，更改属组，属主为mysql</span><br><span class="line">[root@web_122 mytools]# ll mysql/</span><br><span class="line">总用量 396</span><br><span class="line">drwxr-xr-x.  2 mysql mysql   4096 9月  25 17:30 bin</span><br><span class="line">drwxr-xr-x.  2 mysql mysql      6 9月  25 17:34 data</span><br><span class="line">drwxr-xr-x.  2 mysql mysql     55 9月  25 17:29 docs</span><br><span class="line">drwxr-xr-x.  4 mysql mysql   4096 9月  25 17:29 include</span><br><span class="line">drwxr-xr-x.  5 mysql mysql   4096 9月  25 17:29 lib</span><br><span class="line">-rw-r--r--.  1 mysql mysql 373771 9月  21 2020 LICENSE</span><br><span class="line">drwxr-xr-x.  4 mysql mysql     30 9月  25 17:30 man</span><br><span class="line">drwxr-xr-x. 10 mysql mysql   4096 9月  25 17:30 mysql-test</span><br><span class="line">-rw-r--r--.  1 mysql mysql    587 9月  21 2020 README</span><br><span class="line">-rw-r--r--.  1 mysql mysql    587 9月  21 2020 README-test</span><br><span class="line">drwxr-xr-x. 31 mysql mysql   4096 9月  25 17:30 share</span><br><span class="line">drwxr-xr-x.  2 mysql mysql     90 9月  25 17:30 support-files</span><br><span class="line"></span><br><span class="line">4.初始化mysql数据库</span><br><span class="line">[root@web_122 mytools]# /mytools/mysql/bin/mysqld --initialize-insecure --user=mysql --basedir=/mytools/mysql/ --datadir=/mytools/mysql/data/</span><br><span class="line"></span><br><span class="line"># 参数解释</span><br><span class="line">--user=mysql 指定用户</span><br><span class="line">--basedir 指定mysql安装目录</span><br><span class="line">--datadir=/opt/mysql/data 指定数据文件夹</span><br><span class="line">--initialize-insecure 关闭mysql安全策略</span><br><span class="line">--initialize 开启mysql安全模式</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置mysql客户端"><a href="#配置mysql客户端" class="headerlink" title="配置mysql客户端"></a>配置mysql客户端</h2><p>使用systemctl命令管理mysql数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.编写mysql启动的脚本，定义一个mysql.service</span><br><span class="line">vim /etc/systemd/system/mysqld.service  # 写入一下内容</span><br><span class="line">[Unit]</span><br><span class="line">Description=MySQL server by taoge#这是涛哥写的mysql管理文件</span><br><span class="line">Documentation=man:mysqld(8)#你能够查看mysql的帮助信息</span><br><span class="line">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html#mysql官网的URL地址</span><br><span class="line">After=network.target</span><br><span class="line">After=syslog.target</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">[Service]</span><br><span class="line">User=mysql#执行用户</span><br><span class="line">Group=mysql#执行用户组</span><br><span class="line">ExecStart=/mytools/mysql/bin/mysqld --defaults-file=/etc/my.cnf#启动mysql的目录</span><br><span class="line">LimitNOFILE=5000</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="启动mysql数据库"><a href="#启动mysql数据库" class="headerlink" title="启动mysql数据库"></a>启动mysql数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.启动mysql数据库</span><br><span class="line">[root@web_122 mytools]# systemctl start mysqld.service </span><br><span class="line">[root@web_122 mytools]# systemctl enable mysqld  #设置为开启启动</span><br><span class="line"></span><br><span class="line">[root@web_122 mytools]# systemctl status mysqld.service</span><br><span class="line">● mysqld.service - MySQL server by tao</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/mysqld.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 六 2021-09-25 18:05:59 CST; 6s ago</span><br><span class="line">     Docs: man:mysqld(8)</span><br><span class="line">           http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line"> Main PID: 20372 (mysqld)</span><br><span class="line">   CGroup: /system.slice/mysqld.service</span><br><span class="line">           └─20372 /mytools/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class="line"></span><br><span class="line">2.检查mysql启动状态</span><br><span class="line">[root@web_122 mytools]# netstat -tunlp |grep mysql</span><br><span class="line">tcp6       0      0 :::3306                 :::*                    LISTEN      20372/mysqld    </span><br><span class="line"></span><br><span class="line">[root@web_122 mytools]# ps -ef |grep mysql</span><br><span class="line">mysql     20372      1  0 18:05 ?        00:00:01 /mytools/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="登陆mysql数据库"><a href="#登陆mysql数据库" class="headerlink" title="登陆mysql数据库"></a>登陆mysql数据库</h2><p>这个mysql是c/s架构模式，就好比登陆qq一样</p><p>先启动mysqld服务端，然后用mysql客户端命令登陆即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.如果你电脑之前装过其他的数据库，你可以用yum直接卸载，不会影响到你安装的二进制mysql数据库</span><br><span class="line">yum remove mysql -y</span><br><span class="line"></span><br><span class="line">2.配置我们安装的二进制mysql  PATH环境变量</span><br><span class="line">vim /etc/profile   #在此文件下，写入配置文件</span><br><span class="line">PATH=&quot;$PATH:/mytools/mysql/bin&quot;</span><br><span class="line"></span><br><span class="line">保存之后重新登陆会话</span><br><span class="line">[root@web_122 ~]# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/mytools/mysql/bin:/root/bin</span><br><span class="line"></span><br><span class="line"># 看到如下提示，则正确配置了mysql环境变量</span><br><span class="line">[root@web_122 ~]# which mysql</span><br><span class="line">/mytools/mysql/bin/mysql</span><br></pre></td></tr></table></figure><h2 id="登陆mysql数据库，简单的使用mysql"><a href="#登陆mysql数据库，简单的使用mysql" class="headerlink" title="登陆mysql数据库，简单的使用mysql"></a>登陆mysql数据库，简单的使用mysql</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 登陆数据库的命令</span><br><span class="line">[root@web_122 ~]# mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.7.32-ndb-7.5.20-cluster-gpl MySQL Cluster Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单的sql语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前所有的数据库sql（数据库语句）</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database        |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql          |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys           |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建数据库tao</span><br><span class="line">mysql&gt; create database  tao;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">#再次查看数据库</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| tao                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#进入tao数据库</span><br><span class="line">mysql&gt; use  tao;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">#此时已经进入了mysql的tao数据库，我们可以在库中创建数据表</span><br><span class="line">mysql&gt; show tables;#查看tao库中，是否又数据表</span><br><span class="line">Empty set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select user();            # 查看当前登录的用户</span><br><span class="line">+----------------+</span><br><span class="line">| user()         |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 查看mysql所有用户信息</span><br><span class="line">mysql&gt; select user,authentication_string,host from mysql.user;</span><br><span class="line">+---------------+-------------------------------------------+-----------+</span><br><span class="line">| user          | authentication_string                     | host      |</span><br><span class="line">+---------------+-------------------------------------------+-----------+</span><br><span class="line">| root          |                                           | localhost |</span><br><span class="line">| mysql.session | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | localhost |</span><br><span class="line">| mysql.sys     | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | localhost |</span><br><span class="line">+---------------+-------------------------------------------+-----------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改mysql数据库密码"><a href="#修改mysql数据库密码" class="headerlink" title="修改mysql数据库密码"></a>修改mysql数据库密码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password &#x27;123qwe&#x27;# 使用masqladmin命令，修改root密码为123qwe</span><br><span class="line"></span><br><span class="line"># 再次登录，输入密码</span><br><span class="line">[root@web01 ~]# mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 6</span><br><span class="line">Server version: 5.7.26 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h2 id="FastCGI介绍"><a href="#FastCGI介绍" class="headerlink" title="FastCGI介绍"></a>FastCGI介绍</h2><p>CGI（Common Gateway Interface），全文名是<code>通用网关接口</code>，用于HTTP服务器和其他机器通信的一种工具。</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200319094005768.png" alt="image-20200319094005768"></p><p>传统CGI程序性能较弱，因此每次HTTP服务器遇到动态程序的时候，都需要重启解析器来执行解析，之后的处理结果才会返回给HTTP服务器。</p><p>这样在高并发场景下访问几乎是太差劲了，因此诞生了FastCGI。</p><p>FastCGI是一个可伸缩、高速的在HTTP服务器和动态脚本之间通信的接口（在Linux环境下，FastCGI接口就是socket，这个socket可以是文件socket，也可以是IP socket，也就意味着本地通信，远程通信两种），主要优点是把动态语言和HTTP服务器分离开。</p><p>多数主流的web服务器都支持FastCGI，如Apache、nginx、LightHttpd等</p><p>同时FastCGI也被许多脚本语言所支持，比较流行的脚本语言之一为PHP。</p><p>Fast-CGI接口采用c/s架构，可以将<code>HTTP服务器</code>和<code>脚本解析服务器</code>分离开。</p><p>当HTTP服务器遇见静态请求，直接返回，遇见动态请求转发给动态服务器，交给FastCGI去处理，实现动静分离，提升服务器性能。</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200319095518207.png" alt="image-20200319095518207"></p><p>当HTTP服务器发送一个动态请求给FastCGI。</p><hr><p>当进来一个请求时，Web 服务器把环境变量和这个页面请求通过一个<code>unix domain socket</code>(都位于同一物理服务器）或者一个<code>IP Socket</code>（FastCGI部署在其它物理服务器）传递给FastCGI进程。</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200319095634039.png" alt="image-20200319095634039"></p><h2 id="Nginx-FastCGI的运行原理"><a href="#Nginx-FastCGI的运行原理" class="headerlink" title="Nginx FastCGI的运行原理"></a>Nginx FastCGI的运行原理</h2><p>Nginx默认不支持外部动态程序直接解析，所有的外部程序都得通过FastCGI接口调用。FastCGI接口运行在LInux平台默认是socket进程通信，为了调用CGI程序，还需要FastCGI的wrapper（启动cgi的程序），这个wrapper绑定在某个固定的socket上，例如端口或者文件socket都行。</p><p>当Nginx把CGI请求发送给该socket，通过FastCGI接口wrapper接收到请求，派生出一个新的线程，这个线程调用解释器或者外部程序处理脚本来读取返回的数据；</p><p>wrapper再吧返回的数据通过FastCGI接口沿着固定的socket传递给Nginx；</p><p>最后Nginx把返回的数据交给客户端。</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200319101223060.png" alt="image-20200319101223060"></p><h2 id="LNMP之PHP部署"><a href="#LNMP之PHP部署" class="headerlink" title="LNMP之PHP部署"></a>LNMP之PHP部署</h2><p>lnmp的部署</p><p>linux</p><p>nginx</p><p>mysql</p><p>php</p><p>部署流程笔记</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1.先检查好nginx和mysql的安装和启动</span><br><span class="line">[root@lnmp_124 ~]# ll /lnmp/</span><br><span class="line">总用量 0</span><br><span class="line">lrwxrwxrwx.  1 root  root   48 9月  26 17:00 mysql -&gt; mysql-cluster-gpl-7.5.20-linux-glibc2.12-x86_64/</span><br><span class="line">drwxr-xr-x. 11 mysql mysql 178 9月  26 17:00 mysql-cluster-gpl-7.5.20-linux-glibc2.12-x86_64</span><br><span class="line">lrwxrwxrwx.  1 root  root   13 9月  26 16:34 nginx -&gt; nginx_1.21.3/</span><br><span class="line">drwxr-xr-x. 11 root  root  151 9月  26 16:36 nginx_1.21.3</span><br><span class="line">drwxr-xr-x.  9 nginx nginx 186 9月  26 16:34 nginx-1.21.3</span><br><span class="line"></span><br><span class="line">2.保证ngin和mysql都启动了</span><br><span class="line">[root@lnmp_124 ~]# ps -ef |grep -E  &#x27;mysql|nginx&#x27;</span><br><span class="line">mysql      1717      1  1 10:38 ?        00:00:01 /lnmp/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class="line">root       1749      1  0 10:39 ?        00:00:00 nginx: master process /lnmp/nginx/sbin/nginx</span><br><span class="line">nginx      1750   1749  0 10:39 ?        00:00:00 nginx: worker process</span><br><span class="line">root       1755   1684  0 10:39 pts/0    00:00:00 grep --color=auto -E mysql|nginx</span><br><span class="line"></span><br><span class="line">3.安装部署PHP程序所需的系统库，不要求必须安装，而是安装上之后，可以扩展php更多功能</span><br><span class="line">yum install  gcc gcc-c++ make zlib-devel libxml2-devel libjpeg-devel libjpeg-turbo-devel libiconv-devel \</span><br><span class="line">freetype-devel libpng-devel gd-devel libcurl-devel libxslt-devel libxslt-devel -y</span><br><span class="line"></span><br><span class="line">4.发现yum仓库默认缺少一个libiconv-devel软件包，因此我们可以手动下载，自行编译安装该软件</span><br><span class="line">[root@web01 ~]# wget -P /mytools  http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.15.tar.gz</span><br><span class="line">[root@web01 ~]# cd /mytools</span><br><span class="line">[root@lnmp_124 ~]# ls /mytools/</span><br><span class="line">libiconv-1.15.tar.gz                                    nginx-1.21.3.tar.gz  wordpress-5.3.2.tar.gz</span><br><span class="line">mysql-cluster-gpl-7.5.20-linux-glibc2.12-x86_64.tar.gz  php-7.3.5.tar.gz</span><br><span class="line">[root@lnmp_124 mytools]# tar -zxf libiconv-1.15.tar.gz -C /lnmp/</span><br><span class="line">[root@lnmp_124 mytools]# ls /lnmp/</span><br><span class="line">libiconv-1.15  mysql  mysql-cluster-gpl-7.5.20-linux-glibc2.12-x86_64  nginx  nginx_1.21.3  nginx-1.21.3</span><br><span class="line">[root@web01 libiconv-1.15]# cd libiconv-1.15</span><br><span class="line">[root@lnmp_124 libiconv-1.15]# ./configure --prefix=/lnmp/libiconv</span><br><span class="line">[root@web01 libiconv-1.15]# make &amp;&amp; make install</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装PHP（FastCGI形式）"><a href="#安装PHP（FastCGI形式）" class="headerlink" title="安装PHP（FastCGI形式）"></a>安装PHP（FastCGI形式）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">1.下载获取php软件包</span><br><span class="line">[root@lnmp_124 mytools]# wget http://mirrors.sohu.com/php/php-7.3.5.tar.gz</span><br><span class="line"></span><br><span class="line">2.解压缩php源码包，编译安装</span><br><span class="line">[root@lnmp_124 mytools]# tar -zxf php-7.3.5.tar.gz  -C /lnmp/</span><br><span class="line">[root@lnmp_124 mytools]# ls /lnmp/</span><br><span class="line">libiconv  libiconv-1.15  mysql  mysql-cluster-gpl-7.5.20-linux-glibc2.12-x86_64  nginx  nginx_1.21.3  nginx-1.21.3  php-7.3.5</span><br><span class="line"></span><br><span class="line">#编译安装php</span><br><span class="line">[root@lnmp_124 php-7.3.5]# ./configure --prefix=/mytools/php7.3.5 \</span><br><span class="line">--enable-mysqlnd \</span><br><span class="line">--with-mysqli=mysqlnd \</span><br><span class="line">--with-pdo-mysql=mysqlnd \</span><br><span class="line">--with-iconv-dir=/mytools/libiconv \</span><br><span class="line">--with-freetype-dir \</span><br><span class="line">--with-jpeg-dir \</span><br><span class="line">--with-png-dir \</span><br><span class="line">--with-zlib \</span><br><span class="line">--with-libxml-dir=/usr \</span><br><span class="line">--enable-xml \</span><br><span class="line">--disable-rpath \</span><br><span class="line">--enable-bcmath \</span><br><span class="line">--enable-shmop \</span><br><span class="line">--enable-sysvsem \</span><br><span class="line">--enable-inline-optimization \</span><br><span class="line">--with-curl \</span><br><span class="line">--enable-mbregex \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--with-gd \</span><br><span class="line">--with-openssl \</span><br><span class="line">--with-mhash \</span><br><span class="line">--enable-pcntl \</span><br><span class="line">--enable-sockets \</span><br><span class="line">--with-xmlrpc \</span><br><span class="line">--enable-soap \</span><br><span class="line">--enable-short-tags \</span><br><span class="line">--enable-static \</span><br><span class="line">--with-xsl \</span><br><span class="line">--with-fpm-user=nginx \</span><br><span class="line">--with-fpm-group=nginx \</span><br><span class="line">--enable-ftp \</span><br><span class="line">--enable-opcache=no</span><br><span class="line"></span><br><span class="line">[root@lnmp_124 php-7.3.5]# make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">--prefix=  指定php安装路径</span><br><span class="line">--enable-mysqlnd 使用php自带的mysql相关软件包</span><br><span class="line">--with-fpm-user=nginx  指定PHP-FPM程序的用户是nginx，和nginx服务保持统一</span><br><span class="line">--enable-fpm 激活php-fpm方式，以FastCGI形式运行php程序</span><br></pre></td></tr></table></figure><p>待看到如下显示，表示正确的编译了php</p><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200319151017986.png" alt="image-20200319151017986"></p><p>对于如上的参数，根据自己实际工作环境优化增删即可</p><p>部分参数解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 php-7.3.5]# echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200319152050097.png" alt="image-20200319152050097"></p><p>【编译安装结束后，配置环境变量】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 php-7.3.5]# ln -s /opt/php7.3.5/ /opt/php</span><br></pre></td></tr></table></figure><h3 id="PHP配置文件"><a href="#PHP配置文件" class="headerlink" title="PHP配置文件"></a>PHP配置文件</h3><p>默认的php配置文件模版，在解压php源码的目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@lnmp_124 php-7.3.5]# pwd</span><br><span class="line">/lnmp/php-7.3.5</span><br><span class="line">[root@lnmp_124 php-7.3.5]# ls php.*</span><br><span class="line">php.gif  php.ini-development  php.ini-production</span><br><span class="line"></span><br><span class="line">#比较一下php的生产配置文件，和开发模式配置文件的区别。开发环境下开起了更多的日志、调试信息，生产环境该参数都关闭了</span><br><span class="line">[root@lnmp_124 php-7.3.5]# vimdiff php.ini-development  php.ini-production</span><br><span class="line"></span><br><span class="line">#拷贝该配置文件，放入到php的编译暗转目录下</span><br><span class="line">[root@lnmp_124 php-7.3.5]# cp php.ini-development     /lnmp/php</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="有关FASTCGI配置文件"><a href="#有关FASTCGI配置文件" class="headerlink" title="有关FASTCGI配置文件"></a>有关FASTCGI配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.检查fastcgi的默认配置文件</span><br><span class="line">[root@lnmp_124 etc]# pwd</span><br><span class="line">/lnmp/php/etc</span><br><span class="line">[root@lnmp_124 etc]# ls</span><br><span class="line">pear.conf  php-fpm.conf.default  php-fpm.d</span><br><span class="line"></span><br><span class="line">2.拷贝模板配置文件，生成新的php配置文件</span><br><span class="line">[root@lnmp_124 etc]# cp php-fpm.conf.default   php-fpm.conf</span><br><span class="line">[root@lnmp_124 etc]# ls</span><br><span class="line">pear.conf  php-fpm.conf  php-fpm.conf.default  php-fpm.d</span><br><span class="line"></span><br><span class="line">[root@lnmp_124 etc]# cd php-fpm.d/</span><br><span class="line">[root@lnmp_124 php-fpm.d]# ls</span><br><span class="line">www.conf.default</span><br><span class="line">[root@lnmp_124 php-fpm.d]# cp www.conf.default www.conf</span><br><span class="line">[root@lnmp_124 php-fpm.d]# ls</span><br><span class="line">www.conf  www.conf.default</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动PHP服务，指定以fastcgi形式"><a href="#启动PHP服务，指定以fastcgi形式" class="headerlink" title="启动PHP服务，指定以fastcgi形式"></a>启动PHP服务，指定以fastcgi形式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">用绝对路径，启动php进程</span><br><span class="line">[root@lnmp_124 sbin]# /lnmp/php/sbin/php-fpm </span><br><span class="line"></span><br><span class="line">#启动php后，检查端口和进程信息</span><br><span class="line">[root@lnmp_124 sbin]# netstat -tunlp |grep php</span><br><span class="line">tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      40322/php-fpm: mast </span><br><span class="line">[root@lnmp_124 sbin]# ps -ef | grep php</span><br><span class="line">root      40322      1  0 12:06 ?        00:00:00 php-fpm: master process (/lnmp/php/etc/php-fpm.conf)</span><br><span class="line">nginx     40323  40322  0 12:06 ?        00:00:00 php-fpm: pool www</span><br><span class="line">nginx     40324  40322  0 12:06 ?        00:00:00 php-fpm: pool www</span><br><span class="line">root      40330   1890  0 12:07 pts/1    00:00:00 grep --color=auto php</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改nginx支持php代码"><a href="#修改nginx支持php代码" class="headerlink" title="修改nginx支持php代码"></a>修改nginx支持php代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">1.修改nginx配置文件，在最底行添加 包含文件参数,建议删除nginx.conf原有的server配置</span><br><span class="line">[root@web01 conf]# vim /opt/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    gzip  on;</span><br><span class="line">include extra/01_www.conf;</span><br><span class="line">include extra/02_bbs.conf;</span><br><span class="line">include extra/03_blog.conf;</span><br><span class="line">include extra/04_status.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.手动创建extra目录，以及.conf文件</span><br><span class="line">vim /lnmp/nginx/conf/extra/my_php.conf</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name _;</span><br><span class="line">location /&#123;</span><br><span class="line">        root html;</span><br><span class="line">        index index.html index.php;</span><br><span class="line">&#125;</span><br><span class="line">#添加有关php程序的解析</span><br><span class="line">#判断当请求url结尾是以php，php5的时候，就进入如下的location代码</span><br><span class="line">location ~ .*\.(php|php5)?$ &#123;</span><br><span class="line">        root html/php;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi.conf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.检查nginx语法，以及重启nginx</span><br><span class="line">[root@lnmp_124 conf]# nginx -t</span><br><span class="line">nginx: the configuration file /lnmp/nginx_1.21.3/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /lnmp/nginx_1.21.3/conf/nginx.conf test is successful</span><br><span class="line">[root@lnmp_124 conf]# nginx -s reload</span><br><span class="line"></span><br><span class="line">4.创建php的首页脚本文件</span><br><span class="line">[root@lnmp_124 html]# mkdir php</span><br><span class="line">[root@lnmp_124 html]# ls</span><br><span class="line">50x.html  index.html  php</span><br><span class="line">[root@lnmp_124 html]# cd php/</span><br><span class="line">[root@lnmp_124 php]# vim index.php   #写入以下信息</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当看见如下页面，表示lnmp环境已经能够正确解析了</p><h2 id="测试php访问mysql"><a href="#测试php访问mysql" class="headerlink" title="测试php访问mysql"></a>测试php访问mysql</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">在php的代码，直接在网页中解析即可</span><br><span class="line">[root@lnmp_124 php]# vim /lnmp/nginx/html/php/index.php  # 写入以下内容</span><br><span class="line">&lt;?php</span><br><span class="line">$link_id=mysqli_connect(&#x27;localhost&#x27;,&#x27;root&#x27;,&#x27;123qwe&#x27;) or mysql_error();</span><br><span class="line">if($link_id)&#123;</span><br><span class="line"></span><br><span class="line">    echo &quot;mysql conncet successful by tao.\n&quot;;</span><br><span class="line">&#125;else &#123;</span><br><span class="line"></span><br><span class="line">    echo mysql_error();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">~              </span><br><span class="line">---------------------------</span><br><span class="line">如上脚本的中文解释</span><br><span class="line">1.建立mysql链接，把链接信息，复制给变量  link_id</span><br><span class="line">2.如果link_id为真，那么就打印一串字符串信息，告诉你mysql连接成功了</span><br><span class="line">3.否则，给你输出mysql的报错信息，让你能够自行的调试程序</span><br></pre></td></tr></table></figure><p>看到如此的画面，lnmp环境基本搭建完毕，nginx+php+mysql的形式。</p><h2 id="LNMP远程部署"><a href="#LNMP远程部署" class="headerlink" title="LNMP远程部署"></a>LNMP远程部署</h2><p>上述php-fpm和nginx在一起，这里的讲解，是php-fpm和nginx在两台服务器，远程访问</p><p>参考博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://xuchen.wang/archives/nginxphp.html</span><br><span class="line"></span><br><span class="line">还有注意，修改php-fpm的启动地址，改为0.0.0.0:9000</span><br><span class="line">配置文件夹在安装目录的etc/php-fpm.d/下面的已conf为后缀的文件，一般在安装时我们设置成了www.conf。</span><br><span class="line">把 listen = 127.0.0.1:9000 后面的端口号9000换成你需要的端口，然后重启php</span><br></pre></td></tr></table></figure><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20201010173213295.png" alt="image-20201010173213295"></p><h2 id="LNMP部署开源博客"><a href="#LNMP部署开源博客" class="headerlink" title="LNMP部署开源博客"></a>LNMP部署开源博客</h2><p><img src="http://book.luffycity.com/linux-book/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/pic/image-20200319173500839.png" alt="image-20200319173500839"></p><p>利用开源工具wordpress可以搭建出精美的博客站点，它是一套利用php语言和mysql数据库开发的程序，用于可以在支持php环境和mysql数据库的服务器上搭建blog站点。</p><p>你只需要掌握LNMP环境搭建，即可轻松部署wordpress程序。</p><h3 id="LNMP环境搭建wordpress"><a href="#LNMP环境搭建wordpress" class="headerlink" title="LNMP环境搭建wordpress"></a>LNMP环境搭建wordpress</h3><p>环境准备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.登陆数据库创建用于存储数据库的wordpress库，存储博客数据</span><br><span class="line">mysql&gt; create database wordpress;   #创建wordpress库</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">2.创建用于wordpress专用的数据库用户</span><br><span class="line">create user wordpress;</span><br><span class="line"></span><br><span class="line">3.给该用语授权</span><br><span class="line"># 给wordpress用户授权，允许在localhost本地登陆mysql，且有增删改查的权限，且设置密码‘123qwe’</span><br><span class="line"> grant all on wordpress.* to wordpress@&#x27;localhost&#x27; identified by &#x27;123qwe&#x27;;</span><br><span class="line"></span><br><span class="line">4.刷新授权表</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">5.查询刚才创建的用户信息</span><br><span class="line">use mysql;  #进入mysql数据库</span><br><span class="line">show tables; #查看所有的数据表</span><br><span class="line">desc  user; #查看user表的结构信息</span><br><span class="line">#查看mysql苦衷的user表，中的几个字段信息</span><br><span class="line">select  user,authentication_string,host from mysql.user;</span><br></pre></td></tr></table></figure><h2 id="wordpress程序安装"><a href="#wordpress程序安装" class="headerlink" title="wordpress程序安装"></a>wordpress程序安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.下载获取wordpress程序</span><br><span class="line">wget https://wordpress.org/latest.zip</span><br><span class="line">wget https://wordpress.org/latest.tar.gz</span><br><span class="line"></span><br><span class="line">2.解压缩zip版的wordperss源码包</span><br><span class="line">yum  install  -y   unzip   #下载unzip解压工具</span><br><span class="line">unzip  wordpress-5.3.2.zip</span><br><span class="line"></span><br><span class="line">3.移动博客程序代码，放入到nginx的网页目录下</span><br><span class="line">[root@lnmp_124 lnmp]# mv wordpress/   /lnmp/nginx/html/php/</span><br><span class="line">移动博客程序的所有代码，放入到nginx解析php程序的目录下</span><br><span class="line">[root@lnmp_124 php]# mv wordpress/*   .</span><br><span class="line">可以修改程序代码的属主，属组信息</span><br><span class="line">chown -R  nginx.nginx php/</span><br><span class="line"></span><br><span class="line">4.重启nginx服务</span><br><span class="line">nginx -t</span><br><span class="line">nginx  -s reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LAMP架构</title>
      <link href="/2021/10/20/LAMP%E6%9E%B6%E6%9E%84/"/>
      <url>/2021/10/20/LAMP%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="认识LAMP架构：Linux-Apache-MySQL-PHP-Python"><a href="#认识LAMP架构：Linux-Apache-MySQL-PHP-Python" class="headerlink" title="认识LAMP架构：Linux+Apache+MySQL+PHP/Python "></a>认识LAMP架构：Linux+Apache+MySQL+PHP/Python <span id="more"></span></h3><p><img src="http://book.luffycity.com/linux-book/%E4%BA%92%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/pic/image-20200117165542095.png" alt="image-20200117165542095"></p><img src="/2021/10/20/LAMP%E6%9E%B6%E6%9E%84/image-20210909160356939.png" class="" title="This is an example image"><h2 id="什么是LAMP"><a href="#什么是LAMP" class="headerlink" title="什么是LAMP"></a>什么是LAMP</h2><p>LAMP是工人最常见、最古老的黄金Web技术栈、</p><p>其实就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">linux  操作系统</span><br><span class="line">apache/nginx   web服务器</span><br><span class="line">MySQL/Mariadb    数据库</span><br><span class="line">Perl/PHP/Python  </span><br></pre></td></tr></table></figure><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p><img src="http://book.luffycity.com/linux-book/%E4%BA%92%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/pic/image-20200118163840299.png" alt="image-20200118163840299"></p><p>Linux到底好在哪？用Linus本人的话说就是，普通老百姓用户，压根别说你是在<code>使用</code>操作系统，你需要的只是应用程序，而不是操作系统。</p><p>操作系统主要是提供给程序员API，用于构建和运行应用的一个平台。</p><p>如果来说，你常用的应用在Linux下运行的更好，更方便，那没问题。</p><p>但是如果你平时用的软件，都和Linux没什么关系，那你没必要选择Linux。</p><p>那当然作为运维人员，你可以一手使用windows、一手使用Linux，毕竟你的服务器运维工作，几乎都是Linux环境了。</p><p>Linux系统主要是以开发者为中心，Windows主要以消费者为中心这是本质的区别。</p><p>Linux的特点是几乎所有的开发任务相关工具，都有很完善的支持，从底层的编译器，make编译工具，到bash脚本，git代码管理，vim编辑器，依赖管理工具等等都很齐全。</p><p>然而Windows/Mac的操作系统很少能完善这些开发工具的，Linux则是默认预装的开发环境。</p><p>WIndows几乎都是图形化接口，而Linux几乎都是现有命令行，再由图形化操作接口，更容易实现自动化。</p><p>简单来说</p><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p>Apache Web Server虽然称之为<code>web服务器</code>，但是不是意味着他是一个<code>物理服务器</code>，它只是电脑软件中的一个软件而已，Web服务器的作用是将HTTP请求从前端转发到后端应用上。</p><p><img src="http://book.luffycity.com/linux-book/%E4%BA%92%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/pic/image-20200118161748267.png" alt="image-20200118161748267"></p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>PHP是一门服务端脚本编程语言，主要用于web开发，常用PHP脚本嵌入HTML源码中执行。</p><p>PHP是全球知名的编程语言之一，程序员可以免费试用，PHP支持多种操作系统，开发效率高，支持多种数据库操作。</p><p>国内众多网站，百度、雅虎、新浪都在大量使用PHP语言进行开发，知名的论坛软件Discuz也是由PHP开发且占据了80%的论坛软件市场。</p><p><img src="http://book.luffycity.com/linux-book/%E4%BA%92%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/pic/image-20200118161810191.png" alt="image-20200118161810191"></p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p><img src="http://book.luffycity.com/linux-book/%E4%BA%92%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/pic/image-20200118162000347.png" alt="image-20200118162000347"></p><p>Mysql是一款数据库管理系统，也就是一个存储数据的工具，用户可以自行对数据库进行增加、删除、修改、查询等操作。</p><p>MySQL是数据库管理系统中的一款软件，被业界广泛使用，例如新浪、QQ、淘宝、都在大量使用MySQL数据库。</p><p>腾讯QQ使用Linux与MySQL数据库，存储注册用户2.8亿的信息，活跃人数9000万，凭借万台服务器搭建的数据库集群，腾讯QQ同时在线人数也达到了千万，这证明了MySQL数据库的大容量、快速响应特点。</p><p>MySQL是一款关系型数据库，尤其适合Web应用，特别是电商领域，MySQL遍布各种行业、移动、爱立信、惠普、银行、思科、摩托萝拉、等等。</p><h2 id="LAMP架构"><a href="#LAMP架构" class="headerlink" title="LAMP架构"></a>LAMP架构</h2><p> LAMP（Linux-Apache-MySQL-PHP）网站架构是目前国际流行的Web框架，该框架包括：Linux操作系统，Apache网络服务器，MySQL数据库，Perl、PHP或者Python编程语言，所有组成产品均是开源软件，是国际上成熟的架构框架，很多流行的商业应用都是采取这个架构，LAMP具有通用、跨平台、高性能、低价格的优势，因此LAMP无论是性能、质量还是价格都是企业搭建网站的首选平台。</p><p>LAMP是一个多C/S架构的平台，最初级为web客户端(浏览器)基于TCP/IP通过http协议发起传送，这个请求可能是动态的，也可能是静态的。</p><p> 所以web服务器通过发起请求的后缀来判断，如果是静态的资源就由web服务器自行处理，然后将资源发给客户端。如果是动态这时web服务器会通过CGI（Common Gateway interface）协议发起给php。</p><p> 这里但是如果php是以模块形式与Web服务器联系，（安装在同一台服务器）那么他们是通过内部共享内存的方式。</p><p> 如果是php单独的放置与一台服务器，那么他们是通过sockets套接字监听的方式通信（安装在不同的服务器上，远程通信，这又是一个C/S架构）。</p><p> 这时php会相应的执行一段程序，如果在执行程序时，需要用到数据。</p><p>那么php就会通过mysql协议发送给mysql服务器（也可以看作是一个C/S架构）。由mysql服务器处理，将数据供给php程序。</p><p>【流程解析】</p><p><img src="http://book.luffycity.com/linux-book/%E4%BA%92%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/pic/image-20200203165504534.png" alt="image-20200203165504534"></p><p>1.用户通过浏览器发送http请求，到达<code>web服务器（apache或nginx）</code></p><p>2.web服务器解析用户请求信息，明确他到底要什么，如果是<code>静态资源请求</code>，直接通过linux内核读取硬盘上的数据，然后构建响应报文，给与用户。如果<code>是动态资源请求</code>，则转发请求给<code>应用服务器（php,python）</code>，由php解析动态请求，解析完毕后，返回给apache，发给用户</p><p>3.如果涉及数据库操作，利用<code>php-mysql</code>驱动，获取数据库数据，再返回给php，最终给与用户</p><p><img src="http://book.luffycity.com/linux-book/%E4%BA%92%E8%81%94%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/pic/image-20200203170245218.png" alt="image-20200203170245218"></p><h2 id="LAMP搭建"><a href="#LAMP搭建" class="headerlink" title="LAMP搭建"></a>LAMP搭建</h2><p><strong>linux环境搭建</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.关闭防火墙</span><br><span class="line">iptables  -F#清空防火墙规则</span><br><span class="line">systemctl stop  firewalld  #停止防火墙服务</span><br><span class="line">systemctl  disable  firewalld#禁止开机自启</span><br><span class="line">2.检查selinux状态</span><br><span class="line">[root@tao_120 ~]# getenforce </span><br><span class="line">Enforcing</span><br><span class="line"></span><br><span class="line">3.暂时关闭selinux</span><br><span class="line">[root@tao_120 ~]# setenforce 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重启一下apache"><a href="#重启一下apache" class="headerlink" title="重启一下apache"></a>重启一下apache</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lht_121 ~]# systemctl  start httpd</span><br><span class="line">[root@lht_121 ~]# systemctl  status httpd</span><br></pre></td></tr></table></figure><img src="/2021/10/20/LAMP%E6%9E%B6%E6%9E%84/image-20210911100057802.png" class="" title="This is an example image"><h3 id="部署mysql（mariadb）"><a href="#部署mysql（mariadb）" class="headerlink" title="部署mysql（mariadb）"></a>部署mysql（mariadb）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@chaogelinux ~]# yum install mariadb-server mariadb      #通过yum源安装mariadb（mysql）服务</span><br><span class="line">[root@lht_121 ~]# systemctl  start   mariadb#安装好以后开机mariadb服务</span><br></pre></td></tr></table></figure><p>检查mariadb的数据文件夹，存在mysql.sock文件，表示启动了，以及属主、属组权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@lht_121 ~]# ll  /var/lib/mysql/</span><br><span class="line">总用量 28700</span><br><span class="line">-rw-rw----. 1 mysql mysql    16384 9月  11 10:02 aria_log.00000001</span><br><span class="line">-rw-rw----. 1 mysql mysql       52 9月  11 10:02 aria_log_control</span><br><span class="line">-rw-rw----. 1 mysql mysql 18874368 9月  11 10:02 ibdata1</span><br><span class="line">-rw-rw----. 1 mysql mysql  5242880 9月  11 10:02 ib_logfile0</span><br><span class="line">-rw-rw----. 1 mysql mysql  5242880 9月  11 10:02 ib_logfile1</span><br><span class="line">drwx------. 2 mysql mysql     4096 9月  11 10:02 mysql</span><br><span class="line">srwxrwxrwx. 1 mysql mysql        0 9月  11 10:02 mysql.sock</span><br><span class="line">drwx------. 2 mysql mysql     4096 9月  11 10:02 performance_schema</span><br><span class="line">drwx------. 2 mysql mysql        6 9月  11 10:02 test</span><br></pre></td></tr></table></figure><p>登陆mariadb数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@lht_121 ~]# mysql -uroot  -p  #登陆数据库格式   mysql   -u用户    -p密码    （中间没有空格）</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 2</span><br><span class="line">Server version: 5.5.68-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置mariadb用户root的登陆密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lht_121 ~]# mysqladmin -uroot password &quot;123qwe&quot;</span><br><span class="line">[root@lht_121 ~]# mysql  -uroot -p123qwe</span><br></pre></td></tr></table></figure><h3 id="部署php"><a href="#部署php" class="headerlink" title="部署php"></a>部署php</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.解决php安装的依赖关系</span><br><span class="line">[root@lht_121 ~]#  yum install -y zlib-devel libxml2-devel libjpeg-devel libjpeg-turbo-devel libiconv-devel freetype-devel libpng-devel gd-devel libcurl-devel libxslt-devel libtool-ltdl-devel pcre pcre-devel apr apr-devel zlib-devel gcc make -y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.安装php，以及php链接mysql数据库的驱动</span><br><span class="line">[root@lht_121 ~]# yum install  php php-fpm  php-mysql  -y</span><br><span class="line"></span><br><span class="line">3.php不需要额外修改，但是需要修改apache配置文件，支持php</span><br><span class="line">[root@lht_121 ~]# vim /etc/httpd/conf/httpd.conf  #添加如下相关配置</span><br><span class="line"></span><br><span class="line">DocumentRoot &quot;/www&quot;</span><br><span class="line">    TypesConfig /etc/mime.types</span><br><span class="line">    AddType application/x-httpd-php  .php      #让apache识别php的程序，以.php   .phps 结尾的请求</span><br><span class="line">    AddType application/x-httpd-php-source  .phps</span><br><span class="line">    DirectoryIndex  index.php index.html#返回默认的页面文件 index.php(手动编写php代码)</span><br><span class="line">    </span><br><span class="line">4.修改首页文件内容</span><br><span class="line">[root@chaogelinux ~]# cat /www/html/index.php</span><br><span class="line">&lt;meta charset=utf8&gt;</span><br><span class="line">我是新的首页，你好兄弟们</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">5.重启apache服务</span><br><span class="line">systemctl  restart   httpd</span><br></pre></td></tr></table></figure><h3 id="测试php链接mysql"><a href="#测试php链接mysql" class="headerlink" title="测试php链接mysql"></a>测试php链接mysql</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.添加php脚本。</span><br><span class="line">[root@lht_121 ~]# vim /www/html/index.php </span><br><span class="line">&lt;?php</span><br><span class="line">     $conn = mysql_connect(&#x27;localhost&#x27;,&#x27;root&#x27;,&#x27;chaoge666&#x27;);</span><br><span class="line"> if ($conn)</span><br><span class="line">   echo &quot;php已成功连接mysql，你真棒&quot;;</span><br><span class="line"> else</span><br><span class="line">   echo &quot;你咋回事，这都搞不定，细心检查下吧&quot;;</span><br><span class="line"> mysql_close();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>访问php脚本文件，测试是否能够链接mysql数据库</p><img src="/2021/10/20/LAMP%E6%9E%B6%E6%9E%84/image-20210911104130218.png" class="" title="This is an example image"><p>关闭数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lht_121 html]# systemctl stop mariadb</span><br></pre></td></tr></table></figure><img src="/2021/10/20/LAMP%E6%9E%B6%E6%9E%84/image-20210911104219122.png" class="" title="This is an example image"><h2 id="基于LAMP搭建论坛"><a href="#基于LAMP搭建论坛" class="headerlink" title="基于LAMP搭建论坛"></a>基于LAMP搭建论坛</h2><p>Crossday Discuz! Board是一套通用的社区论坛软件系统，用户可以在不需要任何编程的基础上，通过简单的设置和安装，搭建起具备完善功能、很强负载能力和可高度定制的论坛服务。</p><p>Discuz! 的基础架构采用世界上最流行的web编程组合PHP+MYSQL实现，是一个经过完善设计，适用于各种服务器环境的高效论坛系统解决方案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.下载discuz源码包</span><br><span class="line">wget http://download.comsenz.com/DiscuzX/3.2/Discuz_X3.2_SC_UTF8.zip</span><br><span class="line"></span><br><span class="line">2.安装解压缩命令，unzip</span><br><span class="line">yum  install  unzip -y</span><br><span class="line">unzip Discuz_X3.2_SC_UTF8.zip</span><br><span class="line"></span><br><span class="line">3.给论坛源码进行授权，给予最大权限</span><br><span class="line">[root@lht_121 Discuz]# chmod -R  755  /opt/Discuz/*</span><br><span class="line">[root@lht_121 Discuz]# ll</span><br><span class="line">总用量 12200</span><br><span class="line">-rwxr-xr-x.  1 root root 12486773 4月   8 2020 Discuz_X3.2_SC_UTF8.zip</span><br><span class="line">drwxr-xr-x.  2 root root      102 5月  31 2016 readme</span><br><span class="line">drwxr-xr-x. 12 root root     4096 5月  31 2016 upload</span><br><span class="line">drwxr-xr-x.  4 root root       72 5月  31 2016 utility</span><br><span class="line"></span><br><span class="line">4.移动该论坛代码，放入到apache的站点目录下</span><br><span class="line">[root@lht_121 Discuz]# mv  upload/*  /www/html/</span><br><span class="line">mv：是否覆盖&quot;/www/html/index.php&quot;？ y</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
